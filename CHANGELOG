0.9.15:

 ** Substantial performance and stability gains by switching critical system call
     hooks from User32.dll to their NtUser* counterparts in win32u.dll **


0.9.14:

 (.1): Added option to fix red/green color banding if G-Sync is used with a
         10-bit framebuffer

 + Added D3DCompiler_43.dll, D3DX11_43.dll and D3DX9_43.dll as compressed .7z
     archives that will be unpacked to a game's directory if a user does not
       have the June 2010 DirectX Redistributables installed.

   >> In theory I could now start using D3DCompiler_47.dll, but I'll stick
        with _43 until I need the more advanced features for shader modding.


0.9.13:

 (.3): Added disk read/write info to thread tooltip
 (.2): Added memory info to thread tooltip
 (.1): Assigned names to unnamed threads using debug symbols

 + Added a new Threads widget, that lists performance per-thread (kernel/user)
     and can even allow you to suspend individual threads.

   >> Suspending threads is dangerous, I expect this feature will be used for
        mod developers only. There is a high likelihood that you will have to
         restart a game to recover after using that.

 + Moved SteamAPI support DLLs to PlugIns\ThirdParty\Steamworks\...
 + Added proper Unicode filesystem path translation to SKIM64 for Steam manifests


0.9.12:

 + Updated build of SKIM64 allows installation of standalone Ni No Stutter mod
  - Ni No Stutter is built-in to this release of the global injector
 + Reduced memory consumption for D3D11 shader state tracking
 + No longer write ReservePercent to ini files, it is being phased out
 + Remove Merge-Only Cache Policy from D3D11 Texture Cache


0.9.11:

 (.1): Fix D3D11 Shader Mod Commands (i.e. D3D11.ShaderMods.ToggleConfig ...)

  + Fixed injection-blacklisted games failing to start while global injection is active
  + Fixed DLL init. issues with Far Cry 5 (_after_ Easy Anti-Cheat is worked around)
  + Improved support for shader state tracking in multi-threaded D3D11 engines
  + Added audio gain control (+dB) to volume management for hardware that supports it


0.9.10:

  + Dynamically adjust NvAPI monitoring thread priority to prevent rare hitching
      when the render thread's priority is != NORMAL
  + Added various options to make Ni No Kuni 2 less annoying; refer to control panel
  + Rolled up all of the changes from the standalone FFXV version (0.9.9)


0.9.9:

 (.15): Add logging of unexpected ref. counts on texture data to locate FFXV leaks
 (.14): TargetFPS applied at startup again
 (.13): Add merge mode to texture cache -- only prevents duplicate resources
 (.12): Sleep(0) on render thread -> SwitchToThread(); useful for i5 users
 (.11): Workaround for threads that try to skip attach notifications and corrupt TLS
 (.10): Alternate compiler options for better support with Ansel -- again
 (.8): Add persistent storage of settings introduced in .6, and explain them
        [They are actually applied when the engine starts said thread now]

 (.6): Add options for thread scheduling; can lower render and VSYNC threads
         to help people with fewer CPU cores in FFXV

 (.5): Anti-Debug Workaround for FFXV

 (.3): Correctly packed 64-bit version of CEGUI into 64-bit builds :P

 (.2): Fixed floating ImGui widgets not saving position in osd.ini
 (.1): Fix issue preventing Special K from identifying and assigning its own
         threads their initial priority (all were running NORMAL but most are
           designed to run at lower priority).

 + Disabled compiler options known to cause problems with Ansel; forced to
     replace them with options known to cause issues with MSI Nahimic.

 + Prevent FFXV from running SteamAPI with TIME_CRITICAL scheduling and
     starving more important threads that actually use the CPU productively


0.9.8:

 (.4): Fixed concurrency issues with texture cache in FFXV, it is safe to
         enable caching now and highly recommended
 (.3): Added error message on systems missing June 2010 DirectX Runtimes

 (.1): Disable a user's ability to perform software updates using the in-game
         config menu on installs done without SKIM.
 (.1): Add option to disable DXGI_PRESENT_TEST swapchain present for FFXV


 + Added SteamAPI rate throttling to fix resource load hitches in FFXV

   >> Right-click the SteamAPI Frame counter in the control panel to access:

       -1 = Unlimited (will hitch)
        0 = Disabled  (no idea what will happen, but probably not good)
       *8 = (Suggested max. for FFXV)


 + DLL static initialization cleanup (most global scope data is now scoped)

    (Dramatic global injection performance speedup)


0.9.7:

 + Added DirectXTex DLL Exports:

   * SK_DXTex_GetMetadataFromDDSFile
   * SK_DXTex_LoadFromDDSFile
   * SK_DXTex_CreateTexture

     ( Plug-in Authors: Use these instead of D3DX11; refer to updated UnX
                          plug-in for example code )

 --

 + Fixed ReShade shim loader (1.0.0.3) not correctly invoking LoadLibraryW
 + Reduced volume of crash sound and added a MessageBox if sound is muted
 + Added version info to the kernel DLL unload trace log
 + Added render API and crash info to global DLL's shared data segment


0.9.6:

===========================================================================
 IMPORTANT NOTES REGARDING Final Fantasy XV:
 -------------------------------------------
 
  If you opt to use texture caching, set the limit to your entire VRAM
    capacity, otherwise it will fight with the game's internal cache and
      cause stuttering.

  I cannot fix this in time for the game's launch and have disabled texture
     caching by default for this game as an interim solution.

 *** Texture modding in D3D11 requires caching to be enabled, so if you see
       no textures in the mod tools, it's probably because caching is OFF.
===========================================================================

 + Re-enabled IsDebuggerAttached (...) spoofing to allow FFXV to be run
     through a normal debugger (i.e. not Cheat Engine) without bailing out
 + Optimized D3D11 shader cache for games that create the same shader
     concurrently across multiple threads


0.9.5:

 (.3): Fixed mouse cursor confinement in FFXV
 (.3): Optimized live shader view in D3D11 for games with thousands of
         pre-compiled, but inactive, shaders.

 (.2): Defer initialization of D3D11 texture management until D3D11 is actually
         used :P
 (.2): Improve AppCache generation on first execution of games w/ launchers

 -----------------------------------------------------------
 *** It is STRONGLY suggested that you delete the directory:

       Documents\My Mods\SpecialK\Profiles\AppCache

     after receiving this update ***
 -----------------------------------

 (.1): Partitioned scratch memory per-thread for D3D shader disassembly,
         ini parser, command processor and debug stack traces for faster startup

 (.1): Fixed various rare NvAPI issues
 (.1): Upon successful shutdown, crash.log is deleted again
 (.1): All Steam AppID resolution cache data is stored in Profiles\AppCache\... now

 + Replaced kernel scheduling resolution tricks with Multimedia Class Scheduler

  >> This will increase battery life on mobile systems (versus the old code),
       and should not have a measurable impact on framerate limiter performance.


0.9.4:

(.3) Ignore D3D9 video playback in Atelier Firis (a D3D11 game)
(.3) Disabled automatic steam_appid.txt generation
(.3) Disabled code to automatically bring a game's window to the foreground at
       start, it was causing too many compat. issues.

(.2) Tweaked global injection behavior for certain non-standard Windows apps

 + Added more detailed pixel format information to SK's log in D3D11 games.
 + Added logging of unloaded DLLs to SK's log
 + Improved the reliability of using auto-update and branch selection
     features from the Update menu in-game.

   >> Please give these a try, I know of a few Unity games that don't handle
        window management correctly and they're forever WONTFIX, but if you
          encounter errors with other games, I'll be happy to investigate.

 + "Borrowed" an environment variable exported by the Steam client to get
     game's AppID without booting up SteamAPI.


0.9.3:

 Updates should no longer cause WerFault.exe to flip out :P
 ----------------------------------------------------------

 + Joined the update dialog's thread with the game's message pump so that
     input processing behaves consistently.
 + Delay-load most non-standard DLL dependencies (i.e. d3dx9_43.dll) to
     reduce injection overhead in applications that are not games.

  >> Prevents the DLL from getting stuck in explorer.exe, browser_broker, etc.
       without the need for a shim loader.


0.9.2:

 (.1): Updates should no longer cause WerFault.exe to flip out :P
 ----------------------------------------------------------------

 (.1): Joined the update dialog's thread with the game's message pump so that
         input processing behaves consistently.
 (.1): Delay-load most non-standard DLL dependencies (i.e. d3dx9_43.dll) to
         reduce injection overhead in applications that are not games.


 + Fixed Skyrim Special Edition launcher crashes
 + Fixed auto-update fetching version.ini multiple times if user postpones
 + Tweaked Steam achievement rarity colors in unlock popup for visibility
 + Sped up redundant Steam redisributable file detection (cpl opens faster)
 + Fixed DXGI CreateSwapChainForHwnd not actually using the HWND :)
 + Fixed Secret of Mana's resolution quirkiness
 + Cleaned up log file formatting and added performance counters to it
 + Removed CPU Stress Test Button
 + Added support for naming threads (Win 10 feature) to improve crash logs


0.9.1:

 (.4): Add option to cache textures even if a graphics engine is under- or
         overflowing Special K's reference count sanity tests

           (i.e. Tokyo Xanadu)

 (.3): Tweaked thread priority scheduling at boot for faster startup
 (.3): Improved window management in Sonic Mania and Lightning Returns
 (.2): Fixed support for caching / injecting Unordered Access View qualified
         textures (about 2/3 of FFXII's textures are Unordered Access Views)

 (.1): Fixed mouse capture issues caused by the previously mentioned fix :P

  + Fixed keyboard / mouse focus issues when Win32 modal dialogs are
      active at the same time as an ImGui modal dialog

 [!] Moved SpecialK[32|64].dll's texture injection directory to

      Documents\My Mods\SpecialK\Profiles\<game_name>\SK_Res

  + Fixed Secret of Mana late SteamAPI init. in global injector
  + Fixed address cache invalidation for D3D11 games
  + Updated 64-bit SteamAPI DLL for compat. with newer games
  + Increased MinHook performance (faster startup)


0.9.0:

 + Added a new File menu for texture modders, that will take you to your
     game's texture dump / injection directory (D3D11 only at the moment)

 + Fixed SteamAPI shutdown issues in some improperly written games;
   >> SteamAPI isn't thread-safe, stop shutting down stuff from a different
        thread than owns the client pipe.

 + Enabled the Bordered/Borderless/Borderless Fullscreen Display Menu in GL
  >> Some games do not properly resize their viewport when overriden in GL;
       please be aware of this.
 + Optimized dynamic memory management when drawing line-based performance
     graphs
 + Added auto-pause feature for Steam Overlay Aware games when the cpl is open
   >> This feature requires Special K to observe the game setup an overlay
        activation callback.

      This callback may be missed in global injection scenarios and the
        local DLL is more likely to properly detect Overlay Aware software.

    *** Right-click the SteamAPI frame counter to access this setting (if
          the current game is overlay aware) ***
  ---
 + Added Steam Online Status options to a new Steam menu
  >> This setting is per-game, but a system-wide preference can be manually
       setup by adding [Steam.Social] OnlineStatus=0 to Global\achievements.ini
 + Improved framerate limiter WaitForVBLANK and added this feature to GL
 + Fixed D3D9Ex Fullscreen and Windowed overrides for applications that do
     not set the Focus / Device HWND parameters during device creation

 + Added FFXV to an internal whitelist of games _NOT SOLD ON STEAM_ that
     are compatible with global injection.
 + Added more descriptive version info to the startup banner if you manually
     place Special K's DLL into a game directory as (dxgi.dll, d3d9.dll, etc).
 + Fixed file permission problems if you use Special K in the FFXV benchmark
  >> CEGUI cannot be used in the benchmark unless you run _BOTH_ the game,
      and SKIM64 (if you use global injection) as admin. SK will disable
        CEGUI automatically if file permission issues are detected.

 + Enhanced FFXII compatibility
 + Fixed UI scaling issues preventing Accept button from appearing on EULA.

 + Automatically bootstrap steam_api{64}.dll from Special K's distribution for
     any game located in SteamApps\common that does not use SteamAPI

  >> This allows AppID name resolution for games that pre-date SteamWorks,
       and adds Special K's Steam overlay enhancements.

   ( This feature is configurable through Steam.System::AutoInjectSteamAPI )

 + Added a menu option to File to inject SteamAPI into non-Steam games.

 + Fixed window focus issues in some OpenGL and DirectDraw/Direct3D 8 games
 + Renamed Render.GL::ShowOSDInVidCap to Render.OSD::ShowInVidCap since it
     affects all graphics APIs now

 + Stop booting ancillary graphics APIs after the game draws two frames;

     A game bringing in D3D9 or D3D11 after it's already started rendering
       using a different graphics API is usually for video playback and I
         have no interest in modifying that stuff :P

 + Added logging of all HWNDs that are actively tracking RawInput devices
 + Application restarts after update / compat menu now properly start the
     game in the foreground

 + Forced fullscreen mode works in D3D9 again, but Unity's still sketchy
 + Fixed COM wrapper dispatch issues for DirectInput 7 games
 + Fixed several window activation (alt+tab) issues in D3D9/GL
 + Fixed compatibility dialog for local wrapper installs causing deadlocks
 + Added D3D9 OSD visibility toggle for vidcap
 + Fixed framerate limiter preferences not being applied at start

 + Added timeout detection in the event that third-party
     software is preventing the OSD hiding feature from working;

  >> OSD will automagically revert to normal drawing behavior
       if this scenario is detected.

 + Added option to toggle OSD visibility in D3D11 games
 + 100% support for video capture software in D3D11
 + Nearly complete support for vidcap software in D3D9



0.8.67:

 + Corrected usernames not properly stripped from log files
 + Added range validation to D3D11 resolution limiting settings
 + Fixed OpenGL HWND determination logic for Chromium games


 + Tweaked input latency reducing features in framerate limiter

  >> If you want to test these, it is suggested you set the mouse cursor
       to NOT use hardware and then move it rapidly.

      Games severely impacted by input latency (usually denoted by a rising
        counter in the sleepless window thread tooltip) will become more
          responsive.


0.8.66:

 + Fixed ReShade deferred context shader triggers in Okami HD
 + Fixed CSteamworks (C#) SteamAPI wrapper in 32-bit games
 + Fixed window border removal in 32-bit games at startup
 + Improved compatibility with Mirillis Action! video capture
 + Improved ability of D3D8 / DDraw API wrappers to bootstrap through
     global injection


0.8.65:

 + Optimized thread locking behavior at startup for faster game launches
 + Lowered thread priority on performance monitoring threads
 + Delay-init WMI-based performance monitoring services for more reliable CPU
     monitoring
 + Moved NvAPI init until after Special K has setup render APIs because
     NvAPI hooks LoadLibrary{A|W}<Ex> and may interfere with render setup


0.8.64:

 + Added option to disable CEGUI in D3D9
 + Fixed D3D11 startup issues in some games
 + Fixed crash handler not re-installing itself in Steam Brakepad games


0.8.63:

 + Fixed window focus issues in multi-render context OpenGL games
 + Added option to disable CEGUI in D3D11
 + Fixed ImGui reset on resolution change in DXGI graphics APIs

   >> Overlay doesn't disappear when resizing anymore :)


0.8.62:

 + Added option to show OpenGL OSD in video capture
 + Added option to disable CEGUI in OpenGL

 + Added DirectInput / XInput version number to Input Management
 + Added full support for DirectInput 7 (needed for FF7/8)
 + HID Gamepad input is properly blocked by the option to disable it

 + Games that use RawInput for mouse processing will no longer be blocked
     when the UI is in input-exclusive mode.

   >> That mode was always intended to block only gamepad and keyboard input;
        mouse input is blocked only if the cursor is over Special K's UI.


0.8.61:

 (.1): Fixed missing DLL export for wglSwapBuffers; needed for use as OpenGL32.dll

 + Fixed the EULA screen to support agreeing with gamepad / keyboard :)
 + Fixed OpenGL transparency option for ImGui rendering.
 + Fixes OpenGL OSD text rendering memory issues in 32-bit games

  >> The fix is sub-optimal and it is not recommended that you use the
       text-based OSD in OpenGL games until I can re-write it.

    * Performance widgets are actually higher performance in OpenGL
        than the OSD, please use widgets to monitor performance instead.


  + A handful of 32-bit OpenGL games continue to have issues and you
      may need to use EnableCEGUI=false to resolve compatibility issues.

    >> CEGUI is only used for achievement popups and OSD text; other
         overlay / UI aspects will continue to work.



0.8.60:

 (.2): Fixed ReShade post-processing order in OpenGL so that it does
         not post-process the config UI :)
 (.2): Temporarily disabled OSD text rendering in 32-bit OpenGL games
 (.2): Added sRGB framebuffer support in OpenGL games
 (.2): Fixed GL geometry buffer state leaks in CEGUI
 (.2): Fixed INI parser off-by-one issue in Chinese INI files
 (.2): Fixed OpenGL wglSwapMultipleBuffers calling wrong hook

 (.1): Improved global injection and auto-update performance
 (.1): Removed several legacy settings (i.e. Raptr injection warnings)

 + Completely separated ImGui from CEGUI (OSD / achievements) in OpenGL
 + Fixed 32-bit OpenGL delay-load ABI issues
 + Fixed OpenGL Vertex Array Object state leaks in legacy (GL 2.x) games
 + Corrected injection bypass dialog crashing OpenGL games


0.8.59:

 + Fixed GTA V Launcher injection compatibility
 + Added an option to delete Steam Common Redistributables across all
     registered Steam Libraries (libraryfolders.vdf) to the control panel.


0.8.58  (2018):

 (.2): Adds refresh rate to Fullscreen Resolution reading in control panel

 + CEGUI is packed into Special K DLLs now and it is possible to redistribute
     Special K without any dependencies.
 + DLL stays inside of blacklisted apps to prevent leaks in third-party modules
     that incorrectly use DisableThreadLibraryCalls (...)


0.8.57:

 (.1): Added a startup banner with version info, and new options to control the
         complexity of the FPS readout in the OSD.

  + Improved SteamAPI offline DRM bypass to work in all games tested;
   + Improved support for native Steam controller games

    >> Local DLL wrapper is needed for both of these things and so is the
         INI option referred to as "SpoofBLoggedOn."

  + In D3D11 games that use multi-threaded rendering, ReShade triggering works
      as intended.
  + Added option to disable gamepad input to a game, similar to the m&kb options

  * New Command Console Variables:
  ================================
    Input.Keyboard.DisableToGame  (Boolean): Blocks Keyboard Input
    Input.Mouse.DisableToGame     (Boolean): Blocks Mouse Input
    Input.Gamepad.DisableToGame   (Boolean): Blocks Gamepad Input
    Input.Gamepad.DisableRumble   (Boolean): Blocks Rumble*
                                     (*) All APIs except DirectInput

    Input.Gamepad.XInput.UIController (Integer): 0-3,   4=Disable
    Input.Gamepad.Steam.UIController  (Integer): 0-15, 16=Disable


0.8.56:

 (.1): Fixed various memory problems during init/shutdown
 (.1): Steam achievement popups are now drawn over top ImGui

 + Added support for d3d11.dll wrapping (alternative to dxgi.dll)
 + Addressed memory leak in blacklisted processes


0.8.55:

 + custom_<SpecialK|dxgi|d3d9|dinput8|OpenGL32>.ini is now supported

  >> If this INI file is present (using the appropriate DLL name), any values in
       it will override the game's config.

       These values are not stored at exit, and remain even if/after a mod update
         overwrites your base INI file. Use this feature sparingly, for stuff you
           don't need to re-configure (i.e. mouse behavior, macros, etc.)

 + Added RTSS hook avoidance by checking the window class that owns a Swapchain
 + Added alt. DXGI hook codepaths (Render.DXGI | HookType=0,1) for Okami compat.
 + Added WaitForVBLANK option to D3D11 Swapchain settings
 + Changing D3D11 Swapchain latency in the control panel takes effect immediately
 + Improved global injection performance for non-whitelisted applications


0.8.54:

 + Added support for plug-in loads from a game's global injection profile directory
 + Improved texture memory stats in custom ReShade
  * Rendertargets are distinguishable from actual texture files by their color
  * Added active / total count to the texture summary

 + Added D3D11.ShaderMods.Unload and ToggleConfig commands to load/unload shader
     setting INI files.
 + Added fullscreen mode restoration on Alt+Tab if force fullscreen is enabled


0.8.53:

 (.6): Fixed CEGUI to support Unicode file paths for log files

   >> Configuration for some Steam games may be reset because profile names with
        non-Latin characters will be stored in a different location.

 (.5): RawInput mouse fixes for Okami
 (.4): HOTFIX for Okami's non-Latin characters in filesystem when storing config

 + Changed debug code to run-time load dbghelp.dll instead of link-time
 + Added option to disable screensaver
 + Added texture format types to typeless DXGI formats when generating mipmaps
 + Added SteamAPI DLL SHA1 Verification for diagnostic purposes since CodexAPI is
     a stability problem... pirates just opt-out of SteamAPI enhancements please.


0.8.52:

 (.4): HOTFIX for 5 FPS issue
 (.3): Fix XInput lock behavior in games that use out-of-range controller idx
 (.2): Corrected SKIM64 start/stop behavior and AMD ADL
 (.1): Added Window.TopMost variable to fix Star Ocean 4

 Keyboard Macros
 ===============

 + Added support for keyboard macros

  >> (See ReadMe\cvars.txt for partial list of commands)

    *** Structure in INI is  [Macro.<NameOfMacroGroup>]
                             KeyBind=Command
                             ...

     ( Multiple commands may share the same keybinding, but order of execution
         is undefined. )

 + Added support for global macros and turned all OSD toggle keys into macros

  >> (Refer to Global\macros.ini)

 + Fixed WMI performance monitoring thread init when Steam overlay is
     loaded first


0.8.51:

 (.1): Corrects mouse cursor activity detection in World of Final Fantasy

 + Added windowed mode compatibility fixes for World of Final Fantasy

  >> Delete any existing config profile (dxgi.ini/SpecialK.ini) to take advantage of

 + Fixed HWND ping-pong issue in World of Final Fantasy 
 + Added XInput haptic recursion protection (safeguard against Steam overlay)
 + Added automatic mipmap generation option in D3D11
 + Corrected cached VRAM total calculation when injecting textures in D3D11


0.8.50:

 (.1): Enabled persistent storage of sleep-wait framerate limiter preferences

 + Added options to control line and contour anti-aliasing in ImGui
 + Added option to disable alpha transparency on Special K's UI
  >> Solves flickering in some DirectDraw, D3D8 and D3D9 games

 + Corrected ReShade's SMAA shader so that edge-detection when using depth
     respects the "upside down" pre-processor definition.
 + Fixed the ability to drag ReShade effects to change their order
 + Added options to block Keyboard / Mouse input to games, to prevent them
     from changing input icons if you don't want that.
 + Added Alt + F4 Confirmation Dialog for games that usually block Alt+F4
 + Made ReShade Shim Loading a bit more sane

  >> (d3d11, d3d9 and GL DLLs are dynamically generated on first load)

 + Added D3D11 Texture Mod Reload Support


0.8.49:

 (.2): Fixes startup issues in Elex

 (.1): Performance optimization for heavily multi-threaded engines that
         map and unmap D3D11 memory from different threads.

+ Added global injection whitelist using Regular Expression syntax.

  Manually create Documents\My Mods\SpecialK\Global\whitelist.ini and enter
    patterns to match, one per line.

   >> Implicitly, the whitelist already contains this pattern:

        "SteamApps\\common\\" , which is part of the executable path for all
                                  Steam games.

  *** Restart global injection using SKIM64 any time you change the whitelist;
        it is only parsed at startup. ***

+ Locally wrapped games can now load ReShade from a central location by using a new
    shim loader DLL (ReShade32.dll / ReShade64.dll).
+ Eliminates D3D11 shaders generated by ReShade from the shader list
   >> That used to be a good way to crash the game ;)


0.8.48:

 + Fixed incorrect alt+tab operation in fullscreen exclusive w/ window centering on
 + Eliminated D3D11 reference counting issues at startup
 + Improved window management reliability
 + Disabled cursor restriction while dragging windows
 + Added support for evaluating commands in parallel on deferred render contexts
     before they are coallesced by a (working) graphics driver.
   >> Fixes problems in Blue Reflection, though probably hurts performance.


0.8.47.2/3:

 + Added rescale-to-fit behavior to Live Render Target and Texture View (D3D11)
 + Added support for DisableIfTexture predicate to d3d11_shaders.ini

  >> Right click a shader to access this menu (generally pixel shaders only)


0.8.47.1:

 + Added per-tracked shader wireframe/on-top state and cleaned up D3D11 shader UI

  >> Default is now to draw the tracked shader on-top


0.8.47:

 + Added support for D3D11 Shader state load/store (d3d11_shaders.ini)

      (Refer to the new button pannel in the Shader Mod Tools)

  >> Will add annotations for hash names to something more meaningful later
  >> Will also add ability to save shader profiles in order to enable/disable
       known effects.
  >> Command console will also allow loading profiles by name and manipulating
       the stored shader values, so that you can macro this stuff to keybinds.

 + Added sRGB -> UNORM override if Flip Model is enabled in D3D11 games, this
     allows G-Sync in Unity games

 + Added FlipEx mode to D3D9Ex override, allowing G-Sync in windowed mode in D3D9


0.8.46:

 + Local Wrapper DLLs no longer use AppCache for config
 + Fix for Steam games with Trademark symbols in their name when using the
     global injector config repository... you may need to clear Special K's
       AppCache directory before this takes affect.
 + Corrected attempts to auto-detect D3D8 / DDraw as the primary graphics API
     when the required dgVoodoo API support plug-in is not present
 + D3D11 Texture injection optimizations
 + Disabled Sleepless Render Thread by default for improved compatibility


0.8.45:

 + Improved vertex memory alignment in ImGui D3D9 renderer
 + Fixed memory alignment issues for non-standard packed DXTn textures (D3D9)
 + Fixed Agarest Zero / 2 D3D9 texture management
 + Exit Confirmation Dialog now focuses on the Cancel button using gamepad input
 + Thread optimizations for D3D9/11 texture injection


0.8.44:

 + Added Denuvo activation management to all Denuvo-based (STEAM games)

  >> I am not a fan of Origin, maybe if they publish more games I like and open up their
       platform's API a littlebit I will give Origin+Denuvo the same features? :)

 + Corrected formatting on the D3D9 framebuffer tooltip

  >> Mouseover the resolution number in a D3D9 game for Special K's "stats for Nerds" :P

 + Added support for games that use the very latest version of SteamAPI (mostly VR nonsense)
 + Improved performance in games that busy-wait using PeekMessage (...)  (i.e. Sonic Mania)
 + Minor correction for some D3D9 games having issues with texture modding


0.8.43:

 + Enabled triple-buffering override in D3D11 fullscreen (non-flip-model) mode
 + Disabled non-mipmapped texture cache in Divinity: Original Sin 2

  >> If you want to mod its UI textures, turn this option back on and turn staging texture
       uploads on. This is under the D3D11 / Texture Management settings.

 + Improved multi-threaded texture cache performance for games like Divinity: Original Sin 2
 + Removed username from file paths in logs
 + Add SteamAPI offline check bypass option


0.8.42:

 + Last update prior to hurricane Irma
 + Improved D3D9 texture injection performance


0.8.41:

 + Improved support for D3D9 texture modding, and made it an opt-in thing since it's still
     experimental.
 + Added File | Exit to the control panel


0.8.40:

 + Added somewhat functional texture modding support to D3D9
  >> Will finish at a later date
 + Added XInput Controller Slot Reassignment (refer to INI file -- default is 0,1,2,3)


0.8.39:

 + Fixed D3D9Ex D3DPRESENT_DONOTWAIT support in Lightning Returns: FFXIII
 + Integrated UI memory management fixes for FFXIII
 + Improved thread-safety in D3D9 shader mod tools
 + Added scaling option to widgets (needs a ton of work)
 + Added clothing preferences to Gal*Gun: Double Peace


0.8.38:

 + Integrates about 33 - 50% of Tales of Berseria Fix's shader modding functionality
 + Fixes SteamAPI problems in older games


0.8.37:

 + Preliminary support for a native Steam Controller input backend
  >> Does not utilize any of the special features, merely blocks native SteamAPI input
       while the config UI is open
  >> Generally for the 1% of games that use native Steam, this requires Special K to be
       installed as a local wrapper because it needs to catch SteamAPI initialization early.


0.8.36:

 + Performance-tuned memory pattern scanner to offer alignment and address above/below
     search heuristics.

   >> Significantly speeds up repeating pattern searches (i.e. hard-coded resolutions)

 + Added Resolution Override to Gal Gun and Akiba's Trip

  >> This is different from the way this feature normally works, it goes beyond API
       reflection/introspection and instead patches certain hardcoded arrays of memory
         in really crappy JRPG ports.

 + Added D3D11 Wireframe Mode (per-shader)
 + Added additional D3D11 Shader Culling options (per-Shader Resource View)
 + Added support for BC7 and BC6H textures to Final Fantasy X/X-2
 + Fixed Shader Resource View formats for injected D3D11 textures using alternate formats
 + Fixed Global Injection Blacklist issues
 + Turned off all widgets by default for new installs


0.8.35:

 + Added option to flip textures in D3D11 Live Texture View
 + Added indicator for injected textures to D3D11 Live Texture View
 + Corrected texture hashes listed in D3D11 Live Texture View
 + ReShade can now be opened independently of Special K's config menu
 + Fixed ReShade draw order in OpenGL games


0.8.34.1:

 + Fixed SteamAPI problem in Dark Souls III
 + Added Browse ReShade Assets to File Menu
 + Improved ReShade stats screen
 + Improved controller support in ReShade's UI
 + ReShade game presets are now stored in Profiles\<appname>\ReShade\<executable.ini>

0.8.34:

 + Framerate limiter defaults to busy-wait again
  * The customization you do to the non-busy-wait method (under Advanced) are not saved
      when you exit a game.

 Added Support for Custom ReShade
 ================================
  + This release comes bundled with a test version of unofficial ReShade 3.0.666 ;)
  + The custom version goes in PlugIns/Unofficial, and you should place the official
      release (if you want/need it) into PlugIns/ThirdParty
  + Only the global injector version of Special K supports custom ReShade, you can
      select between official / custom under the PlugIns menu

   >> The custom version includes:
    * Gamepad / keyboard support on config menu
    * Per-game presets, textures and shaders
     + Place Textures in Documents/My Mods/SpecialK/Profiles/<App Name>/ReShade/Textures
     + Place Shaders in Documents/My Mods/SpecialK/Profiles/<App Name>/ReShade/Shaders
    * Always loads a game's preset on start, instead of the last used preset


0.8.33:

 + Fixed low-resolution issues with the EULA window
 + Most analytical graphs are now multi-colored instead of trying to determine
     a single color to represent the quality of the entire dataset.
 + Added new options to the framerate limiter (disabled by default) to continue
     driving a game's window message pump if it renders from the same thread as it
       handles input.
  >> Should reduce input latency and help in games like FFX
  >> You must turn Busy-Wait limiting off in order to use this


0.8.32:

  * Profile Name Collision Avoidance
 ====================================

 + Global Injector Profiles for Steam games use the application name as defined by the game's manifest
   >> Prior to this, they used <app_name.exe>, which was too generic.

 + This is a two-stage process that involves booting SteamAPI up to determine the AppID and then
     parsing the manifest.

   >> Translation and mapping data for each game is maintained in a new AppCache\... directory structure
   >> Profile migration occurs automatically, but for some games my overlay may not render correctly
        the first time you run a pre-migrated game.
   >> In some cases, deleting the original <app_name.exe> directory may even be necessary.

 + Later versions of Special K will allow blacklisting launchers and other components that share Steam AppIDs


0.8.31:

 + Fixed Steam DRM issues in DOOMx64 and a couplf of other OpenGL games
 + Added a battery meter to the framepacing widget
 + Added an option to draw a border around widgets

 * Added support for gamepad manipulation of widgets
 ===================================================
  > Enter gamepad exclusive input mode, then hold Square (PlayStation) or X (Xbox)
      and select a widget by pressing the shoulder buttons.
  > Moving a widget can be done by holding Square / X and moving the left analog stick
  > Double-tapping the Cross (PlayStation) or A (Xbox) buttons will open widget config
 
 + Removed Alt+F4 input hack for Trails of Cold Steel; it is obsolete


0.8.30:

 [.3]
  + Added D3D11 Graphics Pipeline Widget, it displays most of the important stats from the
      shader analytics feature (Ctrl + Shift + R) over a 5 to 10-second history.
  + Added D3D11 SwapChain Menu, I'll fill the stuff in with tooltips later.
   >> This mostly benefits Windows 10 users
  + Fixed Trails of Cold Steel Alt+F4 behavior so it no longer exits if you're trying to
      close a different program
  + Added 1 frame swapchain latency in Flip Mode to ensure G-Sync doesn't destroy timing :)
   >> Will make this an option and restore the original latency reducing measures for
        non-G-Sync users in a future update.

 [.2]
  + Added CPU Monitor as an official widget, with OSD config and all
  + Added grid rulers for docked widgets while moving them
  + Added option to disable resizing widgets
  + Added persistent storage of widget positions
  + Added user-defined min/max size constraints to widgets
  + Fixed keybind parsing problems with numpad and Left/Right Alt keys

 [.1]
  + Fixed D3D8 / DDraw Wrapping

 + Added persistent config to some of the widgets (Volume Control / GPU Stats / Framepacing)
  >> Right click those widgets to open a config menu for them
 + Fixed DDRAW / D3D8 wrapper problems
 + Corrected scaling on menus


0.8.29:

 + The peak volume meter is now a histogram, assigned color based on channel
 + Peak volume moves left / right depending on channel
 + Added very early GPU hardware stat graphs to a new GPU widget
 + Mouse cursor and input behavior when interacting with widgets is more intuitive
  >> You can even move them around without the config menu open
 + Fixed Dark Souls 3 Texture Cache reference leaks
 + Disabled a few of the optimizations from 0.8.28 for compatibility with GeForce Experience
  >> Will investigate further in the future


0.8.28:

 + Removed tooltips from graph data views
 + Fixed G-Sync status query in D3D9 games
 + Added minimum flush interval for log I/O (100 ms default)
 + Coalesced all INI file output into a single buffered write for improved
     disk I/O performance
 + Restored multi-threaded DLL analysis at startup (performance)


0.8.27:

 + Added OSD Widgets (framepacing and CPU load)
  >> Will polish these off later, they're just toys for now.
 + Changed Special K's config menu to work similar to a Mac, for easier access
     to the branches sub-menu at lower resolutions
 + Fixed various Windows 7 issues


0.8.26:

 + Added G-Sync status to framerate readout on OSD
 + Cleaned up log formatting, turn wordwrap off to appreciate the changes ;)
 + Various DLL Loader compliance issues have been fixed (in third-party software),
     including using incorrect paths, wrong flags, etc.
   >> I am likely to encounter broken software that relied on the original undefined
        behavior, I'll fix it when it causes problems :)
   >> This change actuall solves a few oddball problems in the meantime
 + Added mouse warp deadzone configuration to the control panel for games with obnoxious
     mouselook.
 + Fixed occasional Wbem Locator issues caused by the Steam Overlay
   >> The reason that CPU stats, etc. can take several seconds to load is because the Steam 
        overlay holds a thread sync lock on the service needed for those stats. The reason
          those stats sometimes crash games is ... because the Steam overlay holds a lock.
   >> Tsk, tsk, Steam - other people need those services too, damit :)


0.8.25:

 + Fixed mouse input in Mouse Effect: Andromeda, *AGAIN*.
 + Officially supports dinput8.dll injection; the compatibility menu does not offer this
     as one of its choices, but it will eventually.
  >> dinput8.dll, for games that use this, has the greatest chance of working with fullscreen
       video capture software.
 + Improved keyboard input processing, particularly how it behves while in Input Exclusive mode
     and you trigger the keybinding to toggle the config menu.
  >> This is preparing for customizable keybindings, I've been promising them for a long time :)
 + Fixed occasional right-to-left window orientation problems in 64-bit builds
 + Fixed D3D11 reference counting underflows in some games, especially when a third-party
     render enhancing mod is present.
 + Fixed rare texture cache hash collision problem for textures that are removed from the cache
     because a graphics engine has altered them.


0.8.24.4:

 + Fix deadlock caused by MSI Nahimic due to hotpatching 32-bit code
  >> Add MORE padding bytes than the x86 ABI requires because Nahimic is borked

0.8.24.3:

 + Fixed all known multi-threaded rendering problems (Dishonored2 can be debugged now).
 + Reduced texture cache overhead
 + Improved WMI monitoring performance

0.8.24.1 / 2:

 + Crash logs are now stored persistently in logs/crash/<date>/...
 + Updated SKIM64 to add more functionality to tray menu

0.8.24:

 + Added Window Border Style settings to Display menu
 + Corrected several Windows 7 issues
 + Improved DOSBox OpenGL support
 + Improved thread-safety in D3D11 shader mod tools; still can't safely debug Dishonored 2
 + Fixed input support in Final Fantasy 8


0.8.23:

 + Fixed potential startup deadlock with Steam Overlay and CoInitializeSecurity (...)
 + Fixed SK_NoFailMove behavior (prevents updates) when attempting to patch a locked file
 + Fixed (evict-on-update) D3D11 texture cache in The Witcher 3 and Divinity: Original Sin
 + Added logs/installer.log when installing through SKIM
 + Added module name and fixed newline endings in game_output.log


0.8.22:

 + [Misc]  Stopping injection while programs are using Special K no longer crashes them :)
 + [SKIM]  Closing SKIM while injection is enabled now triggers a confirmation dialog
 + [D3D11] Added option to enable staging texture cache (for Unity games)
 + [SKIM]  Added option to start SKIM automatically during install and to system tray
 + [SKIM]  Added list of (64-bit) programs currently injected and a confirmation if you
             attempt to stop injection while a program is using Special K.
 + [SKIM]  Added tooltip to system tray icon
 + [D3D11] Added support for changing fullscreen display scaling mode while your game is
             running; should make using centered scaling modes a bit more intuitive.
 + [Misc]  Added injection stats to Help menu, mouseover Global Injector version to see
             basic information about games recently played.


0.8.21:

 + [SKIM]   Changed system tray icon (to another KDE icon =P) so that it is easier to
              recognize
 + [XInput] Fix for games that use XInputGetStateEx (...) without allocating the correct
              memory size for the data structure (+1 DWORD)
 + [D3D11]  Reduced D3D11 API overhead in games that stream memory-mapped textures when
              texture caching is enabled but the render mod window is not open
 + [SKIM]   Using +Inject or -Inject commandline switches starts SKIM minimized to the
              tray; left-click the icon in the try to restore it
 + [SKIM]   Branch migration takes effect immediately in all software except for the
              global injector
 + [SKIM]   Only one instance of SKIM can run simultaneously, minimized instances will
              be restored if a new instance is launched
 + [SKIM]   The commandline switch -Inject will now kill any running injection instances
              and exit


0.8.20:

 + [D3D11] Added texture updae frequency (0 = Manually Refresh, 1+ = Auto) for the
             texture mod tools.
 + [D3D11] Added option to replace 24-bit Depth Buffer with 32-bit
 + [D3D11] Improved multi-threaded safety in the D3D11 mod tools for games that draw
             from multiple threads.
 + [SKIM]  Added support to minimize SKIM v 0.7.0+ to the System Tray and have it
             manage global injection for the end-user.
 + [D3D9]  Fixed swapchain recovery afer device loss
 + [GL]    Improved startup time


0.8.19:

 + [D3D11] Re-wrote stateblock code to minimize reference counting problems
 + [D3D11] Fixed stateblock leak that prevented ResizeBuffers (...) from working
 + Fixed late initialization problems if compat menu is dismissed by pressing OK
 + Added version to compatibility menu
 + Improved compatibility menu and update menu's input focus behavior


0.8.18:
 
 + Added version info to wrapper DLL installations; updating is not supported
 + Installing a wrapper DLL through the compat menu now copies the config from the
     global profile.
 + Uninstalling a wrapper DLL copies the local config back to the global profile
 + Fixed G-Sync indicator in D3D11


0.8.17:

 + Added Last-Known-RenderAPI to Special K's INI file to help with the auto-detect
     mechanism on the compatibility menu
 + Corrected scenario where having a local API wrapper version of Special K in-place
     and one of the API virtual files (i.e. SpecialK.d3d9) would cause both DLLs to
       load.
 + Temporarily re-enabled auto-update.


0.8.16:
 + Renamed Window/Fullscreen override options now that they work in multiple APIs
     (refer to Display.Output)
 + Added version info for all plug-ins to the help menu
 + Store user preferences for G-Sync and Input API persistently.
 + Extended screen mode option to include D3D11
 + Changed the D3D9 screen mode option to a combobox for mode and checkbox for
     permanent override.


0.8.15:

 + Injection Compatibility Options Menu DRASTICALLY Overhauled
 -------------------------------------------------------------
  * Can now be used for both local DLL wrappers and global injector
  * Can be activated with late global injection as a means of installing a
      local DLL.
   >> Activate global injection, hold Ctrl + Shift, activate your game, click
        Install and then deactivate global injection.
  * Added config file reset option
  * Added plug-in disable feature (ReShade)
  * Added D3D8/DDraw plug-in validation
  * Improved API auto-detection and validation of executable's DLL Import Table.

 + Added sleepless render / window thread options to framerate limiter to fix
     games like LEGO City Undercover, that trash their window's message pump.
 + Added Fullscreen override option to control panel for D3D9 games


0.8.14:

 + Add D3D11 Safe Fullscreen option for games that disable fullscreen mode
    (i.e. LEGO City Undercover, Final Fantasy X/X-2, anything on Windows Store)
    ==> Set SafeFullscreenMode in dxgi.ini / SpecialK.ini, then press Alt+Enter
 + Added option to install wrapper DLL through global injector's compat. menu
 + Fixed framerate statistics above ~333 FPS
 + Disabled DirectDraw and D3D8 in 64-bit builds
 + Disabled Vulkan and D3D12 in 32-bit builds
 + Added support for games that change render API without a full restart;
     OSD will not work, but the game will continue running ;)
 + Fixed WMI Performance Monitoring thread initialization
 + Added DirectDraw support (using dgVoodoo)
 + Fixed OpenGL vertex memory management in Sinless
 + Fixed achievement popups with partial progress (no longer treated as unlock)
 + Screenshot on achievement unlock fixed when popups are disabled
 + Added Texture LOD Selection to D3D11 Texture View
 + Added Texture Set Filtering to D3D11 Texture View
 + Added XInput vibration parameter validation
 + Fixed alt-tab in Fullscreen mode in EverQuest and Hunie Pop
 + Fixed double-input processing in God Eater 2: Rageburst
 + Fixed SteamAPI init. problems in Final Fantasy IX
 + Fixed typo (spe----) in EULA
 + Improved Gamepad Input in Audio Session Selector
 + Changed OSD to draw below ImGui control panel in D3D9
 + Fixed Achievement Popups in Senkran Kagura: Shinovi Versus
 + Fixed Overlay Rendering in Pillars of Eternity / Tyranny / Torment


0.8.13:

 + Removed Chinese Unicode code points from ImGui font; added Latin punctuation
 + Fixed NieR: Automata Texture Staging
 + Added Thread Local Storage Stack
 + Added play time tracking to non-Steam games
 + Fixed hour roll-over problems in play time stats
    >> Special K is Y2K38 ready! :) <<
 + d3dcompiler_*.dll is pinned at load-time to prevent TLS issues in software
     that loads and unloads this DLL when it compiles HLSL shaders.
 + Fixed 3DMigoto compatibility
     (ImGui changed to use hooked D3D11 functions instead of trampoline)
 + Added support for resolutions as low as 1280x720 and 1024x768
 + Added option to force-inject steam_api into games published before SteamWorks.
     (steam_api{64}.dll must be placed in Documents\My Mods\SpecialK\)
 + Added configuration for CEGUI initialization (safe vs. fast [default])
 + Enabled D3D11 Texture Cache by DEFAULT (for new mod tools to work)
 + Added Memory View (D3D11)
 + Added Texture View (D3D11)
 + Added RenderTarget View (D3D11)
 + Added Shader Disassembly View (D3D11)
 + Added option to disable DebugBreak (...) in kernel32.dll
 + Added fix for incorrectly packed compressed DDS textures
 + Remove Malware detection, I have no intention to maintain that feature


0.8.12.3:

 + Added game playtime to control panel title
 + Added Synaptics touchpad mousewheel support for DirectInput/RawInput/HID
 + Added temporary file cleanup (i.e. SKI*.tmp, Version\*.old, ...) to DLL init.
 + Improved global injection startup/shutdown reliability
 + Fixed control panel window moving if its title changes
 + Fixed Fallout 4 / Scaleform exception handling
 + Fixed game_output.log being saved to the wrong location when using the
     global injector.
 + Fixed legacy keyboard input in Steam overlay in Skyrim: Special Edition
 + Fixed legacy mouse input after Alt+Tab in EverQuest
 + Switched framerate limiter over to new render backend system; WaitForVBLANK
     may not function correctly in some D3D9Ex games.

0.8.12.2:

 + Added a D3D9 ForceWindowed override to SpecialK.ini
 + Fixed SteamAPI exception handling in 32-bit ABI (Steam overlay callback)
 + Fixed double-input processing through PeekMessage
 + Fixed CEGUI / ImGui reset on multi-frame D3D9 device loss recovery

0.8.12.1:

 + Added 1.5 second delay unload for blacklisted applications to prevent performance
     problems when the CBT hook inevitably tries to re-inject the DLL.

0.8.12:

 + Removed legacy command console code (low-level keyboard hook, message pump)
 + Removed FreeLibrary hook, memory leaks in other software were being caught
     while debugging... it was obnoxious ;)
 + Fixed SteamAPI_Init being called instead of SteamAPI_Init_Detour
 + Fixed DirectDraw issues in Disgaea2 (presumably for video playback)
 + Fixed LoadLibraryW unhook during shutdown (had been unhooking LoadLibraryA)
 + Disabled relative mouse move in NieR: Automata - it always sends legacy input
 + Fixed problems dispatching keyboard input early from PeekMessage caused
     in Mass Effect: Andromeda
 + Added pirate tooltips to EULA ;)
 + Added resolution warning to EULA screen
 + Fixed license text truncation on EULA screen
 + Added code to compensate for games that pull WM_KEYDOWN messages out of the
     pump by using PeekMessage* with PM_REMOVE set.
 + Enabled relative mouse motion from RawInput in any game that tries to capture
     mouse input non-cooperatively.
 + Added support for wrapping d3d8.dll, no native renderer exists or ever will,
     the project relies on optional third-party API wrappers for legacy APIs.
 + Optional dgVoodoo support added, place the (all 32-bit) DLLs in
     Documents\My Mods\Special K\PlugIns\ThirdParty\dgVoodoo\
 + Fixed-up floating-point exception handling in Prey

--------- (Initial GitLab Migration) ---------