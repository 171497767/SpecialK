; Listing generated by Microsoft (R) Optimizing Compiler Version 19.10.25019.0 

	TITLE	C:\Users\andon\Source\Repos\SpecialK\src\adl.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?hADL_DLL@@3PAUHINSTANCE__@@A			; hADL_DLL
PUBLIC	?ADL_Main_Control_Create@@3P6AHP6GPAXH@ZH@ZA	; ADL_Main_Control_Create
PUBLIC	?ADL_Main_Control_Destroy@@3P6AHXZA		; ADL_Main_Control_Destroy
PUBLIC	?adl_adapters@@3PAUAdapterInfo@@A		; adl_adapters
PUBLIC	?adl_active@@3PAUAdapterInfo@@A			; adl_active
PUBLIC	?ADL_init@@3HA					; ADL_init
PUBLIC	?ADL_Adapter_NumberOfAdapters_Get@@3P6AHPAH@ZA	; ADL_Adapter_NumberOfAdapters_Get
PUBLIC	?ADL_Adapter_Active_Get@@3P6AHHPAH@ZA		; ADL_Adapter_Active_Get
PUBLIC	?ADL_Adapter_AdapterInfo_Get@@3P6AHPAUAdapterInfo@@H@ZA ; ADL_Adapter_AdapterInfo_Get
PUBLIC	?ADL_Overdrive5_Temperature_Get@@3P6AHHHPAUADLTemperature@@@ZA ; ADL_Overdrive5_Temperature_Get
PUBLIC	?ADL_Overdrive5_FanSpeed_Get@@3P6AHHHPAUADLFanSpeedValue@@@ZA ; ADL_Overdrive5_FanSpeed_Get
PUBLIC	?ADL_Overdrive5_CurrentActivity_Get@@3P6AHHPAUADLPMActivity@@@ZA ; ADL_Overdrive5_CurrentActivity_Get
_BSS	SEGMENT
?hADL_DLL@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; hADL_DLL
?ADL_Main_Control_Create@@3P6AHP6GPAXH@ZH@ZA DD 01H DUP (?) ; ADL_Main_Control_Create
?ADL_Main_Control_Destroy@@3P6AHXZA DD 01H DUP (?)	; ADL_Main_Control_Destroy
?adl_adapters@@3PAUAdapterInfo@@A DB 05ff28H DUP (?)	; adl_adapters
?adl_active@@3PAUAdapterInfo@@A DB 05ff28H DUP (?)	; adl_active
?ADL_init@@3HA DD 01H DUP (?)				; ADL_init
?ADL_Adapter_NumberOfAdapters_Get@@3P6AHPAH@ZA DD 01H DUP (?) ; ADL_Adapter_NumberOfAdapters_Get
?ADL_Adapter_Active_Get@@3P6AHHPAH@ZA DD 01H DUP (?)	; ADL_Adapter_Active_Get
?ADL_Adapter_AdapterInfo_Get@@3P6AHPAUAdapterInfo@@H@ZA DD 01H DUP (?) ; ADL_Adapter_AdapterInfo_Get
?ADL_Overdrive5_Temperature_Get@@3P6AHHHPAUADLTemperature@@@ZA DD 01H DUP (?) ; ADL_Overdrive5_Temperature_Get
?ADL_Overdrive5_FanSpeed_Get@@3P6AHHHPAUADLFanSpeedValue@@@ZA DD 01H DUP (?) ; ADL_Overdrive5_FanSpeed_Get
?ADL_Overdrive5_CurrentActivity_Get@@3P6AHHPAUADLPMActivity@@@ZA DD 01H DUP (?) ; ADL_Overdrive5_CurrentActivity_Get
_BSS	ENDS
CONST	SEGMENT
$SG115869 DB	'a', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'd', 00H, 'l', 00H
	DB	'x', 00H, 'x', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG115871 DB	'a', 00H, 't', 00H, 'i', 00H, 'a', 00H, 'd', 00H, 'l', 00H
	DB	'x', 00H, 'y', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG115874 DB	'ADL_Main_Control_Create', 00H
$SG115875 DB	'ADL_Main_Control_Destroy', 00H
	ORG $+3
$SG115876 DB	'ADL_Adapter_NumberOfAdapters_Get', 00H
	ORG $+3
$SG115877 DB	'ADL_Adapter_AdapterInfo_Get', 00H
$SG115878 DB	'ADL_Adapter_Active_Get', 00H
	ORG $+1
$SG115879 DB	'ADL_Overdrive5_Temperature_Get', 00H
	ORG $+1
$SG115880 DB	'ADL_Overdrive5_FanSpeed_Get', 00H
$SG115881 DB	'ADL_Overdrive5_CurrentActivity_Get', 00H
CONST	ENDS
PUBLIC	?SK_InitADL@@YAHXZ				; SK_InitADL
PUBLIC	?SK_ADL_CountPhysicalGPUs@@YAHXZ		; SK_ADL_CountPhysicalGPUs
PUBLIC	?SK_ADL_CountActiveGPUs@@YAHXZ			; SK_ADL_CountActiveGPUs
PUBLIC	?SK_ADL_GetActiveAdapter@@YAPAUAdapterInfo@@H@Z	; SK_ADL_GetActiveAdapter
PUBLIC	?ADL_Main_Memory_Alloc@@YGPAXH@Z		; ADL_Main_Memory_Alloc
PUBLIC	?ADL_Main_Memory_Free@@YGXPAPAX@Z		; ADL_Main_Memory_Free
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	?LoadLibraryW_Original@@3P6GPAUHINSTANCE__@@PB_W@ZA:DWORD ; LoadLibraryW_Original
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\adl.cpp
_TEXT	SEGMENT
_lpBuffer$ = 8						; size = 4
?ADL_Main_Memory_Free@@YGXPAPAX@Z PROC			; ADL_Main_Memory_Free

; 30   : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 31   :   if ( NULL != *lpBuffer )

	mov	esi, DWORD PTR _lpBuffer$[ebp]
	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@ADL_Main_M

; 32   :   {
; 33   :     free ( *lpBuffer );

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 34   :     *lpBuffer = NULL;

	mov	DWORD PTR [esi], 0
$LN2@ADL_Main_M:
	pop	esi

; 35   :   }
; 36   : }

	pop	ebp
	ret	4
?ADL_Main_Memory_Free@@YGXPAPAX@Z ENDP			; ADL_Main_Memory_Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\adl.cpp
_TEXT	SEGMENT
_iSize$ = 8						; size = 4
?ADL_Main_Memory_Alloc@@YGPAXH@Z PROC			; ADL_Main_Memory_Alloc

; 23   : {

	npad	2
	push	ebp
	mov	ebp, esp

; 24   :   void* lpBuffer = malloc ( iSize );

	push	DWORD PTR _iSize$[ebp]
	call	DWORD PTR __imp__malloc
	add	esp, 4

; 25   :   return lpBuffer;
; 26   : }

	pop	ebp
	ret	4
?ADL_Main_Memory_Alloc@@YGPAXH@Z ENDP			; ADL_Main_Memory_Alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\adl.cpp
_TEXT	SEGMENT
_idx$ = 8						; size = 4
?SK_ADL_GetActiveAdapter@@YAPAUAdapterInfo@@H@Z PROC	; SK_ADL_GetActiveAdapter

; 167  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 168  :   if (idx < ADL_MAX_ADAPTERS)

	mov	eax, DWORD PTR _idx$[ebp]
	cmp	eax, 250				; 000000faH
	jge	SHORT $LN2@SK_ADL_Get

; 169  :     return &adl_active [idx];

	imul	eax, eax, 1572
	add	eax, OFFSET ?adl_active@@3PAUAdapterInfo@@A ; adl_active

; 172  : }

	pop	ebp
	ret	0
$LN2@SK_ADL_Get:

; 170  : 
; 171  :   return nullptr;

	xor	eax, eax

; 172  : }

	pop	ebp
	ret	0
?SK_ADL_GetActiveAdapter@@YAPAUAdapterInfo@@H@Z ENDP	; SK_ADL_GetActiveAdapter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\adl.cpp
_TEXT	SEGMENT
_adapter_count$1$ = -16					; size = 4
tv201 = -12						; size = 4
_adapter_status$1 = -8					; size = 4
_active_count$1$ = -4					; size = 4
?SK_ADL_CountActiveGPUs@@YAHXZ PROC			; SK_ADL_CountActiveGPUs

; 139  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	push	edi

; 140  :   int active_count  = 0;

	xor	edi, edi
	mov	DWORD PTR _active_count$1$[ebp], edi

; 141  :   int adapter_count = SK_ADL_CountPhysicalGPUs ();

	call	?SK_ADL_CountPhysicalGPUs@@YAHXZ	; SK_ADL_CountPhysicalGPUs
	mov	esi, eax

; 142  : 
; 143  :   //dll_log.Log (L"[DisplayLib] Adapter Count: %d", adapter_count);
; 144  : 
; 145  :   ADL_Adapter_AdapterInfo_Get (

	imul	eax, esi, 1572
	mov	DWORD PTR _adapter_count$1$[ebp], esi
	push	eax
	push	OFFSET ?adl_adapters@@3PAUAdapterInfo@@A ; adl_adapters
	call	DWORD PTR ?ADL_Adapter_AdapterInfo_Get@@3P6AHPAUAdapterInfo@@H@ZA ; ADL_Adapter_AdapterInfo_Get
	add	esp, 8

; 146  :     adl_adapters,
; 147  :       adapter_count * sizeof (AdapterInfo)
; 148  :   );
; 149  : 
; 150  :   for (int i = 0; i < adapter_count; i++) {

	test	esi, esi
	jle	SHORT $LN11@SK_ADL_Cou

; 140  :   int active_count  = 0;

	push	ebx
	mov	ebx, OFFSET ?adl_adapters@@3PAUAdapterInfo@@A ; adl_adapters
	mov	DWORD PTR tv201[ebp], OFFSET ?adl_active@@3PAUAdapterInfo@@A ; adl_active
	npad	1
$LL4@SK_ADL_Cou:

; 151  :     int adapter_status = ADL_FALSE;
; 152  : 
; 153  :     ADL_Adapter_Active_Get (adl_adapters [i].iAdapterIndex, &adapter_status);

	lea	eax, DWORD PTR _adapter_status$1[ebp]
	mov	DWORD PTR _adapter_status$1[ebp], 0
	push	eax
	push	DWORD PTR [ebx+4]
	call	DWORD PTR ?ADL_Adapter_Active_Get@@3P6AHHPAH@ZA ; ADL_Adapter_Active_Get

; 154  : 
; 155  :     if (adapter_status == ADL_TRUE) {
; 156  :       memcpy ( &adl_active     [active_count++],

	mov	eax, DWORD PTR _active_count$1$[ebp]
	add	esp, 8
	cmp	DWORD PTR _adapter_status$1[ebp], 1
	jne	SHORT $LN2@SK_ADL_Cou
	mov	ecx, DWORD PTR tv201[ebp]
	inc	eax
	mov	edi, ecx
	mov	DWORD PTR _active_count$1$[ebp], eax
	add	ecx, 1572				; 00000624H
	mov	esi, ebx
	mov	DWORD PTR tv201[ebp], ecx
	mov	ecx, 393				; 00000189H
	rep movsd
	mov	esi, DWORD PTR _adapter_count$1$[ebp]
$LN2@SK_ADL_Cou:

; 146  :     adl_adapters,
; 147  :       adapter_count * sizeof (AdapterInfo)
; 148  :   );
; 149  : 
; 150  :   for (int i = 0; i < adapter_count; i++) {

	add	ebx, 1572				; 00000624H
	sub	esi, 1
	mov	DWORD PTR _adapter_count$1$[ebp], esi
	jne	SHORT $LL4@SK_ADL_Cou
	pop	ebx
	pop	edi
	pop	esi

; 163  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@SK_ADL_Cou:

; 157  :                  &adl_adapters [i],
; 158  :                    sizeof AdapterInfo );
; 159  :     }
; 160  :   }
; 161  : 
; 162  :   return active_count;

	mov	eax, edi
	pop	edi
	pop	esi

; 163  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_ADL_CountActiveGPUs@@YAHXZ ENDP			; SK_ADL_CountActiveGPUs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\adl.cpp
_TEXT	SEGMENT
_num_gpus$ = -4						; size = 4
?SK_ADL_CountPhysicalGPUs@@YAHXZ PROC			; SK_ADL_CountPhysicalGPUs

; 126  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx

; 127  :   int num_gpus = 0;
; 128  : 
; 129  :   if (ADL_Adapter_NumberOfAdapters_Get (&num_gpus) == ADL_OK) {

	lea	eax, DWORD PTR _num_gpus$[ebp]
	mov	DWORD PTR _num_gpus$[ebp], 0
	push	eax
	call	DWORD PTR ?ADL_Adapter_NumberOfAdapters_Get@@3P6AHPAH@ZA ; ADL_Adapter_NumberOfAdapters_Get
	xor	ecx, ecx
	add	esp, 4
	test	eax, eax
	cmove	ecx, DWORD PTR _num_gpus$[ebp]
	mov	eax, ecx

; 130  :     return num_gpus;
; 131  :   }
; 132  : 
; 133  :   return 0;
; 134  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_ADL_CountPhysicalGPUs@@YAHXZ ENDP			; SK_ADL_CountPhysicalGPUs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\adl.cpp
_TEXT	SEGMENT
?SK_InitADL@@YAHXZ PROC					; SK_InitADL

; 44   :   if (ADL_init != ADL_FALSE) {

	mov	eax, DWORD PTR ?ADL_init@@3HA		; ADL_init
	test	eax, eax
	jne	$LN1@SK_InitADL
	npad	3
$LL4@SK_InitADL:

; 45   :     return ADL_init;
; 46   :   }
; 47   : 
; 48   :   for (int i = 0; i < ADL_MAX_ADAPTERS; i++)
; 49   :   {
; 50   :     adl_adapters [i].iSize = sizeof (AdapterInfo);

	mov	DWORD PTR ?adl_adapters@@3PAUAdapterInfo@@A[eax], 1572 ; 00000624H

; 51   :     adl_active   [i].iSize = sizeof (AdapterInfo);

	mov	DWORD PTR ?adl_active@@3PAUAdapterInfo@@A[eax], 1572 ; 00000624H
	add	eax, 1572				; 00000624H
	cmp	eax, 393000				; 0005ff28H
	jl	SHORT $LL4@SK_InitADL

; 52   :   }
; 53   : 
; 54   :   hADL_DLL = LoadLibraryW_Original (L"atiadlxx.dll");

	push	OFFSET $SG115869
	call	DWORD PTR ?LoadLibraryW_Original@@3P6GPAUHINSTANCE__@@PB_W@ZA ; LoadLibraryW_Original
	mov	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A, eax ; hADL_DLL

; 55   :   if (hADL_DLL == nullptr) {

	test	eax, eax
	jne	SHORT $LN7@SK_InitADL

; 56   :     // A 32 bit calling application on 64 bit OS will fail to LoadLibrary.
; 57   :     // Try to load the 32 bit library (atiadlxy.dll) instead
; 58   :     hADL_DLL = LoadLibraryW_Original (L"atiadlxy.dll");

	push	OFFSET $SG115871
	call	DWORD PTR ?LoadLibraryW_Original@@3P6GPAUHINSTANCE__@@PB_W@ZA ; LoadLibraryW_Original
	mov	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A, eax ; hADL_DLL

; 59   :   }
; 60   : 
; 61   :   if (hADL_DLL == nullptr) {

	test	eax, eax
	je	$LN10@SK_InitADL
$LN7@SK_InitADL:
	push	esi

; 62   :     ADL_init = ADL_FALSE - 1;
; 63   :     return FALSE;
; 64   :   }
; 65   :   else {
; 66   :     ADL_Main_Control_Create            =

	mov	esi, DWORD PTR __imp__GetProcAddress@8
	push	OFFSET $SG115874
	push	eax
	call	esi

; 67   :       (ADL_MAIN_CONTROL_CREATE)GetProcAddress (
; 68   :         hADL_DLL, "ADL_Main_Control_Create"
; 69   :       );
; 70   :     ADL_Main_Control_Destroy           =

	push	OFFSET $SG115875
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Main_Control_Create@@3P6AHP6GPAXH@ZH@ZA, eax ; ADL_Main_Control_Create
	call	esi

; 71   :       (ADL_MAIN_CONTROL_DESTROY)GetProcAddress (
; 72   :          hADL_DLL, "ADL_Main_Control_Destroy"
; 73   :        );
; 74   : 
; 75   :     ADL_Adapter_NumberOfAdapters_Get   =

	push	OFFSET $SG115876
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Main_Control_Destroy@@3P6AHXZA, eax ; ADL_Main_Control_Destroy
	call	esi

; 76   :      (ADL_ADAPTER_NUMBEROFADAPTERS_GET)GetProcAddress (
; 77   :        hADL_DLL, "ADL_Adapter_NumberOfAdapters_Get"
; 78   :      );
; 79   : 
; 80   :     ADL_Adapter_AdapterInfo_Get        =

	push	OFFSET $SG115877
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Adapter_NumberOfAdapters_Get@@3P6AHPAH@ZA, eax ; ADL_Adapter_NumberOfAdapters_Get
	call	esi

; 81   :      (ADL_ADAPTER_ADAPTERINFO_GET)GetProcAddress (
; 82   :        hADL_DLL, "ADL_Adapter_AdapterInfo_Get"
; 83   :      );
; 84   : 
; 85   :     ADL_Adapter_Active_Get        =

	push	OFFSET $SG115878
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Adapter_AdapterInfo_Get@@3P6AHPAUAdapterInfo@@H@ZA, eax ; ADL_Adapter_AdapterInfo_Get
	call	esi

; 86   :      (ADL_ADAPTER_ACTIVE_GET)GetProcAddress (
; 87   :        hADL_DLL, "ADL_Adapter_Active_Get"
; 88   :      );
; 89   : 
; 90   :     ADL_Overdrive5_Temperature_Get     =

	push	OFFSET $SG115879
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Adapter_Active_Get@@3P6AHHPAH@ZA, eax ; ADL_Adapter_Active_Get
	call	esi

; 91   :       (ADL_OVERDRIVE5_TEMPERATURE_GET)GetProcAddress (
; 92   :         hADL_DLL, "ADL_Overdrive5_Temperature_Get"
; 93   :       );
; 94   : 
; 95   :     ADL_Overdrive5_FanSpeed_Get        =

	push	OFFSET $SG115880
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Overdrive5_Temperature_Get@@3P6AHHHPAUADLTemperature@@@ZA, eax ; ADL_Overdrive5_Temperature_Get
	call	esi

; 96   :       (ADL_OVERDRIVE5_FANSPEED_GET)GetProcAddress (
; 97   :         hADL_DLL, "ADL_Overdrive5_FanSpeed_Get"
; 98   :       );
; 99   : 
; 100  :     ADL_Overdrive5_CurrentActivity_Get =

	push	OFFSET $SG115881
	push	DWORD PTR ?hADL_DLL@@3PAUHINSTANCE__@@A	; hADL_DLL
	mov	DWORD PTR ?ADL_Overdrive5_FanSpeed_Get@@3P6AHHHPAUADLFanSpeedValue@@@ZA, eax ; ADL_Overdrive5_FanSpeed_Get
	call	esi

; 101  :       (ADL_OVERDRIVE5_CURRENTACTIVITY_GET)GetProcAddress (
; 102  :         hADL_DLL, "ADL_Overdrive5_CurrentActivity_Get"
; 103  :       );
; 104  : 
; 105  :     if (ADL_Main_Control_Create            != nullptr &&
; 106  :         ADL_Main_Control_Destroy           != nullptr &&
; 107  :         ADL_Adapter_NumberOfAdapters_Get   != nullptr &&
; 108  :         ADL_Adapter_Active_Get             != nullptr &&
; 109  :         ADL_Adapter_AdapterInfo_Get        != nullptr &&
; 110  :         ADL_Overdrive5_Temperature_Get     != nullptr &&
; 111  :         ADL_Overdrive5_FanSpeed_Get        != nullptr &&

	mov	ecx, DWORD PTR ?ADL_Main_Control_Create@@3P6AHP6GPAXH@ZH@ZA ; ADL_Main_Control_Create
	mov	DWORD PTR ?ADL_Overdrive5_CurrentActivity_Get@@3P6AHHPAUADLPMActivity@@@ZA, eax ; ADL_Overdrive5_CurrentActivity_Get
	pop	esi
	test	ecx, ecx
	je	SHORT $LN10@SK_InitADL
	cmp	DWORD PTR ?ADL_Main_Control_Destroy@@3P6AHXZA, 0 ; ADL_Main_Control_Destroy
	je	SHORT $LN10@SK_InitADL
	cmp	DWORD PTR ?ADL_Adapter_NumberOfAdapters_Get@@3P6AHPAH@ZA, 0 ; ADL_Adapter_NumberOfAdapters_Get
	je	SHORT $LN10@SK_InitADL
	cmp	DWORD PTR ?ADL_Adapter_Active_Get@@3P6AHHPAH@ZA, 0 ; ADL_Adapter_Active_Get
	je	SHORT $LN10@SK_InitADL
	cmp	DWORD PTR ?ADL_Adapter_AdapterInfo_Get@@3P6AHPAUAdapterInfo@@H@ZA, 0 ; ADL_Adapter_AdapterInfo_Get
	je	SHORT $LN10@SK_InitADL
	cmp	DWORD PTR ?ADL_Overdrive5_Temperature_Get@@3P6AHHHPAUADLTemperature@@@ZA, 0 ; ADL_Overdrive5_Temperature_Get
	je	SHORT $LN10@SK_InitADL
	cmp	DWORD PTR ?ADL_Overdrive5_FanSpeed_Get@@3P6AHHHPAUADLFanSpeedValue@@@ZA, 0 ; ADL_Overdrive5_FanSpeed_Get
	je	SHORT $LN10@SK_InitADL
	test	eax, eax
	je	SHORT $LN10@SK_InitADL

; 112  :         ADL_Overdrive5_CurrentActivity_Get != nullptr) {
; 113  :       if (ADL_OK == ADL_Main_Control_Create (ADL_Main_Memory_Alloc, 0)) {

	push	0
	push	OFFSET ?ADL_Main_Memory_Alloc@@YGPAXH@Z	; ADL_Main_Memory_Alloc
	call	ecx
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN10@SK_InitADL

; 114  :         ADL_init = ADL_TRUE;

	mov	DWORD PTR ?ADL_init@@3HA, 1		; ADL_init

; 115  :         return TRUE;

	mov	eax, 1

; 122  : }

	ret	0
$LN10@SK_InitADL:

; 116  :       }
; 117  :     }
; 118  :   }
; 119  : 
; 120  :   ADL_init = ADL_FALSE - 1;
; 121  :   return FALSE;

	xor	eax, eax
	mov	DWORD PTR ?ADL_init@@3HA, -1		; ADL_init
$LN1@SK_InitADL:

; 122  : }

	ret	0
?SK_InitADL@@YAHXZ ENDP					; SK_InitADL
_TEXT	ENDS
END
