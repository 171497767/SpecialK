; Listing generated by Microsoft (R) Optimizing Compiler Version 19.10.25019.0 

	TITLE	C:\Users\andon\Source\Repos\SpecialK\src\update\archive.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?config_files_changed@@3_NA			; config_files_changed
EXTRN	_SzAlloc:PROC
EXTRN	_SzFree:PROC
_BSS	SEGMENT
?config_files_changed@@3_NA DB 01H DUP (?)		; config_files_changed
?crc_init@@3_NA DB 01H DUP (?)				; crc_init
_BSS	ENDS
CONST	SEGMENT
$SG147312 DB	'd', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, '_', 00H, 00H, 00H
	ORG $+6
$SG147317 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, ' ', 00H, '*', 00H, '*', 00H, ' ', 00H, 'C', 00H, 'a', 00H
	DB	'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H
	DB	'h', 00H, 'i', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
$SG147326 DB	'\', 00H, 00H, 00H
$SG147319 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, 'E', 00H, 'x', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ' ', 00H, '(', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, ')', 00H, 00H, 00H
$SG147321 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'c', 00H, 't', 00H, ' ', 00H, '7', 00H
	DB	'-', 00H, 'z', 00H, 'i', 00H, 'p', 00H, ' ', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ' ', 00H, '(', 00H, '''', 00H, '%', 00H
	DB	's', 00H, '''', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG147329 DB	'.', 00H, 'o', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG147333 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	':', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H, 00H
	DB	00H
	ORG $+2
$SG147338 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, ' ', 00H, '*', 00H, '*', 00H, ' ', 00H, 'C', 00H, 'a', 00H
	DB	'n', 00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'p'
	DB	00H, 'e', 00H, 'n', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'c', 00H
	DB	'h', 00H, 'i', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
$SG147344 DB	'd', 00H, 'e', 00H, 'f', 00H, 'a', 00H, 'u', 00H, 'l', 00H
	DB	't', 00H, '_', 00H, 00H, 00H
	ORG $+2
$SG147340 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, 'E', 00H, 'x', 00H, 't', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, ' ', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '(', 00H, '''', 00H, '%'
	DB	00H, 's', 00H, '''', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG147342 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 'r', 00H, 'a', 00H, 'c', 00H, 't', 00H, ' ', 00H, '7', 00H
	DB	'-', 00H, 'z', 00H, 'i', 00H, 'p', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g', 00H, ' ', 00H, 'f', 00H
	DB	'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '(', 00H, '''', 00H, '%'
	DB	00H, 's', 00H, '''', 00H, ')', 00H, 00H, 00H
$SG147346 DB	'_', 00H, 00H, 00H
$SG147348 DB	'.', 00H, 'o', 00H, 'l', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG147349 DB	'.', 00H, 'n', 00H, 'e', 00H, 'w', 00H, 00H, 00H
	ORG $+6
$SG147356 DB	'[', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'U', 00H
	DB	'p', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'e', 00H, ']', 00H, ' '
	DB	00H, 'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '''', 00H, '%', 00H, 's'
	DB	00H, '''', 00H, 00H, 00H
CONST	ENDS
_DATA	SEGMENT
?g_Alloc@@3UISzAlloc@@A DD FLAT:_SzAlloc		; g_Alloc
	DD	FLAT:_SzFree
_DATA	ENDS
PUBLIC	?wcsstr@@YAPA_WPA_WPB_W@Z			; wcsstr
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?length@?$char_traits@_W@std@@SAIQB_W@Z		; std::char_traits<wchar_t>::length
PUBLIC	?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::char_traits<wchar_t>::copy
PUBLIC	?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::char_traits<wchar_t>::move
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z	; std::_Container_base0::_Swap_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	?_Allocate@std@@YAPAXII_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPAXII@Z			; std::_Deallocate
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	??4?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEAAU01@$$QAU01@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::operator=
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
PUBLIC	??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Move_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Move_alloc
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
PUBLIC	?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
PUBLIC	?_Assign_rv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
PUBLIC	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
PUBLIC	??1sk_file_entry_s@@QAE@XZ			; sk_file_entry_s::~sk_file_entry_s
PUBLIC	??0sk_file_entry_s@@QAE@$$QAU0@@Z		; sk_file_entry_s::sk_file_entry_s
PUBLIC	??4sk_file_entry_s@@QAEAAU0@$$QAU0@@Z		; sk_file_entry_s::operator=
PUBLIC	??_Gsk_file_entry_s@@QAEPAXI@Z			; sk_file_entry_s::`scalar deleting destructor'
PUBLIC	?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z ; SK_Get7ZFileContents
PUBLIC	?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z		; SK_Decompress7z
PUBLIC	??0?$allocator@Usk_file_entry_s@@@std@@QAE@XZ	; std::allocator<sk_file_entry_s>::allocator<sk_file_entry_s>
PUBLIC	??0?$allocator@Usk_file_entry_s@@@std@@QAE@ABV01@@Z ; std::allocator<sk_file_entry_s>::allocator<sk_file_entry_s>
PUBLIC	?deallocate@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@I@Z ; std::allocator<sk_file_entry_s>::deallocate
PUBLIC	?allocate@?$allocator@Usk_file_entry_s@@@std@@QAEPAUsk_file_entry_s@@I@Z ; std::allocator<sk_file_entry_s>::allocate
PUBLIC	?max_size@?$allocator@Usk_file_entry_s@@@std@@QBEIXZ ; std::allocator<sk_file_entry_s>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAIABV?$allocator@Usk_file_entry_s@@@2@@Z ; std::allocator_traits<std::allocator<sk_file_entry_s> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::_Wrap_alloc<std::allocator<sk_file_entry_s> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAU01@@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::_Wrap_alloc<std::allocator<sk_file_entry_s> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEPAUsk_file_entry_s@@I@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@I@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Swap_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<sk_file_entry_s> >::_Vector_val<std::_Simple_types<sk_file_entry_s> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_second
PUBLIC	??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
PUBLIC	?_Move_from@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Move_from
PUBLIC	??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAV01@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
PUBLIC	??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::~vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
PUBLIC	?push_back@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::push_back
PUBLIC	?erase@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::erase
PUBLIC	?begin@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::begin
PUBLIC	?end@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::end
PUBLIC	?size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::size
PUBLIC	?max_size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::max_size
PUBLIC	?capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABE_NXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Has_unused_capacity
PUBLIC	??A?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEAAUsk_file_entry_s@@I@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::operator[]
PUBLIC	?_Umove_if_noexcept1@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00U?$integral_constant@_N$00@2@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@0@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEII@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXQAUsk_file_entry_s@@II@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Change_array
PUBLIC	?_Tidy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Tidy
PUBLIC	?_Xlength@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@CAXXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Xlength
PUBLIC	?_Orphan_range@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEXPAUsk_file_entry_s@@0@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Orphan_range
PUBLIC	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >
PUBLIC	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEABUsk_file_entry_s@@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator*
PUBLIC	??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator++
PUBLIC	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator==
PUBLIC	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator!=
PUBLIC	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEXABV12@@Z ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Compat
PUBLIC	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >
PUBLIC	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEAAUsk_file_entry_s@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator*
PUBLIC	??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEPAUsk_file_entry_s@@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator->
PUBLIC	??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator++
PUBLIC	?pointer_to@?$pointer_traits@PAUsk_file_entry_s@@@std@@SAPAUsk_file_entry_s@@AAU3@@Z ; std::pointer_traits<sk_file_entry_s *>::pointer_to
PUBLIC	??$addressof@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@0@AAV10@@Z ; std::addressof<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >
PUBLIC	??$_Move_unchecked@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00@Z ; std::_Move_unchecked<sk_file_entry_s *,sk_file_entry_s *>
PUBLIC	??$_Unfancy@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z ; std::_Unfancy<sk_file_entry_s>
PUBLIC	??$destroy@Usk_file_entry_s@@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>
PUBLIC	??$move@AAUsk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z ; std::move<sk_file_entry_s &>
PUBLIC	??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::emplace_back<sk_file_entry_s>
PUBLIC	??$move@AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<sk_file_entry_s> > &>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > ><std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,void>
PUBLIC	??$move@AAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@0@AAV10@@Z ; std::move<std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> > &>
PUBLIC	??$addressof@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@AAU1@@Z ; std::addressof<sk_file_entry_s>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1><>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z		; std::addressof<wchar_t *>
PUBLIC	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
PUBLIC	??$_Destroy_range@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
PUBLIC	??$_Unfancy@_W@std@@YAPA_WPA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
PUBLIC	??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::_Pocma<std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$_Ptr_move_cat@Usk_file_entry_s@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUsk_file_entry_s@@0@Z ; std::_Ptr_move_cat<sk_file_entry_s,sk_file_entry_s>
PUBLIC	??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>
PUBLIC	??$destroy@Usk_file_entry_s@@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@@Z ; std::allocator_traits<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>
PUBLIC	??$forward@Usk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z ; std::forward<sk_file_entry_s>
PUBLIC	??$_Emplace_back_with_unused_capacity@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAUsk_file_entry_s@@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Emplace_back_with_unused_capacity<sk_file_entry_s>
PUBLIC	??$construct@Usk_file_entry_s@@U1@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<sk_file_entry_s> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1><std::_Wrap_alloc<std::allocator<sk_file_entry_s> > >
PUBLIC	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
PUBLIC	??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U?$integral_constant@_N$00@0@@Z ; std::_Pocma<std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z		; std::forward<wchar_t * &>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>
PUBLIC	??$_Uninitialized_move@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z ; std::_Uninitialized_move<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
PUBLIC	??$destroy@Usk_file_entry_s@@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@@Z ; std::allocator<sk_file_entry_s>::destroy<sk_file_entry_s>
PUBLIC	??$construct@Usk_file_entry_s@@U1@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@$$QAU3@@Z ; std::allocator_traits<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>
PUBLIC	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$_Unchecked@PAUsk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z ; std::_Unchecked<sk_file_entry_s *>
PUBLIC	??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
PUBLIC	??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
PUBLIC	??$_Rechecked@PAUsk_file_entry_s@@PAU1@@std@@YAAAPAUsk_file_entry_s@@AAPAU1@PAU1@@Z ; std::_Rechecked<sk_file_entry_s *,sk_file_entry_s *>
PUBLIC	??$construct@Usk_file_entry_s@@U1@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z ; std::allocator<sk_file_entry_s>::construct<sk_file_entry_s,sk_file_entry_s>
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__wcsstr:PROC
EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__DeleteFileW@4:PROC
EXTRN	__imp__GetFileAttributesW@4:PROC
EXTRN	__imp__WriteFile@20:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__lstrcatW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__CopyFileW@12:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	?Log@iSK_Logger@@UAAXQB_WZZ:PROC		; iSK_Logger::Log
EXTRN	?SK_CreateDirectories@@YG_NPB_W@Z:PROC		; SK_CreateDirectories
EXTRN	?SK_MoveFileNoFail@@YAXPB_W0@Z:PROC		; SK_MoveFileNoFail
EXTRN	?SK_SYS_GetInstallPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:PROC ; SK_SYS_GetInstallPath
EXTRN	?SK_GetFileCRC32C@@YGIPB_WP6GX_K1@Z@Z:PROC	; SK_GetFileCRC32C
EXTRN	?SK_IsHostAppSKIM@@YA_NXZ:PROC			; SK_IsHostAppSKIM
EXTRN	__imp__PathAppendW@8:PROC
EXTRN	_LookToRead_CreateVTable:PROC
EXTRN	_LookToRead_Init:PROC
EXTRN	_SzArEx_Init:PROC
EXTRN	_SzArEx_Free:PROC
EXTRN	_SzArEx_GetFileNameUtf16:PROC
EXTRN	_SzArEx_Extract:PROC
EXTRN	_SzArEx_Open:PROC
EXTRN	_SzAllocTemp:PROC
EXTRN	_SzFreeTemp:PROC
EXTRN	@CrcGenerateTable@0:PROC
EXTRN	_InFile_OpenW:PROC
EXTRN	_File_Close:PROC
EXTRN	_FileInStream_CreateVTable:PROC
EXTRN	?SK_SYS_GetVersionPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:PROC ; SK_SYS_GetVersionPath
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?dll_log@@3UiSK_Logger@@A:BYTE			; dll_log
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z$50 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z$0
__unwindtable$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z$50
__ehfuncinfo$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z$1
__unwindtable$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z$3
__ehfuncinfo$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$18 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$0
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$18
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@Usk_file_entry_s@@U1@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@Usk_file_entry_s@@U1@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z PROC ; std::allocator<sk_file_entry_s>::construct<sk_file_entry_s,sk_file_entry_s>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edx, edx
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [edx+32], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [edx+36], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	movq	xmm0, QWORD PTR [ecx+32]
	movq	QWORD PTR [edx+32], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+32], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx+16], ax
$LN3@construct:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 841  : 		}

	pop	ebp
	ret	8
??$construct@Usk_file_entry_s@@U1@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z ENDP ; std::allocator<sk_file_entry_s>::construct<sk_file_entry_s,sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Rechecked@PAUsk_file_entry_s@@PAU1@@std@@YAAAPAUsk_file_entry_s@@AAPAU1@PAU1@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAUsk_file_entry_s@@PAU1@@std@@YAAAPAUsk_file_entry_s@@AAPAU1@PAU1@@Z PROC ; std::_Rechecked<sk_file_entry_s *,sk_file_entry_s *>, COMDAT

; 480  : 	{	// reset checked from unchecked, generic

	npad	2
	push	ebp
	mov	ebp, esp

; 481  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 482  : 	return (_Dest);
; 483  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAUsk_file_entry_s@@PAU1@@std@@YAAAPAUsk_file_entry_s@@AAPAU1@PAU1@@Z ENDP ; std::_Rechecked<sk_file_entry_s *,sk_file_entry_s *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z PROC ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >, COMDAT
; _this$ = ecx

; 556  : 		constexpr _Any_tag(_Ty&&) _NOEXCEPT {}

	mov	eax, ecx
	ret	4
??$?0U?$integral_constant@_N$00@std@@@_Any_tag@std@@QAE@$$QAU?$integral_constant@_N$00@1@@Z ENDP ; std::_Any_tag::_Any_tag<std::integral_constant<bool,1> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >, COMDAT

; 135  : 	{	// move [_First, _Last) to raw _Dest, using _Al, no special optimization

	npad	2
	push	ebp
	mov	ebp, esp

; 139  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	mov	ecx, DWORD PTR __First$[ebp]
	push	ebx
	mov	ebx, DWORD PTR __Last$[ebp]
	cmp	ecx, ebx
	je	SHORT $LN100@Uninitiali
	push	esi
	push	edi
	mov	edi, DWORD PTR __Dest$[ebp]
	add	ecx, 36					; 00000024H
	lea	esi, DWORD PTR [edi+36]
	npad	5
$LL4@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edi, edi
	je	SHORT $LN2@Uninitiali
	mov	eax, DWORD PTR [ecx-36]
	mov	DWORD PTR [edi], eax
	mov	eax, DWORD PTR [ecx-28]
	mov	DWORD PTR [esi-28], eax
	mov	eax, DWORD PTR [ecx-24]
	mov	DWORD PTR [esi-24], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [esi-4], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [esi], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [ecx-20]
	movups	XMMWORD PTR [esi-20], xmm0
	movq	xmm0, QWORD PTR [ecx-4]
	movq	QWORD PTR [esi-4], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx-4], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx-20], ax
$LN2@Uninitiali:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 139  : 	for (; _First != _Last; ++_Dest, (void)++_First)

	add	ecx, 40					; 00000028H
	add	edi, 40					; 00000028H
	add	esi, 40					; 00000028H
	lea	edx, DWORD PTR [ecx-36]
	cmp	edx, ebx
	jne	SHORT $LL4@Uninitiali

; 140  : 		{
; 141  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 142  : 		}
; 143  : 
; 144  : 	_CATCH_ALL
; 145  : 	_Destroy_range(_Next, _Dest, _Al);
; 146  : 	_RERAISE;
; 147  : 	_CATCH_END
; 148  : 
; 149  : 	return (_Dest);

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 150  : 	}

	pop	ebp
	ret	0
$LN100@Uninitiali:

; 140  : 		{
; 141  : 		_Al.construct(_Unfancy(_Dest), _STD move(*_First));
; 142  : 		}
; 143  : 
; 144  : 	_CATCH_ALL
; 145  : 	_Destroy_range(_Next, _Dest, _Al);
; 146  : 	_RERAISE;
; 147  : 	_CATCH_END
; 148  : 
; 149  : 	return (_Dest);

	mov	eax, DWORD PTR __Dest$[ebp]
	pop	ebx

; 150  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Unchecked@PAUsk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAUsk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z PROC ; std::_Unchecked<sk_file_entry_s *>, COMDAT

; 450  : 	{	// construct unchecked from checked, generic

	npad	2
	push	ebp
	mov	ebp, esp

; 451  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 452  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAUsk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z ENDP ; std::_Unchecked<sk_file_entry_s *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 841  : 		}

	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@Usk_file_entry_s@@U1@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@$$QAU3@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@Usk_file_entry_s@@U1@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@$$QAU3@@Z PROC ; std::allocator_traits<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edx, edx
	je	SHORT $LN8@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [edx+32], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [edx+36], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	movq	xmm0, QWORD PTR [ecx+32]
	movq	QWORD PTR [edx+32], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+32], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx+16], ax
$LN8@construct:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 960  : 		}

	pop	ebp
	ret	0
??$construct@Usk_file_entry_s@@U1@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@$$QAU3@@Z ENDP ; std::allocator_traits<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@Usk_file_entry_s@@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@Usk_file_entry_s@@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@@Z PROC ; std::allocator<sk_file_entry_s>::destroy<sk_file_entry_s>, COMDAT
; _this$ = ecx

; 845  : 		{	// destroy object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+36]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN14@destroy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+16]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN14@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi+16], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 847  : 		}

	pop	ebp
	ret	4
??$destroy@Usk_file_entry_s@@@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@@Z ENDP ; std::allocator<sk_file_entry_s>::destroy<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z PROC ; std::_Uninitialized_move<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >, COMDAT

; 166  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 172  : 	return (_Rechecked(_Dest,

	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
	add	esp, 24					; 00000018H

; 173  : 		_Uninitialized_move_al_unchecked(_UFirst, _ULast, _UDest, _Al,
; 174  : 			_Ptr_move_cat(_UFirst, _UDest),
; 175  : 			_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_UDest)), decltype(_STD move(*_UFirst))>())));
; 176  : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Uninitialized_move@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1705 : 		}

	mov	eax, ecx

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 1705 : 		}

	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 959  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 960  : 		}

	pop	ebp
	ret	0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
___formal$ = 16						; size = 1
??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U?$integral_constant@_N$00@0@@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1152 : 	_Left = _STD move(_Right);
; 1153 : 	}

	ret	0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U?$integral_constant@_N$00@0@@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z PROC ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>, COMDAT

; 1199 : 	{	// destroy [_First, _Last), no special optimization

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 1200 : 	for (; _First != _Last; ++_First)

	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	esi, edi
	je	SHORT $LN78@Destroy_ra
	add	esi, 36					; 00000024H
$LL4@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN55@Destroy_ra

; 3609 : 			{
; 3610 : 			pointer _Ptr = _My_data._Bx._Ptr;
; 3611 : 			auto& _Al = this->_Getal();
; 3612 : 			_Al.destroy(_STD addressof(_My_data._Bx._Ptr));
; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	lea	ecx, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	eax, DWORD PTR [esi-20]

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	ecx, 2147483647				; 7fffffffH
	ja	SHORT $LN74@Destroy_ra

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	ecx, ecx

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN50@Destroy_ra

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	al, 31					; 0000001fH
	jne	SHORT $LN74@Destroy_ra

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR [eax-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	ecx, eax
	jae	SHORT $LN74@Destroy_ra

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	eax, ecx
	cmp	eax, 4
	jb	SHORT $LN74@Destroy_ra

; 126  : 			<= _Ptr_user - _Ptr_container);
; 127  :  #endif /* _DEBUG */
; 128  : 
; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	eax, 35					; 00000023H
	ja	SHORT $LN74@Destroy_ra

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	eax, ecx
$LN50@Destroy_ra:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN55@Destroy_ra:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi-4], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi-20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1200 : 	for (; _First != _Last; ++_First)

	add	esi, 40					; 00000028H
	lea	eax, DWORD PTR [esi-36]
	cmp	eax, edi
	jne	SHORT $LL4@Destroy_ra
$LN78@Destroy_ra:
	pop	edi
	pop	esi

; 1201 : 		_Al.destroy(_Unfancy(_First));
; 1202 : 	}

	pop	ebp
	ret	0
$LN74@Destroy_ra:

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN81@Destroy_ra:
$LN80@Destroy_ra:
	int	3
??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ENDP ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1><std::_Wrap_alloc<std::allocator<sk_file_entry_s> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1><std::_Wrap_alloc<std::allocator<sk_file_entry_s> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<sk_file_entry_s> > >, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<sk_file_entry_s> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@Usk_file_entry_s@@U1@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@Usk_file_entry_s@@U1@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edx, edx
	je	SHORT $LN13@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [edx+32], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [edx+36], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [ecx+16]
	movups	XMMWORD PTR [edx+16], xmm0
	movq	xmm0, QWORD PTR [ecx+32]
	movq	QWORD PTR [edx+32], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+32], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx+16], ax
$LN13@construct:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1098 : 		}

	pop	ebp
	ret	8
??$construct@Usk_file_entry_s@@U1@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAUsk_file_entry_s@@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAUsk_file_entry_s@@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Emplace_back_with_unused_capacity<sk_file_entry_s>, COMDAT
; _this$ = ecx

; 898  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	esi, DWORD PTR [ecx+4]
	test	esi, esi
	je	SHORT $LN132@Emplace_ba
	mov	edx, DWORD PTR _<_Val_0>$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [esi], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [esi+32], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [esi+36], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [esi+16], xmm0
	movq	xmm0, QWORD PTR [edx+32]
	movq	QWORD PTR [esi+32], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edx+32], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edx+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edx+16], ax
$LN132@Emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 902  : 		++this->_Mylast();

	add	DWORD PTR [ecx+4], 40			; 00000028H
	pop	esi

; 903  : 		}

	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAUsk_file_entry_s@@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Emplace_back_with_unused_capacity<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@Usk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@Usk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z PROC ; std::forward<sk_file_entry_s>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@Usk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z ENDP ; std::forward<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@Usk_file_entry_s@@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@Usk_file_entry_s@@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@@Z PROC ; std::allocator_traits<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>, COMDAT

; 964  : 		{	// destroy object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+36]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN16@destroy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+16]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN16@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi+16], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 966  : 		}

	pop	ebp
	ret	0
??$destroy@Usk_file_entry_s@@@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAXAAV?$allocator@Usk_file_entry_s@@@1@PAUsk_file_entry_s@@@Z ENDP ; std::allocator_traits<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z
_TEXT	SEGMENT
tv648 = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z PROC ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>, COMDAT

; 2532 : 	{	// move [_First, _Last) to [_Dest, ...), no special optimization

	npad	2
	push	ebp
	mov	ebp, esp

; 2533 : 	for (; _First != _Last; ++_Dest, (void)++_First)

	mov	eax, DWORD PTR __First$[ebp]
	mov	edx, DWORD PTR __Last$[ebp]
	push	ebx
	mov	ebx, DWORD PTR __Dest$[ebp]
	push	esi
	push	edi
	cmp	eax, edx
	je	$LN114@Move_unche
	lea	edi, DWORD PTR [eax+16]
	sub	eax, ebx
	lea	esi, DWORD PTR [ebx+36]
	lea	ecx, DWORD PTR [eax-36]
	mov	DWORD PTR tv648[ebp], ecx
$LL4@Move_unche:
	mov	eax, DWORD PTR [ecx+esi]
	mov	DWORD PTR [ebx], eax
	mov	eax, DWORD PTR [edi-8]
	mov	DWORD PTR [esi-28], eax
	mov	eax, DWORD PTR [edi-4]
	mov	DWORD PTR [esi-24], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2076 : 		if (this != _STD addressof(_Right))

	lea	eax, DWORD PTR [esi-20]
	cmp	eax, edi
	je	SHORT $LN2@Move_unche

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN50@Move_unche
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [esi-20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	ja	SHORT $LN110@Move_unche

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN45@Move_unche

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	SHORT $LN110@Move_unche

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	SHORT $LN110@Move_unche

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	SHORT $LN110@Move_unche

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	SHORT $LN110@Move_unche

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN45@Move_unche:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	mov	ecx, DWORD PTR tv648[ebp]
	add	esp, 4
	mov	edx, DWORD PTR __Last$[ebp]
$LN50@Move_unche:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi-4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi-20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [edi]
	movups	XMMWORD PTR [esi-20], xmm0
	movq	xmm0, QWORD PTR [edi+16]
	movq	QWORD PTR [esi-4], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi+16], eax

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edi], ax
$LN2@Move_unche:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2533 : 	for (; _First != _Last; ++_Dest, (void)++_First)

	add	esi, 40					; 00000028H
	add	ebx, 40					; 00000028H
	add	edi, 40					; 00000028H
	lea	eax, DWORD PTR [ecx+esi]
	cmp	eax, edx
	jne	$LL4@Move_unche
$LN114@Move_unche:
	pop	edi
	pop	esi

; 2534 : 		*_Dest = _STD move(*_First);
; 2535 : 	return (_Dest);

	mov	eax, ebx
	pop	ebx

; 2536 : 	}

	pop	ebp
	ret	0
$LN110@Move_unche:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN118@Move_unche:
$LN117@Move_unche:
	int	3
??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z ENDP ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Ptr_move_cat@Usk_file_entry_s@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUsk_file_entry_s@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
??$_Ptr_move_cat@Usk_file_entry_s@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUsk_file_entry_s@@0@Z PROC ; std::_Ptr_move_cat<sk_file_entry_s,sk_file_entry_s>, COMDAT

; 893  : 	return {};

	xor	al, al

; 894  : 	}

	ret	0
??$_Ptr_move_cat@Usk_file_entry_s@@U1@@std@@YA?AU_General_ptr_iterator_tag@0@ABQAUsk_file_entry_s@@0@Z ENDP ; std::_Ptr_move_cat<sk_file_entry_s,sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 1096 : 		_Mytraits::construct(*this, _Ptr,
; 1097 : 			_STD forward<_Types>(_Args)...);
; 1098 : 		}

	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z PROC ; std::_Pocma<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1163 : 	typename _Alty::propagate_on_container_move_assignment _Tag;
; 1164 : 	_Pocma(_Left, _Right, _Tag);
; 1165 : 	}

	ret	0
??$_Pocma@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ENDP ; std::_Pocma<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	cmovb	eax, edx

; 24   : 	}

	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<sk_file_entry_s>,sk_file_entry_s *>, COMDAT

; 1214 : 	{	// destroy [_First, _Last), choose optimization

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx

; 1215 : 		// note that this is an optimization for debug mode codegen;
; 1216 : 		// in release mode the BE removes all of this
; 1217 : 	typedef typename _Alloc::value_type _Val;
; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Al$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
	add	esp, 16					; 00000010H

; 1219 : 		is_trivially_destructible<_Val>,
; 1220 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1221 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Destroy_range@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@AAU1@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@AAU1@@Z PROC ; std::addressof<sk_file_entry_s>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@AAU1@@Z ENDP ; std::addressof<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@0@AAV10@@Z PROC ; std::move<std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@0@AAV10@@Z ENDP ; std::move<std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > ><std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,void>, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 517  : 		}

	mov	eax, ecx

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 517  : 		}

	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@X@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@1@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > ><std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<sk_file_entry_s> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<sk_file_entry_s> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z
_TEXT	SEGMENT
__Oldsize$2 = -36					; size = 4
_this$ = -32						; size = 4
__Newsize$1$ = -28					; size = 4
__Newcapacity$3 = -24					; size = 4
__Newvec$4 = -20					; size = 4
__$EHRec$ = -16						; size = 16
$T5 = 8							; size = 1
_<_Val_0>$ = 8						; size = 4
??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::emplace_back<sk_file_entry_s>, COMDAT
; _this$ = ecx

; 908  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	mov	esi, ecx
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], esi

; 1731 : 		return (this->_Myend() != this->_Mylast());

	mov	edi, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+4]
	cmp	edi, ecx

; 909  : 		if (_Has_unused_capacity())

	je	SHORT $LN2@emplace_ba

; 910  : 			{
; 911  : 			_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[ebp]
	mov	ecx, esi
	call	??$_Emplace_back_with_unused_capacity@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAUsk_file_entry_s@@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Emplace_back_with_unused_capacity<sk_file_entry_s>

; 942  : 			}
; 943  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@emplace_ba:

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	sub	ecx, DWORD PTR [esi]
	mov	eax, 1717986919				; 66666667H
	imul	ecx
	sar	edx, 4
	mov	ebx, edx
	shr	ebx, 31					; 0000001fH
	add	ebx, edx
	mov	DWORD PTR __Oldsize$2[ebp], ebx

; 912  : 			}
; 913  : 		else
; 914  : 			{	// reallocate
; 915  : 			const size_type _Oldsize = size();
; 916  : 
; 917  : 			if (_Oldsize == max_size())

	cmp	ebx, 107374182				; 06666666H
	jne	SHORT $LN4@emplace_ba

; 918  : 				{
; 919  : 				_Xlength();

	call	?_Xlength@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@CAXXZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Xlength
$LN183@emplace_ba:
$LN4@emplace_ba:

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	sub	edi, DWORD PTR [esi]

; 920  : 				}
; 921  : 
; 922  : 			const size_type _Newsize = _Oldsize + 1;

	lea	ecx, DWORD PTR [ebx+1]

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, 1717986919				; 66666667H

; 920  : 				}
; 921  : 
; 922  : 			const size_type _Newsize = _Oldsize + 1;

	mov	DWORD PTR __Newsize$1$[ebp], ecx

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	imul	edi

; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	eax, 107374182				; 06666666H

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	sar	edx, 4
	mov	edi, edx
	shr	edi, 31					; 0000001fH
	add	edi, edx

; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	edx, edi
	shr	edx, 1
	sub	eax, edx
	cmp	edi, eax
	jbe	SHORT $LN76@emplace_ba

; 1893 : 			{
; 1894 : 			return (_Newsize);	// geometric growth would overflow

	mov	edi, ecx
	mov	DWORD PTR __Newcapacity$3[ebp], ecx
	jmp	SHORT $LN77@emplace_ba
$LN76@emplace_ba:

; 1895 : 			}
; 1896 : 
; 1897 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	add	edi, edx

; 1898 : 
; 1899 : 		if (_Geometric < _Newsize)

	cmp	edi, ecx
	cmovb	edi, ecx
	mov	DWORD PTR __Newcapacity$3[ebp], edi
$LN77@emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	edi
	mov	ecx, esi
	call	?allocate@?$allocator@Usk_file_entry_s@@@std@@QAEPAUsk_file_entry_s@@I@Z ; std::allocator<sk_file_entry_s>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 928  : 			this->_Getal().construct(_Unfancy(_Newvec + _Oldsize), _STD forward<_Valty>(_Val)...);

	push	DWORD PTR _<_Val_0>$[ebp]
	lea	ecx, DWORD PTR [ebx+ebx*4]
	mov	DWORD PTR __Newvec$4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR [eax+ecx*8]
	push	ecx
	mov	ecx, esi
	call	??$construct@Usk_file_entry_s@@U1@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@$$QAU2@@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::construct<sk_file_entry_s,sk_file_entry_s>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	mov	ebx, DWORD PTR __Newvec$4[ebp]
	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T5[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	push	DWORD PTR $T5[ebp]
	push	esi
	push	ebx
	push	DWORD PTR [esi+4]
	push	DWORD PTR [esi]
	call	??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 941  : 			_Change_array(_Newvec, _Newsize, _Newcapacity);

	mov	ecx, esi
	push	edi
	push	DWORD PTR __Newsize$1$[ebp]
	push	ebx
	call	?_Change_array@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXQAUsk_file_entry_s@@II@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Change_array

; 942  : 			}
; 943  : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
__catch$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z$0:

; 929  : 			_Emplaced = true;
; 930  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 931  : 			_CATCH_ALL
; 932  : 			if (_Emplaced)
; 933  : 				{
; 934  : 				this->_Getal().destroy(_Unfancy(_Newvec + _Oldsize));

	mov	ecx, DWORD PTR _this$[ebp]
	call	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal
	mov	ecx, DWORD PTR __Oldsize$2[ebp]
	mov	edi, eax
	mov	esi, DWORD PTR __Newvec$4[ebp]
	lea	ecx, DWORD PTR [ecx+ecx*4]
	lea	ecx, DWORD PTR [esi+ecx*8]
	push	ecx
	call	??$_Unfancy@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z ; std::_Unfancy<sk_file_entry_s>
	add	esp, 4
	mov	ecx, edi
	push	eax
	call	??$destroy@Usk_file_entry_s@@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>

; 935  : 				}
; 936  : 
; 937  : 			this->_Getal().deallocate(_Newvec, _Newcapacity);

	push	DWORD PTR __Newcapacity$3[ebp]
	mov	ecx, edi
	push	esi
	call	?deallocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@I@Z ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::deallocate

; 938  : 			_RERAISE;

	push	0
	push	0
	call	__CxxThrowException@8
$LN184@emplace_ba:
$LN182@emplace_ba:
	int	3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z:
	mov	eax, OFFSET __ehfuncinfo$??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::emplace_back<sk_file_entry_s>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAUsk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAUsk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z PROC ; std::move<sk_file_entry_s &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAUsk_file_entry_s@@@std@@YA$$QAUsk_file_entry_s@@AAU1@@Z ENDP ; std::move<sk_file_entry_s &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@Usk_file_entry_s@@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@Usk_file_entry_s@@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@@Z PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>, COMDAT
; _this$ = ecx

; 1102 : 		{	// destroy object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR __Ptr$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+36]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN18@destroy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+16]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN18@destroy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi+16], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1104 : 		}

	pop	ebp
	ret	4
??$destroy@Usk_file_entry_s@@@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@@Z ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::destroy<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z PROC ; std::_Unfancy<sk_file_entry_s>, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@Usk_file_entry_s@@@std@@YAPAUsk_file_entry_s@@PAU1@@Z ENDP ; std::_Unfancy<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Move_unchecked@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Move_unchecked@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00@Z PROC ; std::_Move_unchecked<sk_file_entry_s *,sk_file_entry_s *>, COMDAT

; 2550 : 	{	// move [_First, _Last) to [_Dest, ...), choose optimization

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx

; 893  : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2551 : 		// note: _Move_unchecked is called directly from elsewhere in the STL
; 2552 : 	return (_Move_unchecked1(_First, _Last,

	push	DWORD PTR $T1[ebp]
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>
	add	esp, 16					; 00000010H

; 2553 : 		_Dest, _Ptr_move_cat(_First, _Dest)));
; 2554 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$_Move_unchecked@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00@Z ENDP ; std::_Move_unchecked<sk_file_entry_s *,sk_file_entry_s *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@YAPAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAUsk_file_entry_s@@@std@@SAPAUsk_file_entry_s@@AAU3@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAUsk_file_entry_s@@@std@@SAPAUsk_file_entry_s@@AAU3@@Z PROC ; std::pointer_traits<sk_file_entry_s *>::pointer_to, COMDAT

; 289  : 		{	// convert raw reference to pointer

	npad	2
	push	ebp
	mov	ebp, esp

; 290  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 291  : 		}

	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAUsk_file_entry_s@@@std@@SAPAUsk_file_entry_s@@AAU3@@Z ENDP ; std::pointer_traits<sk_file_entry_s *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator++, COMDAT
; _this$ = ecx

; 107  : 		++_Ptr;

	add	DWORD PTR [ecx], 40			; 00000028H

; 332  : 		++*(_Mybase *)this;
; 333  : 		return (*this);

	mov	eax, ecx

; 334  : 		}

	ret	0
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEPAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEPAUsk_file_entry_s@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator->, COMDAT
; _this$ = ecx

; 327  : 		return (pointer_traits<pointer>::pointer_to(**this));

	mov	eax, DWORD PTR [ecx]

; 328  : 		}

	ret	0
??C?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEPAUsk_file_entry_s@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEAAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEAAUsk_file_entry_s@@XZ PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator*, COMDAT
; _this$ = ecx

; 322  : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [ecx]

; 323  : 		}

	ret	0
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEAAUsk_file_entry_s@@XZ ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z PROC ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >, COMDAT
; _this$ = ecx

; 304  : 		{	// construct with pointer _Parg

	npad	2
	push	ebp
	mov	ebp, esp

; 42   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 305  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Vector_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Compat, COMDAT
; _this$ = ecx

; 253  : 		}

	ret	4
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator!=, COMDAT
; _this$ = ecx

; 210  : 		{	// test for iterator inequality

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 211  : 		return (!(*this == _Right));
; 212  : 		}

	pop	ebp
	ret	4
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator==, COMDAT
; _this$ = ecx

; 204  : 		{	// test for iterator equality

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 205  : 		_Compat(_Right);
; 206  : 		return (_Ptr == _Right._Ptr);
; 207  : 		}

	pop	ebp
	ret	4
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator++, COMDAT
; _this$ = ecx

; 91   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 92   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 93   : 		if (_Mycont == 0
; 94   : 			|| _Ptr == nullptr_t{}
; 95   : 			|| _Mycont->_Mylast <= _Ptr)
; 96   : 			{	// report error
; 97   : 			_DEBUG_ERROR("vector iterator not incrementable");
; 98   : 			}
; 99   : 
; 100  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 101  : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 102  : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 103  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 104  : 		_SCL_SECURE_VALIDATE_RANGE(_Ptr < _Mycont->_Mylast);
; 105  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 106  : 
; 107  : 		++_Ptr;

	add	DWORD PTR [ecx], 40			; 00000028H

; 108  : 		return (*this);

	mov	eax, ecx

; 109  : 		}

	ret	0
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEABUsk_file_entry_s@@XZ
_TEXT	SEGMENT
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEABUsk_file_entry_s@@XZ PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator*, COMDAT
; _this$ = ecx

; 62   :  #if _ITERATOR_DEBUG_LEVEL == 2
; 63   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 64   : 		if (_Mycont == 0
; 65   : 			|| _Ptr == _Tptr()
; 66   : 			|| _Ptr < _Mycont->_Myfirst
; 67   : 			|| _Mycont->_Mylast <= _Ptr)
; 68   : 			{	// report error
; 69   : 			_DEBUG_ERROR("vector iterator not dereferencable");
; 70   : 			}
; 71   : 
; 72   :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 73   : 		_SCL_SECURE_VALIDATE(_Ptr != _Tptr());
; 74   : 		const auto _Mycont = static_cast<const _Myvec *>(this->_Getcont());
; 75   : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 76   : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myfirst <= _Ptr && _Ptr < _Mycont->_Mylast);
; 77   :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 78   : 
; 79   : 		_Analysis_assume_(_Ptr != _Tptr());
; 80   : 
; 81   : 		return (*_Ptr);

	mov	eax, DWORD PTR [ecx]

; 82   : 		}

	ret	0
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QBEABUsk_file_entry_s@@XZ ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pvector$ = 12						; size = 4
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z PROC ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >, COMDAT
; _this$ = ecx

; 43   : 		{	// construct with pointer _Parg

	npad	2
	push	ebp
	mov	ebp, esp

; 42   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 44   : 		this->_Adopt(_Pvector);
; 45   : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@std@@QAE@PAUsk_file_entry_s@@PBU_Container_base0@1@@Z ENDP ; std::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >::_Vector_const_iterator<std::_Vector_val<std::_Simple_types<sk_file_entry_s> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Orphan_range@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEXPAUsk_file_entry_s@@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEXPAUsk_file_entry_s@@0@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Orphan_range, COMDAT
; _this$ = ecx

; 1996 : 		}

	ret	8
?_Orphan_range@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEXPAUsk_file_entry_s@@0@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Xlength@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@CAXXZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Xlength, COMDAT

; 1962 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlength:
$LN3@Xlength:
	int	3
?_Xlength@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@CAXXZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Tidy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXXZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
?_Tidy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXXZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Tidy, COMDAT
; _this$ = ecx

; 1946 : 		{	// free all storage

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
	mov	edi, ecx

; 1947 : 		this->_Orphan_all();
; 1948 : 
; 1949 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN2@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T1[ebp]
	push	edi
	push	DWORD PTR [edi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, DWORD PTR [edi]
	imul	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [edi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1954 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1955 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [edi+4], 0

; 1956 : 			this->_Myend() = pointer();

	mov	DWORD PTR [edi+8], 0
$LN2@Tidy:
	pop	edi

; 1957 : 			}
; 1958 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?_Tidy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXXZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Change_array@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXQAUsk_file_entry_s@@II@Z
_TEXT	SEGMENT
$T1 = 8							; size = 1
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXQAUsk_file_entry_s@@II@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Change_array, COMDAT
; _this$ = ecx

; 1931 : 		{	// orphan all iterators, discard old array, acquire new array

	npad	2
	push	ebp
	mov	ebp, esp
	push	edi
	mov	edi, ecx

; 1932 : 		this->_Orphan_all();
; 1933 : 
; 1934 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN2@Change_arr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T1[ebp]
	push	edi
	push	DWORD PTR [edi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1937 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, DWORD PTR [edi]
	imul	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1937 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [edi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 28					; 0000001cH
$LN2@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1940 : 		this->_Myfirst() = _Newvec;

	mov	ecx, DWORD PTR __Newvec$[ebp]

; 1941 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [edi], ecx
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [edi+4], eax

; 1942 : 		this->_Myend() = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	lea	eax, DWORD PTR [eax+eax*4]
	lea	eax, DWORD PTR [ecx+eax*8]
	mov	DWORD PTR [edi+8], eax
	pop	edi

; 1943 : 		}

	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXQAUsk_file_entry_s@@II@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Calculate_growth@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEII@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1889 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	npad	2
	push	ebp
	mov	ebp, esp

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx]
	imul	edx

; 1890 : 		const size_type _Oldcapacity = capacity();
; 1891 : 
; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	eax, 107374182				; 06666666H

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	sar	edx, 4
	mov	ecx, edx
	shr	ecx, 31					; 0000001fH
	add	ecx, edx

; 1890 : 		const size_type _Oldcapacity = capacity();
; 1891 : 
; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	edx, ecx
	shr	edx, 1
	sub	eax, edx
	cmp	ecx, eax
	jbe	SHORT $LN2@Calculate_

; 1893 : 			{
; 1894 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]

; 1900 : 			{
; 1901 : 			return (_Newsize);	// geometric growth would be insufficient
; 1902 : 			}
; 1903 : 
; 1904 : 		return (_Geometric);	// geometric growth is sufficient
; 1905 : 		}

	pop	ebp
	ret	4
$LN2@Calculate_:

; 1895 : 			}
; 1896 : 
; 1897 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [edx+ecx]

; 1898 : 
; 1899 : 		if (_Geometric < _Newsize)

	cmp	eax, DWORD PTR __Newsize$[ebp]
	cmovb	eax, DWORD PTR __Newsize$[ebp]

; 1900 : 			{
; 1901 : 			return (_Newsize);	// geometric growth would be insufficient
; 1902 : 			}
; 1903 : 
; 1904 : 		return (_Geometric);	// geometric growth is sufficient
; 1905 : 		}

	pop	ebp
	ret	4
?_Calculate_growth@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABEII@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Destroy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
$T1 = 12						; size = 1
__Last$ = 12						; size = 4
?_Destroy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@0@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Destroy, COMDAT
; _this$ = ecx

; 1884 : 		{	// destroy [_First, _Last) using allocator

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1886 : 		}

	pop	ebp
	ret	8
?_Destroy@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@0@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1878 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1881 : 		}

	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1868 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T1[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 172  : 	return (_Rechecked(_Dest,

	push	DWORD PTR $T1[ebp]
	push	ecx
	push	DWORD PTR __Dest$[ebp]
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Uninitialized_move_al_unchecked@PAUsk_file_entry_s@@PAU1@V?$allocator@Usk_file_entry_s@@@std@@@std@@YAPAUsk_file_entry_s@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U_General_ptr_iterator_tag@0@U_Any_tag@0@@Z ; std::_Uninitialized_move_al_unchecked<sk_file_entry_s *,sk_file_entry_s *,std::allocator<sk_file_entry_s> >
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1870 : 		}

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEXPAUsk_file_entry_s@@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??A?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEAAUsk_file_entry_s@@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEAAUsk_file_entry_s@@I@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::operator[], COMDAT
; _this$ = ecx

; 1736 : 		{	// subscript mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 1737 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1738 : 		if (size() <= _Pos)
; 1739 : 			{	// report error
; 1740 : 			_DEBUG_ERROR("vector subscript out of range");
; 1741 : 			}
; 1742 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1743 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1744 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1745 : 
; 1746 : 		return (this->_Myfirst()[_Pos]);

	mov	eax, DWORD PTR __Pos$[ebp]
	lea	edx, DWORD PTR [eax+eax*4]
	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*8]

; 1747 : 		}

	pop	ebp
	ret	4
??A?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEAAUsk_file_entry_s@@I@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABE_NXZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1730 : 		{	// micro-optimization for capacity() != size()

	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [ecx+4]
	setne	al

; 1731 : 		return (this->_Myend() != this->_Mylast());
; 1732 : 		}

	ret	0
?_Has_unused_capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@ABE_NXZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::capacity, COMDAT
; _this$ = ecx

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+8]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx]
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1721 : 		}

	ret	0
?capacity@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?max_size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::max_size, COMDAT
; _this$ = ecx

; 1715 : 		return (this->_Getal().max_size());

	mov	eax, 107374182				; 06666666H

; 1716 : 		}

	ret	0
?max_size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::size, COMDAT
; _this$ = ecx

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+4]
	mov	eax, 1717986919				; 66666667H
	sub	edx, DWORD PTR [ecx]
	imul	edx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx

; 1711 : 		}

	ret	0
?size@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIXZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?end@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::end, COMDAT
; _this$ = ecx

; 1654 : 		{	// return iterator for end of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 42   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax], ecx

; 1655 : 		return (iterator(this->_Mylast(), _STD addressof(this->_Get_data())));
; 1656 : 		}

	pop	ebp
	ret	4
?end@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?begin@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::begin, COMDAT
; _this$ = ecx

; 1644 : 		{	// return iterator for beginning of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 42   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], ecx

; 1645 : 		return (iterator(this->_Myfirst(), _STD addressof(this->_Get_data())));
; 1646 : 		}

	pop	ebp
	ret	4
?begin@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@XZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?erase@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@@Z
_TEXT	SEGMENT
$T1 = -4						; size = 1
___$ReturnUdt$ = 8					; size = 4
__Where$ = 12						; size = 4
?erase@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::erase, COMDAT
; _this$ = ecx

; 1571 : 		{	// erase element at _Where

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	mov	eax, DWORD PTR __Where$[ebp]
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1571 : 		{	// erase element at _Where

	mov	edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T1[ebp], 0

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	push	DWORD PTR $T1[ebp]
	push	eax
	push	DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1583 : 		_Move_unchecked(_Where._Ptr + 1, this->_Mylast(), _Where._Ptr);

	add	eax, 40					; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	push	eax
	call	??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1584 : 		this->_Getal().destroy(_Unfancy(this->_Mylast() - 1));

	mov	esi, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi-4]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN50@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi-24]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN50@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi-8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi-4], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi-24], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 42   : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1585 : 		--this->_Mylast();

	add	DWORD PTR [edi+4], -40			; ffffffd8H

; 42   : 		: _Ptr(_Parg)

	mov	ecx, DWORD PTR __Where$[ebp]
	pop	edi
	mov	DWORD PTR [eax], ecx
	pop	esi

; 1586 : 		return (iterator(_Where._Ptr, _STD addressof(this->_Get_data())));
; 1587 : 		}

	mov	esp, ebp
	pop	ebp
	ret	8
?erase@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@@2@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?push_back@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::push_back, COMDAT
; _this$ = ecx

; 951  : 		{	// insert by moving into element at end, provide strong guarantee

	npad	2
	push	ebp
	mov	ebp, esp

; 953  : 		}

	pop	ebp

; 952  : 		emplace_back(_STD move(_Val));

	jmp	??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::emplace_back<sk_file_entry_s>
?push_back@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
$T1 = -4						; size = 1
??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::~vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >, COMDAT
; _this$ = ecx

; 891  : 		{	// destroy the object

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	edi
	mov	edi, ecx

; 1949 : 		if (this->_Myfirst() != pointer())

	mov	eax, DWORD PTR [edi]
	test	eax, eax
	je	SHORT $LN4@vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T1[ebp]
	push	edi
	push	DWORD PTR [edi+4]
	push	eax
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	ecx, DWORD PTR [edi+8]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, DWORD PTR [edi]
	imul	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [edi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1954 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1955 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [edi+4], 0

; 1956 : 			this->_Myend() = pointer();

	mov	DWORD PTR [edi+8], 0
$LN4@vector:
	pop	edi

; 892  : 		_Tidy();
; 893  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::~vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >, COMDAT
; _this$ = ecx

; 860  : 		{	// construct by moving _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 836  : 		this->_Myfirst() = _Right._Myfirst();

	mov	edx, DWORD PTR __Right$[ebp]

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 836  : 		this->_Myfirst() = _Right._Myfirst();

	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 837  : 		this->_Mylast() = _Right._Mylast();

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 838  : 		this->_Myend() = _Right._Myend();

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 861  : 		_Move_from(_STD move(_Right), true_type{});
; 862  : 		}

	mov	eax, ecx

; 840  : 		_Right._Myfirst() = pointer();

	mov	DWORD PTR [edx], 0

; 841  : 		_Right._Mylast() = pointer();

	mov	DWORD PTR [edx+4], 0

; 842  : 		_Right._Myend() = pointer();

	mov	DWORD PTR [edx+8], 0

; 861  : 		_Move_from(_STD move(_Right), true_type{});
; 862  : 		}

	pop	ebp
	ret	4
??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Move_from@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Move_from@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Move_from, COMDAT
; _this$ = ecx

; 833  : 		{	// move from _Right, stealing its contents

	npad	2
	push	ebp
	mov	ebp, esp

; 834  : 		this->_Swap_all(_Right);
; 835  : 
; 836  : 		this->_Myfirst() = _Right._Myfirst();

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 837  : 		this->_Mylast() = _Right._Mylast();

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+4], eax

; 838  : 		this->_Myend() = _Right._Myend();

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax

; 839  : 
; 840  : 		_Right._Myfirst() = pointer();

	mov	DWORD PTR [edx], 0

; 841  : 		_Right._Mylast() = pointer();

	mov	DWORD PTR [edx+4], 0

; 842  : 		_Right._Myend() = pointer();

	mov	DWORD PTR [edx+8], 0

; 843  : 		}

	pop	ebp
	ret	8
?_Move_from@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@AAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::_Move_from
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ PROC ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 723  : 		}

	mov	eax, ecx

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 723  : 		}

	ret	0
??0?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ENDP ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 343  : 		return (_Myval2);

	mov	eax, ecx

; 344  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 338  : 		return (_Myval2);

	mov	eax, ecx

; 339  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 323  : 		return (*this);

	mov	eax, ecx

; 324  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 318  : 		return (*this);

	mov	eax, ecx

; 319  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<sk_file_entry_s> >,std::_Vector_val<std::_Simple_types<sk_file_entry_s> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<sk_file_entry_s> >::_Vector_val<std::_Simple_types<sk_file_entry_s> >, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 480  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<sk_file_entry_s> >::_Vector_val<std::_Simple_types<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myend, COMDAT
; _this$ = ecx

; 676  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 677  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myend, COMDAT
; _this$ = ecx

; 671  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 672  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Mylast, COMDAT
; _this$ = ecx

; 666  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 667  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Mylast, COMDAT
; _this$ = ecx

; 661  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 662  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myfirst, COMDAT
; _this$ = ecx

; 656  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 657  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABQAUsk_file_entry_s@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myfirst, COMDAT
; _this$ = ecx

; 651  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 652  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAPAUsk_file_entry_s@@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Get_data, COMDAT
; _this$ = ecx

; 646  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 647  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Get_data, COMDAT
; _this$ = ecx

; 641  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 642  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal, COMDAT
; _this$ = ecx

; 636  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 637  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal, COMDAT
; _this$ = ecx

; 631  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 632  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Swap_all, COMDAT
; _this$ = ecx

; 626  : 		_Get_data()._Swap_all(_Right._Get_data());
; 627  : 		}

	ret	4
?_Swap_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 621  : 		_Get_data()._Orphan_all();
; 622  : 		}

	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 509  : 		}

	mov	eax, ecx

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 509  : 		}

	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >::_Vector_alloc<std::_Vec_base_types<sk_file_entry_s,std::allocator<sk_file_entry_s> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::max_size, COMDAT
; _this$ = ecx

; 1108 : 		return (_Mytraits::max_size(*this));

	mov	eax, 107374182				; 06666666H

; 1109 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@I@Z PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEXPAUsk_file_entry_s@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEPAUsk_file_entry_s@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEPAUsk_file_entry_s@@I@Z PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@Usk_file_entry_s@@@std@@QAEPAUsk_file_entry_s@@I@Z ; std::allocator<sk_file_entry_s>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEPAUsk_file_entry_s@@I@Z ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::_Wrap_alloc<std::allocator<sk_file_entry_s> >, COMDAT
; _this$ = ecx

; 1048 : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::_Wrap_alloc<std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::_Wrap_alloc<std::allocator<sk_file_entry_s> >, COMDAT
; _this$ = ecx

; 1038 : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<sk_file_entry_s> >::_Wrap_alloc<std::allocator<sk_file_entry_s> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAIABV?$allocator@Usk_file_entry_s@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAIABV?$allocator@Usk_file_entry_s@@@2@@Z PROC ; std::allocator_traits<std::allocator<sk_file_entry_s> >::max_size, COMDAT

; 970  : 		return (_Al.max_size());

	mov	eax, 107374182				; 06666666H

; 971  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@Usk_file_entry_s@@@std@@@std@@SAIABV?$allocator@Usk_file_entry_s@@@2@@Z ENDP ; std::allocator_traits<std::allocator<sk_file_entry_s> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator@Usk_file_entry_s@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@Usk_file_entry_s@@@std@@QBEIXZ PROC ; std::allocator<sk_file_entry_s>::max_size, COMDAT
; _this$ = ecx

; 851  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 107374182				; 06666666H

; 852  : 		}

	ret	0
?max_size@?$allocator@Usk_file_entry_s@@@std@@QBEIXZ ENDP ; std::allocator<sk_file_entry_s>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@Usk_file_entry_s@@@std@@QAEPAUsk_file_entry_s@@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@Usk_file_entry_s@@@std@@QAEPAUsk_file_entry_s@@I@Z PROC ; std::allocator<sk_file_entry_s>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 107374182				; 06666666H
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 3

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@Usk_file_entry_s@@@std@@QAEPAUsk_file_entry_s@@I@Z ENDP ; std::allocator<sk_file_entry_s>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@I@Z PROC ; std::allocator<sk_file_entry_s>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	40					; 00000028H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@Usk_file_entry_s@@@std@@QAEXPAUsk_file_entry_s@@I@Z ENDP ; std::allocator<sk_file_entry_s>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@Usk_file_entry_s@@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@Usk_file_entry_s@@@std@@QAE@ABV01@@Z PROC ; std::allocator<sk_file_entry_s>::allocator<sk_file_entry_s>, COMDAT
; _this$ = ecx

; 807  : 		{	// construct by copying (do nothing)
; 808  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@Usk_file_entry_s@@@std@@QAE@ABV01@@Z ENDP ; std::allocator<sk_file_entry_s>::allocator<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@Usk_file_entry_s@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@Usk_file_entry_s@@@std@@QAE@XZ PROC	; std::allocator<sk_file_entry_s>::allocator<sk_file_entry_s>, COMDAT
; _this$ = ecx

; 803  : 		{	// construct default allocator (do nothing)
; 804  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@Usk_file_entry_s@@@std@@QAE@XZ ENDP	; std::allocator<sk_file_entry_s>::allocator<sk_file_entry_s>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
_TEXT	SEGMENT
_look_stream$ = -18760					; size = 16412
_wszOldConfig$2 = -2348					; size = 524
_wszDefaultConfig$3 = -1824				; size = 524
_wszUserConfig$4 = -1300				; size = 524
_wszDestPath$5 = -1296					; size = 520
_wszNewConfig$6 = -776					; size = 524
_wszMovePath$7 = -772					; size = 520
_arc$ = -252						; size = 128
$T8 = -124						; size = 24
$T9 = -124						; size = 24
$T10 = -124						; size = 24
$T11 = -124						; size = 24
_thread_tmp_alloc$ = -100				; size = 8
_arc_stream$ = -92					; size = 12
$T12 = -80						; size = 1
$T13 = -80						; size = 1
_dwWritten$14 = -80					; size = 4
_dwWritten$15 = -80					; size = 4
_decomp_size$16 = -76					; size = 4
_offset$17 = -76					; size = 4
_offset$18 = -72					; size = 4
_decomp_size$19 = -72					; size = 4
_block_idx$ = -68					; size = 4
_i$1$ = -64						; size = 4
tv3706 = -60						; size = 4
_config_files$ = -56					; size = 12
_files$ = -44						; size = 12
_out$20 = -32						; size = 4
_out$21 = -32						; size = 4
tv3929 = -28						; size = 4
_out_len$22 = -28					; size = 4
_thread_alloc$ = -24					; size = 8
tv3930 = -16						; size = 4
$T23 = -16						; size = 1
$T24 = -16						; size = 1
_out_len$25 = -16					; size = 4
__$EHRec$ = -12						; size = 12
_wszArchive$ = 8					; size = 4
_wszOldVersion$ = 12					; size = 4
_backup$ = 16						; size = 1
_callback$ = 20						; size = 4
?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z PROC		; SK_Decompress7z

; 123  : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z
	push	eax
	mov	eax, 18748				; 0000493cH
	mov	DWORD PTR fs:0, esp
	call	__chkstk

; 124  :   if (! crc_init)

	cmp	BYTE PTR ?crc_init@@3_NA, 0
	jne	SHORT $LN15@SK_Decompr

; 125  :   {
; 126  :     CrcGenerateTable ();

	call	@CrcGenerateTable@0

; 127  :     crc_init = true;

	mov	BYTE PTR ?crc_init@@3_NA, 1
$LN15@SK_Decompr:

; 128  :   }
; 129  : 
; 130  : 
; 131  :   // Don't back stuff up if we're installing :P
; 132  :   if (SK_IsHostAppSKIM ())

	push	ebx
	push	esi
	push	edi
	call	?SK_IsHostAppSKIM@@YA_NXZ		; SK_IsHostAppSKIM
	movzx	ecx, BYTE PTR _backup$[ebp]
	xor	edx, edx

; 133  :     backup = false;
; 134  : 
; 135  :   std::vector <sk_file_entry_s> files =
; 136  :     SK_Get7ZFileContents (wszArchive);

	mov	ebx, DWORD PTR _wszArchive$[ebp]
	test	al, al
	lea	eax, DWORD PTR _files$[ebp]
	cmovne	ecx, edx
	push	ebx
	push	eax
	mov	DWORD PTR tv3706[ebp], ecx
	call	?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z ; SK_Get7ZFileContents

; 139  :     SK_Get7ZFileContents (wszArchive);

	lea	eax, DWORD PTR _config_files$[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	ebx
	push	eax
	call	?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z ; SK_Get7ZFileContents
	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 206  : 		return (_Ptr == _Right._Ptr);

	mov	edx, DWORD PTR _config_files$[ebp]
	mov	ebx, DWORD PTR _config_files$[ebp+4]
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 139  :     SK_Get7ZFileContents (wszArchive);

	mov	BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 206  : 		return (_Ptr == _Right._Ptr);

	cmp	edx, ebx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 141  :   for ( auto&& it = config_files.begin (); it != config_files.end (); )

	je	$LN1420@SK_Decompr

; 133  :     backup = false;
; 134  : 
; 135  :   std::vector <sk_file_entry_s> files =
; 136  :     SK_Get7ZFileContents (wszArchive);

	lea	esi, DWORD PTR [edx+16]
	lea	edi, DWORD PTR [ebx-4]
$LL2@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN145@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN146@SK_Decompr
$LN145@SK_Decompr:
	mov	eax, esi
$LN146@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 143  :     if (! wcsstr (it->name.c_str (), L"default_"))

	push	OFFSET $SG147312
	push	eax
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	test	eax, eax
	jne	$LN17@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T24[ebp], al

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	lea	eax, DWORD PTR [esi-16]
	push	DWORD PTR $T24[ebp]
	push	eax
	lea	eax, DWORD PTR [esi+24]
	push	ebx
	push	eax
	call	??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN230@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [edi-20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	ja	$LN1373@SK_Decompr

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN225@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	$LN1373@SK_Decompr

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	$LN1373@SK_Decompr

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	$LN1373@SK_Decompr

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	$LN1373@SK_Decompr

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN225@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN230@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi-4], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1585 : 		--this->_Mylast();

	sub	ebx, 40					; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edi-20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1585 : 		--this->_Mylast();

	sub	edi, 40					; 00000028H
	mov	DWORD PTR _config_files$[ebp+4], ebx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 146  :       continue;

	jmp	SHORT $LN1397@SK_Decompr
$LN17@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 107  : 		++_Ptr;

	add	esi, 40					; 00000028H
$LN1397@SK_Decompr:

; 206  : 		return (_Ptr == _Right._Ptr);

	lea	eax, DWORD PTR [esi-16]
	cmp	eax, ebx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 141  :   for ( auto&& it = config_files.begin (); it != config_files.end (); )

	jne	$LL2@SK_Decompr
	mov	edx, DWORD PTR _config_files$[ebp]
$LN1420@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 42   : 		: _Ptr(_Parg)

	mov	edi, DWORD PTR _files$[ebp]
	mov	esi, edi

; 206  : 		return (_Ptr == _Right._Ptr);

	mov	ecx, DWORD PTR _files$[ebp+4]
	cmp	edi, ecx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 156  :   while (it != files.end ())

	je	SHORT $LN1421@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 42   : 		: _Ptr(_Parg)

	lea	edi, DWORD PTR [ecx-4]
$LL5@SK_Decompr:
	mov	eax, edx

; 206  : 		return (_Ptr == _Right._Ptr);

	cmp	edx, ebx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 162  :     while (it2 != config_files.end  ())

	je	SHORT $LN1419@SK_Decompr

; 163  :     {
; 164  :       if (it2->fileno == it->fileno)

	mov	ecx, DWORD PTR [esi]
	npad	6
$LL7@SK_Decompr:
	cmp	DWORD PTR [eax], ecx
	je	$LN1374@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 107  : 		++_Ptr;

	add	eax, 40					; 00000028H

; 206  : 		return (_Ptr == _Right._Ptr);

	cmp	eax, ebx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 162  :     while (it2 != config_files.end  ())

	jne	SHORT $LL7@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	mov	ecx, DWORD PTR _files$[ebp+4]
$LN1419@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 107  : 		++_Ptr;

	add	esi, 40					; 00000028H
$LN19@SK_Decompr:

; 206  : 		return (_Ptr == _Right._Ptr);

	cmp	esi, ecx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 156  :   while (it != files.end ())

	jne	SHORT $LL5@SK_Decompr
	mov	edi, DWORD PTR _files$[ebp]
$LN1421@SK_Decompr:

; 176  :       ++it;
; 177  :   }
; 178  : 
; 179  : 
; 180  :   CFileInStream arc_stream       = { };
; 181  :   CLookToRead   look_stream      = { };

	push	16412					; 0000401cH
	lea	eax, DWORD PTR _look_stream$[ebp]
	mov	DWORD PTR _arc_stream$[ebp+8], 0
	xorps	xmm0, xmm0
	push	0
	push	eax
	movq	QWORD PTR _arc_stream$[ebp], xmm0
	call	_memset
	xorps	xmm0, xmm0

; 182  :   ISzAlloc      thread_alloc     = { };
; 183  :   ISzAlloc      thread_tmp_alloc = { };
; 184  : 
; 185  :   FileInStream_CreateVTable (&arc_stream);

	lea	eax, DWORD PTR _arc_stream$[ebp]
	push	eax
	movq	QWORD PTR _thread_alloc$[ebp], xmm0
	movq	QWORD PTR _thread_tmp_alloc$[ebp], xmm0
	call	_FileInStream_CreateVTable

; 186  :   LookToRead_CreateVTable   (&look_stream, False);

	lea	eax, DWORD PTR _look_stream$[ebp]
	push	0
	push	eax
	call	_LookToRead_CreateVTable

; 187  : 
; 188  :   look_stream.realStream = &arc_stream.s;

	lea	eax, DWORD PTR _arc_stream$[ebp]
	mov	DWORD PTR _look_stream$[ebp+16], eax

; 189  :   LookToRead_Init         (&look_stream);

	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	call	_LookToRead_Init

; 190  : 
; 191  :   thread_alloc.Alloc     = SzAlloc;
; 192  :   thread_alloc.Free      = SzFree;
; 193  : 
; 194  :   thread_tmp_alloc.Alloc = SzAllocTemp;
; 195  :   thread_tmp_alloc.Free  = SzFreeTemp;
; 196  : 
; 197  :   CSzArEx       arc = { };

	push	128					; 00000080H
	lea	eax, DWORD PTR _arc$[ebp]
	mov	DWORD PTR _thread_alloc$[ebp], OFFSET _SzAlloc
	push	0
	push	eax
	mov	DWORD PTR _thread_alloc$[ebp+4], OFFSET _SzFree
	mov	DWORD PTR _thread_tmp_alloc$[ebp], OFFSET _SzAllocTemp
	mov	DWORD PTR _thread_tmp_alloc$[ebp+4], OFFSET _SzFreeTemp
	call	_memset

; 198  :   SzArEx_Init (&arc);

	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Init

; 199  : 
; 200  :   uint32_t block_idx     = 0xFFFFFFFF;
; 201  : 
; 202  :   if ( InFile_OpenW (&arc_stream.file, wszArchive) ||

	mov	ebx, DWORD PTR _wszArchive$[ebp]
	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	push	ebx
	push	eax
	mov	DWORD PTR _block_idx$[ebp], -1
	call	_InFile_OpenW
	add	esp, 52					; 00000034H
	test	eax, eax
	jne	$LN21@SK_Decompr
	lea	eax, DWORD PTR _thread_tmp_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Open
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN21@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR _files$[ebp+4]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, edi
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 216  :   for (unsigned int i = 0; i < files.size (); i++)

	xor	esi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	imul	ecx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 216  :   for (unsigned int i = 0; i < files.size (); i++)

	mov	DWORD PTR _i$1$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR tv3930[ebp], eax
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 216  :   for (unsigned int i = 0; i < files.size (); i++)

	je	$LN10@SK_Decompr
	mov	ebx, DWORD PTR _wszOldVersion$[ebp]
	add	edi, 16					; 00000010H
$LL11@SK_Decompr:

; 217  :   {
; 218  :     Byte*    out           = nullptr;

	mov	DWORD PTR _out$21[ebp], 0

; 219  :     size_t   out_len       = 0;

	mov	DWORD PTR _out_len$22[ebp], 0

; 220  :     size_t   offset        = 0;

	mov	DWORD PTR _offset$17[ebp], 0

; 221  :     size_t   decomp_size   = 0;

	mov	DWORD PTR _decomp_size$19[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	$LN585@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	$LN586@SK_Decompr
$LN1374@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 893  : 	return {};

	mov	BYTE PTR $T23[ebp], 0

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	lea	eax, DWORD PTR [esi+40]
	push	DWORD PTR $T23[ebp]
	push	esi
	push	DWORD PTR _files$[ebp+4]
	push	eax
	call	??$_Move_unchecked1@PAUsk_file_entry_s@@PAU1@@std@@YAPAUsk_file_entry_s@@PAU1@00U_General_ptr_iterator_tag@0@@Z ; std::_Move_unchecked1<sk_file_entry_s *,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2552 : 	return (_Move_unchecked1(_First, _Last,

	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN494@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR [edi-20]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	ja	$LN1373@SK_Decompr

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN489@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	$LN1373@SK_Decompr

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	$LN1373@SK_Decompr

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	$LN1373@SK_Decompr

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	$LN1373@SK_Decompr

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN489@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN494@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1585 : 		--this->_Mylast();

	mov	ecx, DWORD PTR _files$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 175  :     if (! matched)

	mov	edx, DWORD PTR _config_files$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1585 : 		--this->_Mylast();

	sub	ecx, 40					; 00000028H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi-4], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edi-20], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1585 : 		--this->_Mylast();

	sub	edi, 40					; 00000028H
	mov	DWORD PTR _files$[ebp+4], ecx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 175  :     if (! matched)

	jmp	$LN19@SK_Decompr
$LN585@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	mov	eax, edi
$LN586@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 223  :     dll_log.Log ( L"[AutoUpdate] Extracting file ('%s')",

	push	eax
	push	OFFSET $SG147319
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log

; 224  :                     files [i].name.c_str () );
; 225  : 
; 226  :     if ( SZ_OK !=

	lea	eax, DWORD PTR _thread_tmp_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _decomp_size$19[ebp]
	push	eax
	lea	eax, DWORD PTR _offset$17[ebp]
	push	eax
	lea	eax, DWORD PTR _out_len$22[ebp]
	push	eax
	lea	eax, DWORD PTR _out$21[ebp]
	push	eax
	lea	eax, DWORD PTR _block_idx$[ebp]
	push	eax
	push	DWORD PTR [edi-16]
	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Extract
	add	esp, 52					; 00000034H
	test	eax, eax
	jne	$LN1380@SK_Decompr

; 239  :     }
; 240  : 
; 241  :     wchar_t wszDestPath [MAX_PATH] = { };

	push	520					; 00000208H
	push	eax
	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	call	_memset

; 242  :     wchar_t wszMovePath [MAX_PATH] = { };

	push	520					; 00000208H
	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	0
	push	eax
	call	_memset

; 244  :     wcscpy (wszDestPath, SK_SYS_GetInstallPath ().c_str ());

	lea	eax, DWORD PTR $T11[ebp]
	push	eax
	call	?SK_SYS_GetInstallPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_SYS_GetInstallPath
	mov	ecx, eax
	add	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN645@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN645@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 244  :     wcscpy (wszDestPath, SK_SYS_GetInstallPath ().c_str ());

	lea	edx, DWORD PTR _wszDestPath$5[ebp]
	npad	2
$LL45@SK_Decompr:
	movzx	eax, WORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR [edx], ax
	lea	edx, DWORD PTR [edx+2]
	test	ax, ax
	jne	SHORT $LL45@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T11[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN685@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR $T11[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	ja	$LN1373@SK_Decompr

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN680@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	$LN1373@SK_Decompr

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	$LN1373@SK_Decompr

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	$LN1373@SK_Decompr

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	$LN1373@SK_Decompr

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN680@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN685@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN717@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN718@SK_Decompr
$LN717@SK_Decompr:
	mov	eax, edi
$LN718@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 246  :     lstrcatW (wszDestPath, files [i].name.c_str ());

	push	eax
	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatW@8

; 247  : 
; 248  :     if (GetFileAttributes (wszDestPath) != INVALID_FILE_ATTRIBUTES)

	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesW@4
	cmp	eax, -1
	je	$LN23@SK_Decompr

; 250  :       wcscpy (wszMovePath, SK_SYS_GetVersionPath ().c_str ());

	lea	eax, DWORD PTR $T10[ebp]
	push	eax
	call	?SK_SYS_GetVersionPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_SYS_GetVersionPath
	mov	ecx, eax
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN736@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN736@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 250  :       wcscpy (wszMovePath, SK_SYS_GetVersionPath ().c_str ());

	lea	edx, DWORD PTR _wszMovePath$7[ebp]
$LL46@SK_Decompr:
	movzx	eax, WORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR [edx], ax
	lea	edx, DWORD PTR [edx+2]
	test	ax, ax
	jne	SHORT $LL46@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T10[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN746@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T10[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN746@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 253  :            lstrlenW (wszOldVersion)           &&

	mov	esi, DWORD PTR __imp__lstrlenW@4
	test	ebx, ebx
	je	SHORT $LN25@SK_Decompr
	push	ebx
	call	esi
	test	eax, eax
	je	SHORT $LN25@SK_Decompr
	cmp	BYTE PTR tv3706[ebp], 0
	je	SHORT $LN25@SK_Decompr

; 254  :            backup )
; 255  :       {
; 256  :         lstrcatW (wszMovePath, wszOldVersion);

	push	ebx
	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatW@8

; 257  :         lstrcatW (wszMovePath, L"\\");

	push	OFFSET $SG147326
	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatW@8
$LN25@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN796@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN797@SK_Decompr
$LN796@SK_Decompr:
	mov	eax, edi
$LN797@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 260  :       lstrcatW (wszMovePath, files [i].name.c_str ());

	push	eax
	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatW@8

; 261  : 
; 262  :       // If the archive contains sub-directories, this will create them
; 263  :       SK_CreateDirectories (wszMovePath);

	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	call	?SK_CreateDirectories@@YG_NPB_W@Z	; SK_CreateDirectories

; 264  : 
; 265  :       if (              wszOldVersion == nullptr ||
; 266  :            (! lstrlenW (wszOldVersion))          ||

	test	ebx, ebx
	je	SHORT $LN27@SK_Decompr
	push	ebx
	call	esi
	test	eax, eax
	je	SHORT $LN27@SK_Decompr
	cmp	BYTE PTR tv3706[ebp], 0
	jne	SHORT $LN26@SK_Decompr
$LN27@SK_Decompr:

; 267  :            (! backup) )
; 268  :       {
; 269  :         lstrcatW (wszMovePath, L".old");

	push	OFFSET $SG147329
	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	call	DWORD PTR __imp__lstrcatW@8
$LN26@SK_Decompr:

; 270  :       }
; 271  : 
; 272  :       SK_MoveFileNoFail ( wszDestPath,

	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	call	?SK_MoveFileNoFail@@YAXPB_W0@Z		; SK_MoveFileNoFail
	add	esp, 8

; 273  :                             wszMovePath );
; 274  :     }
; 275  : 
; 276  :     else

	jmp	SHORT $LN24@SK_Decompr
$LN23@SK_Decompr:

; 277  :     {
; 278  :       SK_CreateDirectories (wszDestPath);

	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	call	?SK_CreateDirectories@@YG_NPB_W@Z	; SK_CreateDirectories
$LN24@SK_Decompr:

; 279  :     }
; 280  : 
; 281  :     HANDLE hOutFile =
; 282  :       CreateFileW ( wszDestPath,

	push	0
	push	134217856				; 08000080H
	push	2
	push	0
	push	3
	push	1073741824				; 40000000H
	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFileW@28
	mov	esi, eax

; 283  :                       GENERIC_WRITE,
; 284  :                         FILE_SHARE_READ | FILE_SHARE_WRITE,
; 285  :                           nullptr,
; 286  :                             CREATE_ALWAYS,
; 287  :                               FILE_ATTRIBUTE_NORMAL |
; 288  :                               FILE_FLAG_SEQUENTIAL_SCAN,
; 289  :                                 nullptr );
; 290  : 
; 291  :     if (hOutFile != INVALID_HANDLE_VALUE)

	cmp	esi, -1
	je	$LN28@SK_Decompr

; 292  :     {
; 293  :       DWORD dwWritten;
; 294  : 
; 295  :       WriteFile ( hOutFile,

	push	0
	lea	eax, DWORD PTR _dwWritten$15[ebp]
	push	eax
	push	DWORD PTR _out_len$22[ebp]
	push	DWORD PTR _out$21[ebp]
	push	esi
	call	DWORD PTR __imp__WriteFile@20

; 296  :                     out,
; 297  :                       PtrToUint ((void *)out_len),
; 298  :                         &dwWritten,
; 299  :                             nullptr );
; 300  : 
; 301  :       CloseHandle (hOutFile);

	push	esi
	call	DWORD PTR __imp__CloseHandle@4

; 302  : 
; 303  :       // We still need to move files in order to replace ones currently
; 304  :       //   involving execution, but if the user does not want backups,
; 305  :       //     attempt to delete the moved files.
; 306  :       if (! backup)

	cmp	BYTE PTR tv3706[ebp], 0
	jne	SHORT $LN30@SK_Decompr

; 307  :       {
; 308  :         DeleteFileW (wszMovePath);

	lea	eax, DWORD PTR _wszMovePath$7[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
$LN30@SK_Decompr:

; 321  :     }
; 322  : 
; 323  :     if (callback != nullptr)

	mov	ecx, DWORD PTR _callback$[ebp]

; 324  :     {
; 325  :       callback (i + 1, PtrToUint ((void *)files.size ()));

	mov	esi, DWORD PTR _i$1$[ebp]
	test	ecx, ecx
	je	SHORT $LN9@SK_Decompr
	push	DWORD PTR tv3930[ebp]
	lea	eax, DWORD PTR [esi+1]
	push	eax
	call	ecx
$LN9@SK_Decompr:

; 216  :   for (unsigned int i = 0; i < files.size (); i++)

	inc	esi
	add	edi, 40					; 00000028H
	mov	DWORD PTR _i$1$[ebp], esi
	cmp	esi, DWORD PTR tv3930[ebp]
	jb	$LL11@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	mov	ebx, DWORD PTR _wszArchive$[ebp]
$LN10@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 329  :   File_Close  (&arc_stream.file);

	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	push	eax
	call	_File_Close

; 330  : 
; 331  : 
; 332  :   block_idx     = 0xFFFFFFFF;
; 333  : 
; 334  :   if ( InFile_OpenW (&arc_stream.file, wszArchive) ||

	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	mov	DWORD PTR _block_idx$[ebp], -1
	push	ebx
	push	eax
	call	_InFile_OpenW
	add	esp, 12					; 0000000cH
	test	eax, eax
	jne	$LN33@SK_Decompr
	lea	eax, DWORD PTR _thread_tmp_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Open
	add	esp, 16					; 00000010H
	test	eax, eax
	jne	$LN33@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	mov	ecx, DWORD PTR _config_files$[ebp+4]
	mov	eax, 1717986919				; 66666667H
	mov	esi, DWORD PTR _config_files$[ebp]
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 348  :   for (unsigned int i = 0; i < config_files.size (); i++)

	xor	ebx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	sub	ecx, esi
	imul	ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
	mov	DWORD PTR tv3929[ebp], eax
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 348  :   for (unsigned int i = 0; i < config_files.size (); i++)

	je	$LN13@SK_Decompr
	lea	edi, DWORD PTR [esi+16]
$LN1433@SK_Decompr:
	mov	esi, DWORD PTR __imp__PathAppendW@8

; 349  :   {
; 350  :     Byte*    out           = nullptr;

	mov	DWORD PTR _out$20[ebp], 0

; 351  :     size_t   out_len       = 0;

	mov	DWORD PTR _out_len$25[ebp], 0

; 352  :     size_t   offset        = 0;

	mov	DWORD PTR _offset$18[ebp], 0

; 353  :     size_t   decomp_size   = 0;

	mov	DWORD PTR _decomp_size$16[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN868@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN869@SK_Decompr
$LN28@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 314  :       dll_log.Log ( L"[AutoUpdate] Failed to open file: '%s'",

	lea	eax, DWORD PTR _wszDestPath$5[ebp]
	push	eax
	push	OFFSET $SG147333

; 315  :                       wszDestPath );
; 316  : 
; 317  :       File_Close  (&arc_stream.file);
; 318  :       SzArEx_Free (&arc, &thread_alloc);
; 319  : 
; 320  :       return E_FAIL;

	jmp	SHORT $LN1435@SK_Decompr
$LN1380@SK_Decompr:

; 232  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip file ('%s')",

	mov	ecx, DWORD PTR _files$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1746 : 		return (this->_Myfirst()[_Pos]);

	lea	eax, DWORD PTR [esi*4+2]
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 232  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip file ('%s')",

	add	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+eax*8+20], 8
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 232  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip file ('%s')",

	lea	eax, DWORD PTR [ecx+eax*8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN626@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN626@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 232  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip file ('%s')",

	push	eax
	push	OFFSET $SG147321
$LN1435@SK_Decompr:
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log

; 233  :                       files [i].name.c_str () );
; 234  : 
; 235  :       File_Close  (&arc_stream.file);

	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	push	eax
	call	_File_Close

; 236  :       SzArEx_Free (&arc, &thread_alloc);

	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Free
	add	esp, 24					; 00000018H

; 237  : 
; 238  :       return E_FAIL;

	jmp	$LN55@SK_Decompr
$LN868@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	mov	eax, edi
$LN869@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 355  :     dll_log.Log ( L"[AutoUpdate] Extracting config file ('%s')",

	push	eax
	push	OFFSET $SG147340
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log

; 356  :                     config_files [i].name.c_str () );
; 357  : 
; 358  :     if ( SZ_OK !=

	lea	eax, DWORD PTR _thread_tmp_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _decomp_size$16[ebp]
	push	eax
	lea	eax, DWORD PTR _offset$18[ebp]
	push	eax
	lea	eax, DWORD PTR _out_len$25[ebp]
	push	eax
	lea	eax, DWORD PTR _out$20[ebp]
	push	eax
	lea	eax, DWORD PTR _block_idx$[ebp]
	push	eax
	push	DWORD PTR [edi-16]
	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Extract
	add	esp, 52					; 00000034H
	test	eax, eax
	jne	$LN1386@SK_Decompr

; 371  :     }
; 372  : 
; 373  :     wchar_t wszDefaultConfig [MAX_PATH + 2] = { }; // Existing Default Cfg

	push	524					; 0000020cH
	push	eax
	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	eax
	call	_memset

; 374  :     wchar_t wszNewConfig     [MAX_PATH + 2] = { }; // Just Downloaded

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	0
	push	eax
	call	_memset

; 375  : 
; 376  :     wchar_t wszUserConfig    [MAX_PATH + 2] = { }; // Currently Deployed

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	0
	push	eax
	call	_memset

; 377  :     wchar_t wszOldConfig     [MAX_PATH + 2] = { }; // Backed-Up User Cfg

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszOldConfig$2[ebp]
	push	0
	push	eax
	call	_memset

; 379  :     wcscpy   (wszDefaultConfig, SK_SYS_GetInstallPath ().c_str ());

	lea	eax, DWORD PTR $T9[ebp]
	push	eax
	call	?SK_SYS_GetInstallPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_SYS_GetInstallPath
	mov	ecx, eax
	add	esp, 52					; 00000034H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN928@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN928@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 379  :     wcscpy   (wszDefaultConfig, SK_SYS_GetInstallPath ().c_str ());

	lea	edx, DWORD PTR _wszDefaultConfig$3[ebp]
$LL47@SK_Decompr:
	movzx	eax, WORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR [edx], ax
	lea	edx, DWORD PTR [edx+2]
	test	ax, ax
	jne	SHORT $LL47@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T9[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN968@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR $T9[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	ja	$LN1373@SK_Decompr

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN963@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	$LN1373@SK_Decompr

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	$LN1373@SK_Decompr

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	$LN1373@SK_Decompr

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	$LN1373@SK_Decompr

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN963@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN968@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 380  :     wcscpy   (wszUserConfig,    SK_SYS_GetInstallPath ().c_str ());

	lea	eax, DWORD PTR $T8[ebp]
	push	eax
	call	?SK_SYS_GetInstallPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_SYS_GetInstallPath
	mov	ecx, eax
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN989@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN989@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 380  :     wcscpy   (wszUserConfig,    SK_SYS_GetInstallPath ().c_str ());

	lea	edx, DWORD PTR _wszUserConfig$4[ebp]
$LL48@SK_Decompr:
	movzx	eax, WORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR [edx], ax
	lea	edx, DWORD PTR [edx+2]
	test	ax, ax
	jne	SHORT $LL48@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T8[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN1029@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	mov	ecx, DWORD PTR $T8[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	ja	$LN1373@SK_Decompr

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN1024@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	jne	$LN1373@SK_Decompr

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jae	$LN1373@SK_Decompr

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jb	$LN1373@SK_Decompr

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	ja	$LN1373@SK_Decompr

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN1024@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1029@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN1061@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN1062@SK_Decompr
$LN1061@SK_Decompr:
	mov	eax, edi
$LN1062@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 382  :     PathAppend (wszDefaultConfig, config_files [i].name.c_str ());

	push	eax
	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	eax
	call	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN1091@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN1092@SK_Decompr
$LN1091@SK_Decompr:
	mov	eax, edi
$LN1092@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 383  :     PathAppend (wszUserConfig,    config_files [i].name.c_str ());

	push	eax
	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	eax
	call	esi
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	mov	esi, DWORD PTR __imp__wcsstr
	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	OFFSET $SG147344
	push	eax
	call	esi
	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 387  :     if (wszDefault_ != nullptr)

	test	eax, eax
	je	SHORT $LN1426@SK_Decompr

; 388  :     {
; 389  :       *wszDefault_ = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [eax], cx

; 390  : 
; 391  :       wchar_t* wsz_ =
; 392  :         wcsstr ( wszDefault_+1, L"_" );

	add	eax, 2
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	push	OFFSET $SG147346
	push	eax
	call	esi
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 396  :         lstrcatW (wszUserConfig, wsz_+1);

	mov	esi, DWORD PTR __imp__lstrcatW@8
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 394  :       if (wsz_ != nullptr)

	test	eax, eax
	je	SHORT $LN36@SK_Decompr

; 396  :         lstrcatW (wszUserConfig, wsz_+1);

	add	eax, 2
	push	eax
	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	eax
	call	esi
	jmp	SHORT $LN36@SK_Decompr
$LN1426@SK_Decompr:
	mov	esi, DWORD PTR __imp__lstrcatW@8
$LN36@SK_Decompr:

; 397  :       }
; 398  :     }
; 399  : 
; 400  :     lstrcatW ( wszOldConfig, wszUserConfig );

	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	eax
	lea	eax, DWORD PTR _wszOldConfig$2[ebp]
	push	eax
	call	esi

; 401  :     lstrcatW ( wszOldConfig, L".old"       );

	push	OFFSET $SG147348
	lea	eax, DWORD PTR _wszOldConfig$2[ebp]
	push	eax
	call	esi

; 402  : 
; 403  :     lstrcatW (wszNewConfig, wszDefaultConfig);

	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	eax
	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	call	esi

; 404  :     lstrcatW (wszNewConfig, L".new");

	push	OFFSET $SG147349
	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	call	esi

; 405  : 
; 406  :     SK_CreateDirectories (wszNewConfig);

	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	call	?SK_CreateDirectories@@YG_NPB_W@Z	; SK_CreateDirectories

; 407  : 
; 408  :     HANDLE hOutFile =
; 409  :       CreateFileW ( wszNewConfig,

	push	0
	push	134217856				; 08000080H
	push	2
	push	0
	push	3
	push	1073741824				; 40000000H
	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	call	DWORD PTR __imp__CreateFileW@28
	mov	esi, eax

; 410  :                       GENERIC_WRITE,
; 411  :                         FILE_SHARE_READ | FILE_SHARE_WRITE,
; 412  :                           nullptr,
; 413  :                             CREATE_ALWAYS,
; 414  :                               FILE_ATTRIBUTE_NORMAL |
; 415  :                               FILE_FLAG_SEQUENTIAL_SCAN,
; 416  :                                 nullptr );
; 417  : 
; 418  :     if (hOutFile != INVALID_HANDLE_VALUE)

	cmp	esi, -1
	je	$LN37@SK_Decompr

; 419  :     {
; 420  :       DWORD dwWritten;
; 421  : 
; 422  :       WriteFile ( hOutFile,

	push	0
	lea	eax, DWORD PTR _dwWritten$14[ebp]
	push	eax
	push	DWORD PTR _out_len$25[ebp]
	push	DWORD PTR _out$20[ebp]
	push	esi
	call	DWORD PTR __imp__WriteFile@20

; 423  :                     out,
; 424  :                       PtrToUint ((void *)out_len),
; 425  :                         &dwWritten,
; 426  :                             nullptr );
; 427  : 
; 428  :       CloseHandle (hOutFile);

	push	esi
	call	DWORD PTR __imp__CloseHandle@4

; 429  : 
; 430  :       if ( GetFileAttributes (wszUserConfig)     == INVALID_FILE_ATTRIBUTES ||
; 431  :            GetFileAttributes (wszDefaultConfig)  == INVALID_FILE_ATTRIBUTES ||

	mov	esi, DWORD PTR __imp__GetFileAttributesW@4
	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	eax
	call	esi
	cmp	eax, -1
	je	SHORT $LN41@SK_Decompr
	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	eax
	call	esi
	cmp	eax, -1
	je	SHORT $LN41@SK_Decompr
	push	0
	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	call	?SK_GetFileCRC32C@@YGIPB_WP6GX_K1@Z@Z	; SK_GetFileCRC32C
	mov	esi, eax
	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	0
	push	eax
	call	?SK_GetFileCRC32C@@YGIPB_WP6GX_K1@Z@Z	; SK_GetFileCRC32C
	cmp	eax, esi
	jne	SHORT $LN1430@SK_Decompr

; 445  :                         wszUserConfig,
; 446  :                           FALSE );
; 447  :       }
; 448  : 
; 449  :       else
; 450  :       {
; 451  :         DeleteFileW (wszNewConfig);

	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	jmp	SHORT $LN40@SK_Decompr
$LN1430@SK_Decompr:
	mov	esi, DWORD PTR __imp__GetFileAttributesW@4
$LN41@SK_Decompr:

; 432  :              SK_GetFileCRC32C (wszDefaultConfig, nullptr) !=
; 433  :              SK_GetFileCRC32C (wszNewConfig,     nullptr) )
; 434  :       {
; 435  :         if (GetFileAttributes (wszUserConfig) != INVALID_FILE_ATTRIBUTES)

	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	eax
	call	esi
	movzx	ecx, BYTE PTR ?config_files_changed@@3_NA ; config_files_changed
	cmp	eax, -1
	mov	eax, 1
	cmovne	ecx, eax

; 436  :           config_files_changed = true;
; 437  : 
; 438  :         SK_MoveFileNoFail ( wszNewConfig,

	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	eax
	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	mov	BYTE PTR ?config_files_changed@@3_NA, cl ; config_files_changed
	push	eax
	call	?SK_MoveFileNoFail@@YAXPB_W0@Z		; SK_MoveFileNoFail

; 439  :                               wszDefaultConfig );
; 440  : 
; 441  :         SK_MoveFileNoFail ( wszUserConfig,

	lea	eax, DWORD PTR _wszOldConfig$2[ebp]
	push	eax
	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	eax
	call	?SK_MoveFileNoFail@@YAXPB_W0@Z		; SK_MoveFileNoFail
	add	esp, 16					; 00000010H

; 442  :                               wszOldConfig );
; 443  : 
; 444  :         CopyFileW   ( wszDefaultConfig,

	lea	eax, DWORD PTR _wszUserConfig$4[ebp]
	push	0
	push	eax
	lea	eax, DWORD PTR _wszDefaultConfig$3[ebp]
	push	eax
	call	DWORD PTR __imp__CopyFileW@12
$LN40@SK_Decompr:

; 464  :     }
; 465  : 
; 466  :     if (callback != nullptr)

	mov	ecx, DWORD PTR _callback$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@SK_Decompr

; 467  :     {
; 468  :       callback (i + 1, PtrToUint ((void *)config_files.size ()));

	push	DWORD PTR tv3929[ebp]
	lea	eax, DWORD PTR [ebx+1]
	push	eax
	call	ecx
$LN12@SK_Decompr:

; 348  :   for (unsigned int i = 0; i < config_files.size (); i++)

	inc	ebx
	add	edi, 40					; 00000028H
	cmp	ebx, DWORD PTR tv3929[ebp]
	jb	$LN1433@SK_Decompr
$LN13@SK_Decompr:

; 469  :     }
; 470  :   }
; 471  : 
; 472  :   File_Close  (&arc_stream.file);

	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	push	eax
	call	_File_Close

; 473  :   SzArEx_Free (&arc, &thread_alloc);

	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Free
	add	esp, 12					; 0000000cH

; 474  : 
; 475  :   return S_OK;

	xor	esi, esi
	jmp	SHORT $LN60@SK_Decompr
$LN37@SK_Decompr:

; 452  :       }
; 453  :     }
; 454  : 
; 455  :     else
; 456  :     {
; 457  :       dll_log.Log ( L"[AutoUpdate] Failed to create file: '%s'",

	lea	eax, DWORD PTR _wszNewConfig$6[ebp]
	push	eax
	push	OFFSET $SG147356

; 458  :                       wszNewConfig );
; 459  : 
; 460  :       File_Close  (&arc_stream.file);
; 461  :       SzArEx_Free (&arc, &thread_alloc);
; 462  : 
; 463  :       return E_FAIL;

	jmp	$LN1435@SK_Decompr
$LN1386@SK_Decompr:

; 364  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip config file ('%s')",

	mov	ecx, DWORD PTR _config_files$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1746 : 		return (this->_Myfirst()[_Pos]);

	lea	eax, DWORD PTR [ebx*4+2]
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 364  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip config file ('%s')",

	add	eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+eax*8+20], 8
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 364  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip config file ('%s')",

	lea	eax, DWORD PTR [ecx+eax*8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN909@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN909@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 364  :       dll_log.Log ( L"[AutoUpdate] Failed to extract 7-zip config file ('%s')",

	push	eax
	push	OFFSET $SG147342

; 365  :                       config_files [i].name.c_str () );
; 366  : 
; 367  :       File_Close  (&arc_stream.file);
; 368  :       SzArEx_Free (&arc, &thread_alloc);
; 369  : 
; 370  :       return E_FAIL;

	jmp	$LN1435@SK_Decompr
$LN33@SK_Decompr:

; 335  :        SzArEx_Open ( &arc,
; 336  :                        &look_stream.s,
; 337  :                          &thread_alloc,
; 338  :                            &thread_tmp_alloc ) != SZ_OK )
; 339  :   {
; 340  :     dll_log.Log ( L"[AutoUpdate]  ** Cannot open archive file: %s",

	push	ebx
	push	OFFSET $SG147338

; 341  :                     wszArchive );
; 342  : 
; 343  :     SzArEx_Free (&arc, &thread_alloc);
; 344  : 
; 345  :     return E_FAIL;

	jmp	SHORT $LN1434@SK_Decompr
$LN21@SK_Decompr:

; 203  :        SzArEx_Open ( &arc,
; 204  :                        &look_stream.s,
; 205  :                          &thread_alloc,
; 206  :                            &thread_tmp_alloc ) != SZ_OK )
; 207  :   {
; 208  :     dll_log.Log ( L"[AutoUpdate]  ** Cannot open archive file: %s",

	push	ebx
	push	OFFSET $SG147317
$LN1434@SK_Decompr:
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log

; 209  :                     wszArchive );
; 210  : 
; 211  :     SzArEx_Free (&arc, &thread_alloc);

	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Free
	add	esp, 20					; 00000014H
$LN55@SK_Decompr:
	mov	esi, -2147467259			; 80004005H
$LN60@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1949 : 		if (this->_Myfirst() != pointer())

	mov	ebx, DWORD PTR _config_files$[ebp]
	test	ebx, ebx
	je	$LN1126@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T13[ebp]
	lea	eax, DWORD PTR _config_files$[ebp]
	push	eax
	push	DWORD PTR _config_files$[ebp+4]
	push	ebx
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	ecx, DWORD PTR _config_files$[ebp+8]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	imul	ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 107374182				; 06666666H
	jbe	SHORT $LN1203@SK_Decompr
$LN1373@SK_Decompr:
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1436@SK_Decompr:
$LN1203@SK_Decompr:

; 99   : 	const size_t _User_size = _Count * _Sz;

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 3

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN1204@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	bl, 31					; 0000001fH
	je	SHORT $LN1205@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1437@SK_Decompr:
$LN1205@SK_Decompr:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ebx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ebx
	jb	SHORT $LN1206@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1438@SK_Decompr:
$LN1206@SK_Decompr:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ebx, eax
	cmp	ebx, 4
	jae	SHORT $LN1207@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1439@SK_Decompr:
$LN1207@SK_Decompr:

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ebx, 35					; 00000023H
	jbe	SHORT $LN1208@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1440@SK_Decompr:
$LN1208@SK_Decompr:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ebx, eax
$LN1204@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1126@SK_Decompr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1949 : 		if (this->_Myfirst() != pointer())

	mov	ebx, DWORD PTR _files$[ebp]
	test	ebx, ebx
	je	$LN1245@SK_Decompr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	push	DWORD PTR $T12[ebp]
	lea	ecx, DWORD PTR _files$[ebp]
	push	ecx
	push	DWORD PTR _files$[ebp+4]
	push	ebx
	call	??$_Destroy_range1@V?$allocator@Usk_file_entry_s@@@std@@PAUsk_file_entry_s@@@std@@YAXPAUsk_file_entry_s@@0AAU?$_Wrap_alloc@V?$allocator@Usk_file_entry_s@@@std@@@0@U?$integral_constant@_N$0A@@0@@Z ; std::_Destroy_range1<std::allocator<sk_file_entry_s>,sk_file_entry_s *>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	ecx, DWORD PTR _files$[ebp+8]
	mov	eax, 1717986919				; 66666667H
	sub	ecx, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<

	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	imul	ecx
	sar	edx, 4
	mov	eax, edx
	shr	eax, 31					; 0000001fH
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 107374182				; 06666666H
	jbe	SHORT $LN1322@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1441@SK_Decompr:
$LN1322@SK_Decompr:

; 99   : 	const size_t _User_size = _Count * _Sz;

	lea	eax, DWORD PTR [eax+eax*4]
	shl	eax, 3

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN1323@SK_Decompr

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	bl, 31					; 0000001fH
	je	SHORT $LN1324@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1442@SK_Decompr:
$LN1324@SK_Decompr:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ebx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ebx
	jb	SHORT $LN1325@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1443@SK_Decompr:
$LN1325@SK_Decompr:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ebx, eax
	cmp	ebx, 4
	jae	SHORT $LN1326@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1444@SK_Decompr:
$LN1326@SK_Decompr:

; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ebx, 35					; 00000023H
	jbe	SHORT $LN1327@SK_Decompr
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN1445@SK_Decompr:
$LN1327@SK_Decompr:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ebx, eax
$LN1323@SK_Decompr:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ebx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1245@SK_Decompr:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 476  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN1432@SK_Decompr:
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z$0:
	lea	ecx, DWORD PTR _files$[ebp]
	jmp	??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::~vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
__unwindfunclet$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z$1:
	lea	ecx, DWORD PTR _config_files$[ebp]
	jmp	??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::~vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
__ehhandler$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_Decompress7z@@YAJPB_W0_NP6GHHH@Z@Z ENDP		; SK_Decompress7z
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp
_TEXT	SEGMENT
_look_stream$ = -17156					; size = 16412
_wszEntry$2 = -744					; size = 520
_arc$ = -224						; size = 128
$T3 = -96						; size = 40
$T4 = -56						; size = 4
_arc_stream$ = -52					; size = 12
_thread_tmp_alloc$ = -40				; size = 8
_thread_alloc$ = -32					; size = 8
_files$ = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wszArchive$ = 12					; size = 4
?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z PROC ; SK_Get7ZFileContents

; 50   : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z
	push	eax
	mov	eax, 17144				; 000042f8H
	mov	DWORD PTR fs:0, esp
	call	__chkstk

; 51   :   if (! crc_init)

	cmp	BYTE PTR ?crc_init@@3_NA, 0
	mov	DWORD PTR $T4[ebp], 0
	jne	SHORT $LN5@SK_Get7ZFi

; 52   :   {
; 53   :     CrcGenerateTable ();

	call	@CrcGenerateTable@0

; 54   :     crc_init = true;

	mov	BYTE PTR ?crc_init@@3_NA, 1
$LN5@SK_Get7ZFi:

; 55   :   }
; 56   : 
; 57   :   CFileInStream arc_stream       = { };
; 58   :   CLookToRead   look_stream      = { };

	push	16412					; 0000401cH
	lea	eax, DWORD PTR _look_stream$[ebp]
	mov	DWORD PTR _arc_stream$[ebp+8], 0
	xorps	xmm0, xmm0
	push	0
	push	eax
	movq	QWORD PTR _arc_stream$[ebp], xmm0
	call	_memset
	xorps	xmm0, xmm0

; 59   :   ISzAlloc      thread_alloc     = { };
; 60   :   ISzAlloc      thread_tmp_alloc = { };
; 61   : 
; 62   :   FileInStream_CreateVTable (&arc_stream);

	lea	eax, DWORD PTR _arc_stream$[ebp]
	push	eax
	movq	QWORD PTR _thread_alloc$[ebp], xmm0
	movq	QWORD PTR _thread_tmp_alloc$[ebp], xmm0
	call	_FileInStream_CreateVTable

; 63   :   LookToRead_CreateVTable   (&look_stream, False);

	lea	eax, DWORD PTR _look_stream$[ebp]
	push	0
	push	eax
	call	_LookToRead_CreateVTable

; 64   : 
; 65   :   look_stream.realStream = &arc_stream.s;

	lea	eax, DWORD PTR _arc_stream$[ebp]
	mov	DWORD PTR _look_stream$[ebp+16], eax

; 66   :   LookToRead_Init         (&look_stream);

	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	call	_LookToRead_Init

; 67   : 
; 68   :   thread_alloc.Alloc     = SzAlloc;

	mov	DWORD PTR _thread_alloc$[ebp], OFFSET _SzAlloc

; 69   :   thread_alloc.Free      = SzFree;

	mov	DWORD PTR _thread_alloc$[ebp+4], OFFSET _SzFree

; 70   : 
; 71   :   thread_tmp_alloc.Alloc = SzAllocTemp;

	mov	DWORD PTR _thread_tmp_alloc$[ebp], OFFSET _SzAllocTemp

; 72   :   thread_tmp_alloc.Free  = SzFreeTemp;

	mov	DWORD PTR _thread_tmp_alloc$[ebp+4], OFFSET _SzFreeTemp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 476  : 		: _Myfirst(),

	mov	DWORD PTR _files$[ebp], 0

; 477  : 		_Mylast(),

	mov	DWORD PTR _files$[ebp+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR _files$[ebp+8], 0
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 76   :   if (InFile_OpenW (&arc_stream.file, wszArchive))

	push	DWORD PTR _wszArchive$[ebp]
	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	push	eax
	call	_InFile_OpenW
	add	esp, 36					; 00000024H
	test	eax, eax
	jne	$LN528@SK_Get7ZFi

; 77   :   {
; 78   :     return files;
; 79   :   }
; 80   : 
; 81   :   CSzArEx       arc = { };

	push	128					; 00000080H
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_memset

; 82   :   SzArEx_Init (&arc);

	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Init

; 83   : 
; 84   :   if ( SzArEx_Open ( &arc,
; 85   :                        &look_stream.s,
; 86   :                          &thread_alloc,
; 87   :                            &thread_tmp_alloc ) == SZ_OK )

	lea	eax, DWORD PTR _thread_tmp_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _look_stream$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Open
	add	esp, 32					; 00000020H
	test	eax, eax
	jne	$LN7@SK_Get7ZFi

; 93   :     for (i = 0; i < arc.NumFiles; i++)

	push	esi
	xor	esi, esi
	cmp	DWORD PTR _arc$[ebp+64], esi
	jbe	$LN3@SK_Get7ZFi
	push	edi
	npad	2
$LL4@SK_Get7ZFi:

; 94   :     {
; 95   :       if (SzArEx_IsDir (&arc, i))

	mov	eax, DWORD PTR _arc$[ebp+72]
	mov	ecx, esi
	and	ecx, 7
	mov	edx, 128				; 00000080H
	sar	edx, cl
	mov	ecx, esi
	shr	ecx, 3
	test	BYTE PTR [ecx+eax], dl
	jne	$LN2@SK_Get7ZFi

; 96   :         continue;
; 97   : 
; 98   :       SzArEx_GetFileNameUtf16 (&arc, i, (UInt16 *)wszEntry);

	lea	eax, DWORD PTR _wszEntry$2[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	esi
	push	eax
	call	_SzArEx_GetFileNameUtf16
	mov	eax, DWORD PTR _arc$[ebp+68]

; 103  : 
; 104  :       if (*wszEntry == L'\\')

	lea	edi, DWORD PTR _wszEntry$2[ebp+2]
	add	esp, 12					; 0000000cH

; 107  :       files.push_back (sk_file_entry_s { i, fileSize, pwszEntry });

	mov	DWORD PTR $T3[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR $T3[ebp+32], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T3[ebp+36], 7
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 100  :       uint64_t fileSize = SzArEx_GetFileSize (&arc, i);

	mov	ecx, DWORD PTR [eax+esi*8+8]
	sub	ecx, DWORD PTR [eax+esi*8]
	mov	edx, DWORD PTR [eax+esi*8+12]
	sbb	edx, DWORD PTR [eax+esi*8+4]

; 101  : 
; 102  :       wchar_t* pwszEntry = wszEntry;

	lea	eax, DWORD PTR _wszEntry$2[ebp]

; 103  : 
; 104  :       if (*wszEntry == L'\\')

	cmp	WORD PTR _wszEntry$2[ebp], 92		; 0000005cH

; 107  :       files.push_back (sk_file_entry_s { i, fileSize, pwszEntry });

	mov	DWORD PTR $T3[ebp+12], edx
	cmovne	edi, eax
	mov	DWORD PTR $T3[ebp+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
	mov	WORD PTR $T3[ebp+16], ax

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, edi
	lea	edx, DWORD PTR [eax+2]
$LL525@SK_Get7ZFi:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL525@SK_Get7ZFi
	sub	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	lea	ecx, DWORD PTR $T3[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 952  : 		emplace_back(_STD move(_Val));

	lea	eax, DWORD PTR $T3[ebp]
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 107  :       files.push_back (sk_file_entry_s { i, fileSize, pwszEntry });

	mov	BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 952  : 		emplace_back(_STD move(_Val));

	push	eax
	lea	ecx, DWORD PTR _files$[ebp]
	call	??$emplace_back@Usk_file_entry_s@@@?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAEX$$QAUsk_file_entry_s@@@Z ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::emplace_back<sk_file_entry_s>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T3[ebp+36]
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 107  :       files.push_back (sk_file_entry_s { i, fileSize, pwszEntry });

	mov	BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN2@SK_Get7ZFi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T3[ebp+16]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN2@SK_Get7ZFi:
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 93   :     for (i = 0; i < arc.NumFiles; i++)

	inc	esi
	cmp	esi, DWORD PTR _arc$[ebp+64]
	jb	$LL4@SK_Get7ZFi
	pop	edi
$LN3@SK_Get7ZFi:

; 108  :     }
; 109  : 
; 110  :     File_Close  (&arc_stream.file);

	lea	eax, DWORD PTR _arc_stream$[ebp+8]
	push	eax
	call	_File_Close
	add	esp, 4
	pop	esi
$LN7@SK_Get7ZFi:

; 111  :   }
; 112  : 
; 113  :   SzArEx_Free (&arc, &thread_alloc);

	lea	eax, DWORD PTR _thread_alloc$[ebp]
	push	eax
	lea	eax, DWORD PTR _arc$[ebp]
	push	eax
	call	_SzArEx_Free
	add	esp, 8
$LN528@SK_Get7ZFi:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 836  : 		this->_Myfirst() = _Right._Myfirst();

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	ecx, DWORD PTR _files$[ebp]
	mov	DWORD PTR [eax], ecx

; 837  : 		this->_Mylast() = _Right._Mylast();

	mov	ecx, DWORD PTR _files$[ebp+4]
	mov	DWORD PTR [eax+4], ecx

; 838  : 		this->_Myend() = _Right._Myend();

	mov	ecx, DWORD PTR _files$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
; File c:\users\andon\source\repos\specialk\src\update\archive.cpp

; 116  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z$0:
	lea	ecx, DWORD PTR _files$[ebp]
	jmp	??1?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@QAE@XZ ; std::vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >::~vector<sk_file_entry_s,std::allocator<sk_file_entry_s> >
__unwindfunclet$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z$3:
	lea	ecx, DWORD PTR $T3[ebp]
	jmp	??1sk_file_entry_s@@QAE@XZ
__ehhandler$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_Get7ZFileContents@@YA?AV?$vector@Usk_file_entry_s@@V?$allocator@Usk_file_entry_s@@@std@@@std@@PB_W@Z ENDP ; SK_Get7ZFileContents
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ??_Gsk_file_entry_s@@QAEPAXI@Z
_TEXT	SEGMENT
___flags$ = 8						; size = 4
??_Gsk_file_entry_s@@QAEPAXI@Z PROC			; sk_file_entry_s::`scalar deleting destructor', COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+36]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN11@scalar
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+16]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN11@scalar:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+32], 0
	test	BYTE PTR ___flags$[ebp], 1

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi+16], ax
	je	SHORT $LN37@scalar
	push	40					; 00000028H
	push	esi
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
$LN37@scalar:
	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??_Gsk_file_entry_s@@QAEPAXI@Z ENDP			; sk_file_entry_s::`scalar deleting destructor'
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ??4sk_file_entry_s@@QAEAAU0@$$QAU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??4sk_file_entry_s@@QAEAAU0@$$QAU0@@Z PROC		; sk_file_entry_s::operator=, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR [edx]
	lea	ebx, DWORD PTR [edx+16]
	mov	edi, ecx
	mov	DWORD PTR [edi], eax
	lea	esi, DWORD PTR [edi+16]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [edi+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [edi+12], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2076 : 		if (this != _STD addressof(_Right))

	cmp	esi, ebx
	je	SHORT $LN82@operator

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN11@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN11@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [ebx]
	movups	XMMWORD PTR [esi], xmm0
	movq	xmm0, QWORD PTR [ebx+16]
	movq	QWORD PTR [esi+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ebx+16], eax

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ebx+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ebx], ax
$LN82@operator:
	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx
	pop	ebp
	ret	4
??4sk_file_entry_s@@QAEAAU0@$$QAU0@@Z ENDP		; sk_file_entry_s::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ??0sk_file_entry_s@@QAE@$$QAU0@@Z
_TEXT	SEGMENT
___that$ = 8						; size = 4
??0sk_file_entry_s@@QAE@$$QAU0@@Z PROC			; sk_file_entry_s::sk_file_entry_s, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], eax

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+32], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+36], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [edx+16]
	movups	XMMWORD PTR [ecx+16], xmm0
	movq	xmm0, QWORD PTR [edx+32]
	movq	QWORD PTR [ecx+32], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edx+32], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edx+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edx+16], ax
	mov	eax, ecx
	pop	ebp
	ret	4
??0sk_file_entry_s@@QAE@$$QAU0@@Z ENDP			; sk_file_entry_s::sk_file_entry_s
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ??1sk_file_entry_s@@QAE@XZ
_TEXT	SEGMENT
??1sk_file_entry_s@@QAE@XZ PROC				; sk_file_entry_s::~sk_file_entry_s, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+36]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN7@sk_file_en
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+16]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN7@sk_file_en:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+36], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi+16], ax
	pop	esi
	ret	0
??1sk_file_entry_s@@QAE@XZ ENDP				; sk_file_entry_s::~sk_file_entry_s
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT

; 3646 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
	int	3
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset, COMDAT
; _this$ = ecx

; 3629 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Off$[ebp]
	jb	SHORT $LN14@Check_offs

; 3633 : 			}
; 3634 : 		}

	pop	ebp
	ret	4
$LN14@Check_offs:

; 3631 : 			{
; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN16@Check_offs:
$LN13@Check_offs:
	int	3
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT

; 3625 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3605 : 		{	// initialize buffer, deallocating any storage

	npad	2
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 8

; 3606 : 		this->_Orphan_all();
; 3607 : 		auto& _My_data = this->_Get_data();
; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN2@Tidy_deall
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN2@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3621 : 		}

	ret	0
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3602 : 		}

	ret	0
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 3588 : 		{	// test if _Ptr points inside string

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@Inside
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN14@Inside
$LN13@Inside:
	mov	edx, ecx
$LN14@Inside:

; 3589 : 		const auto& _My_data = this->_Get_data();
; 3590 : 		const _Elem * const _My_chars = _My_data._Myptr();
; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	cmp	edx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	eax, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [edx+eax*2]
	cmp	DWORD PTR __Ptr$[ebp], eax
	jae	SHORT $LN3@Inside
	mov	al, 1

; 3592 : 		}

	pop	ebp
	ret	4
$LN3@Inside:

; 3589 : 		const auto& _My_data = this->_Get_data();
; 3590 : 		const _Elem * const _My_chars = _My_data._Myptr();
; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	xor	al, al

; 3592 : 		}

	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 3572 : 		{	// ensure buffer is big enough

	npad	2
	push	ebp
	mov	ebp, esp

; 3573 : 		if (_Newsize == 0)

	mov	eax, DWORD PTR __Newsize$[ebp]
	test	eax, eax
	jne	SHORT $LN2@Grow

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN16@Grow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN16@Grow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3576 : 			return (false);

	xor	al, al

; 3585 : 		}

	pop	ebp
	ret	4
$LN2@Grow:

; 3577 : 			}
; 3578 : 
; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [ecx+20], eax
	jae	SHORT $LN3@Grow

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	eax
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
$LN3@Grow:

; 3582 : 			}
; 3583 : 
; 3584 : 		return (true);	// return true only if more work to do

	mov	al, 1

; 3585 : 		}

	pop	ebp
	ret	4
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 3566 : 		{	// set new length and null terminator

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 3567 : 		auto& _My_data = this->_Get_data();
; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Eos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3569 : 		}

	pop	ebp
	ret	4
$LN11@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3569 : 		}

	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldres$ = -28						; size = 4
_this$ = -24						; size = 4
__Ptr$1$ = -20						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 3514 : 		{	// reallocate to new buffer of at least _Newsize, copying existing elements there

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H

; 3515 : 		const auto _Max = max_size();
; 3516 : 		if (_Newsize > _Max)

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	cmp	eax, 2147483646				; 7ffffffeH
	jbe	SHORT $LN2@Copy

; 3517 : 			{	// too long
; 3518 : 			_Xlen();

	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN102@Copy:
$LN2@Copy:

; 3519 : 			}
; 3520 : 
; 3521 : 		auto& _My_data = this->_Get_data();
; 3522 : 		const size_type _Oldres = _My_data._Myres;

	mov	ebx, DWORD PTR [esi+20]

; 3523 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	edi, eax
	or	edi, 7
	mov	DWORD PTR __Oldres$[ebp], ebx

; 3524 : 		if (_Max < _Newres)

	cmp	edi, 2147483646				; 7ffffffeH
	jbe	SHORT $LN3@Copy

; 3525 : 			{
; 3526 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	edi, eax
	jmp	SHORT $LN8@Copy
$LN3@Copy:

; 3527 : 			}
; 3528 : 		else if (_Oldres / 2 <= _Newres / 3)

	mov	eax, -1431655765			; aaaaaaabH
	mov	ecx, ebx
	mul	edi
	shr	ecx, 1
	shr	edx, 1
	cmp	ecx, edx
	jbe	SHORT $LN8@Copy

; 3529 : 			;
; 3530 : 		else if (_Oldres <= _Max - _Oldres / 2)

	mov	eax, 2147483646				; 7ffffffeH

; 3531 : 			{
; 3532 : 			_Newres = _Oldres + _Oldres / 2;	// grow exponentially if possible

	lea	edi, DWORD PTR [ecx+ebx]
	sub	eax, ecx
	cmp	ebx, eax
	jbe	SHORT $LN8@Copy

; 3533 : 			}
; 3534 : 		else
; 3535 : 			{
; 3536 : 			_Newres = _Max;	// settle for max_size()

	mov	edi, 2147483646				; 7ffffffeH
$LN8@Copy:

; 3537 : 			}
; 3538 : 
; 3539 : 		auto& _Al = this->_Getal();
; 3540 : 		pointer _Ptr;
; 3541 : 		_TRY_BEGIN
; 3542 : 			_Ptr = _Al.allocate(_Newres + 1);

	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	eax
	mov	ecx, esi
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
	mov	ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
	jmp	SHORT $LN100@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$0:

; 3544 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	mov	ecx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3544 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	DWORD PTR __Newres$[ebp], eax

; 3545 : 			_Ptr = _Al.allocate(_Newres + 1);	// if throws, *this unmodified

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	eax
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3545 : 			_Ptr = _Al.allocate(_Newres + 1);	// if throws, *this unmodified

	mov	DWORD PTR __Ptr$[ebp], eax

; 3546 : 		_CATCH_END

	mov	eax, $LN97@Copy
	ret	0
$LN97@Copy:
	mov	esi, DWORD PTR _this$[ebp]
	mov	ebx, DWORD PTR __Oldres$[ebp]
	mov	edi, DWORD PTR __Newres$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
$LN100@Copy:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3546 : 		_CATCH_END

	mov	DWORD PTR __Ptr$1$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [eax*2+2]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3550 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN10@Copy
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	DWORD PTR [esi]
	push	ecx
	call	_memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3553 : 			_Al.deallocate(_My_data._Bx._Ptr, _Oldres + 1);

	lea	eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3556 : 		else

	jmp	SHORT $LN101@Copy
$LN10@Copy:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	esi
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN101@Copy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3563 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3562 : 		_My_data._Myres = _Newres;

	mov	DWORD PTR [esi+20], edi

; 3563 : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN99@Copy:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 3410 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

	npad	2
	push	ebp
	mov	ebp, esp

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	mov	ecx, DWORD PTR [ecx+16]
	sub	ecx, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Size$[ebp]
	cmp	ecx, eax
	cmovb	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3412 : 		}

	pop	ebp
	ret	8
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 3030 : 		const size_type _Num = this->_Getal().max_size();
; 3031 : 		return (_Num <= 1 ? 1 : _Num - 1);

	mov	eax, 2147483646				; 7ffffffeH

; 3032 : 		}

	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@c_str

; 3003 : 		return (this->_Myptr());

	mov	eax, DWORD PTR [ecx]

; 3004 : 		}

	ret	0
$LN13@c_str:

; 3003 : 		return (this->_Myptr());

	mov	eax, ecx

; 3004 : 		}

	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 2592 : 		{	// erase elements [_Off, _Off + _Count)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edx, DWORD PTR __Off$[ebp]
	push	ebx
	push	esi

; 2592 : 		{	// erase elements [_Off, _Off + _Count)

	mov	esi, ecx
	push	edi

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edi, DWORD PTR [esi+16]
	cmp	edi, edx
	jb	$LN97@erase

; 2593 : 		_Check_offset(_Off);
; 2594 : 		if (this->_Mysize() - _Off <= _Count)

	mov	ebx, DWORD PTR __Count$[ebp]
	mov	eax, edi
	sub	eax, edx
	cmp	eax, ebx
	ja	SHORT $LN2@erase

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN38@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [eax+edx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN38@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	WORD PTR [eax+edx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2607 : 		}

	pop	ebp
	ret	8
$LN2@erase:

; 2595 : 			{
; 2596 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 2597 : 			}
; 2598 : 		else if (_Count != 0)

	test	ebx, ebx
	je	SHORT $LN94@erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN57@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN58@erase
$LN57@erase:
	mov	eax, esi
$LN58@erase:

; 2599 : 			{	// move elements down
; 2600 : 			value_type *_Ptr = this->_Myptr() + _Off;

	lea	ecx, DWORD PTR [eax+edx*2]

; 2601 : 			size_type _Newsize = this->_Mysize() - _Count;

	sub	edi, ebx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, edi
	sub	eax, edx
	add	eax, eax
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2602 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	lea	eax, DWORD PTR [ecx+ebx*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN87@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN87@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
$LN94@erase:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN97@erase:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN99@erase:
$LN96@erase:
	int	3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 2585 : 		{	// erase elements [_Off, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jb	SHORT $LN36@erase

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN26@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	esi, esi
	mov	WORD PTR [edx+eax*2], si
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2588 : 		return (*this);

	mov	eax, ecx
	pop	esi

; 2589 : 		}

	pop	ebp
	ret	4
$LN26@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	edx, ecx
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	esi, esi
	mov	WORD PTR [edx+eax*2], si
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2588 : 		return (*this);

	mov	eax, ecx
	pop	esi

; 2589 : 		}

	pop	ebp
	ret	4
$LN36@erase:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN38@erase:
$LN35@erase:
	int	3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2428 : 		{	// assign [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2428 : 		{	// assign [_Ptr, <null>)

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	edi, DWORD PTR [eax+2]
$LL6@assign:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL6@assign
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi
	pop	esi

; 2430 : 		}

	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2412 : 		{	// assign [_Ptr, _Ptr + _Count)

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN17@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN18@assign
$LN17@assign:
	mov	edx, esi
$LN18@assign:

; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	mov	edi, DWORD PTR __Ptr$[ebp]
	cmp	edx, edi
	ja	SHORT $LN2@assign
	mov	eax, DWORD PTR [esi+16]
	lea	eax, DWORD PTR [edx+eax*2]
	cmp	edi, eax
	jae	SHORT $LN2@assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN33@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN34@assign
$LN33@assign:
	mov	eax, esi
$LN34@assign:

; 2413 : 		if (_Inside(_Ptr))
; 2414 : 			{
; 2415 : 			return (assign(*this, _Ptr - this->_Myptr(), _Count));	// substring

	push	DWORD PTR __Count$[ebp]
	sub	edi, eax
	mov	ecx, esi
	sar	edi, 1
	push	edi
	push	esi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi
	pop	esi

; 2425 : 		}

	pop	ebp
	ret	8
$LN2@assign:
	push	ebx

; 3573 : 		if (_Newsize == 0)

	mov	ebx, DWORD PTR __Count$[ebp]
	test	ebx, ebx
	jne	SHORT $LN40@assign

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ebx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN53@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	ebx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2424 : 		return (*this);

	mov	eax, esi
	pop	esi

; 2425 : 		}

	pop	ebp
	ret	8
$LN53@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	ebx
	pop	edi
	pop	esi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2425 : 		}

	pop	ebp
	ret	8
$LN40@assign:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	ecx, ebx
	jae	SHORT $LN41@assign

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	ebx
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
$LN41@assign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN81@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN82@assign
$LN81@assign:
	mov	eax, esi
$LN82@assign:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	ecx, DWORD PTR [ebx+ebx]
	push	ecx
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ebx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN102@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+ebx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2424 : 		return (*this);

	mov	eax, esi
	pop	ebx
	pop	edi
	pop	esi

; 2425 : 		}

	pop	ebp
	ret	8
$LN102@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+ebx*2], cx
	pop	ebx
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2425 : 		}

	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2378 : 		{	// assign _Right [_Roff, _Roff + _Count)

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 3630 : 		if (this->_Mysize() < _Off)

	mov	ebx, DWORD PTR __Right$[ebp]
	push	esi

; 2378 : 		{	// assign _Right [_Roff, _Roff + _Count)

	mov	esi, ecx

; 3630 : 		if (this->_Mysize() < _Off)

	mov	ecx, DWORD PTR __Roff$[ebp]
	push	edi
	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, ecx
	jb	$LN161@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	edi, DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	cmp	eax, edi
	cmovb	edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2382 : 		if (this == _STD addressof(_Right))

	cmp	esi, ebx
	jne	SHORT $LN2@assign

; 2383 : 			{	// substring
; 2384 : 			erase(_Roff + _Count);

	lea	eax, DWORD PTR [ecx+edi]

; 3630 : 		if (this->_Mysize() < _Off)

	cmp	DWORD PTR [esi+16], eax
	jb	$LN163@assign

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN62@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN63@assign
$LN62@assign:
	mov	edx, esi
$LN63@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edi, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	push	ecx
	push	edi
	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edx+eax*2], di
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	pop	edi

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN2@assign:

; 3573 : 		if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN72@assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN85@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN85@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN72@assign:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN73@assign

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	mov	ecx, DWORD PTR __Roff$[ebp]
$LN73@assign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ebx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN113@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ebx, DWORD PTR [ebx]
$LN113@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN129@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN130@assign
$LN129@assign:
	mov	edx, esi
$LN130@assign:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [edi+edi]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2389 : 			_Traits::copy(this->_Myptr(), _Right._Myptr() + _Roff, _Count);

	lea	eax, DWORD PTR [ebx+ecx*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN150@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2393 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN150@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN161@assign:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN164@assign:
$LN163@assign:
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN165@assign:
$LN160@assign:
	int	3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2215 : 		{	// destroy the string

	npad	2
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN4@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN4@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2217 : 		}

	ret	0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2122 : 		{	// assign by stealing _Right's buffer, memcpy optimization

	npad	2
	push	ebp
	mov	ebp, esp

; 2123 : 			// pre: this != &_Right
; 2124 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2125 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2126 : 		auto& _Right_data = _Right._Get_data();
; 2127 : 
; 2128 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2129 : 		if (_Right_data._Large_string_engaged())
; 2130 : 			{	// take ownership of _Right's iterators along with its buffer
; 2131 : 			this->_Swap_all(_Right);
; 2132 : 			}
; 2133 : 		else
; 2134 : 			{
; 2135 : 			_Right._Orphan_all();
; 2136 : 			}
; 2137 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2138 : 
; 2139 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2140 : 			+ _Memcpy_move_offset;
; 2141 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2142 : 			+ _Memcpy_move_offset;
; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2145 : 		}

	pop	ebp
	ret	8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Assign_rv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents, COMDAT
; _this$ = ecx

; 2098 : 		{	// assign either as an rvalue or as an lvalue copy, allocators always equal optimization

	npad	2
	push	ebp
	mov	ebp, esp

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2103 : 		}

	pop	ebp
	ret	8
?_Assign_rv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 2075 : 		{	// assign by moving _Right

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	push	edi

; 2076 : 		if (this != _STD addressof(_Right))

	mov	edi, DWORD PTR __Right$[ebp]
	mov	esi, ecx
	cmp	esi, edi
	je	SHORT $LN79@operator

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN8@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN8@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [edi]
	movups	XMMWORD PTR [esi], xmm0
	movq	xmm0, QWORD PTR [edi+16]
	movq	QWORD PTR [esi+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi+16], eax

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edi], ax
$LN79@operator:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2087 : 		return (*this);

	mov	eax, esi
	pop	esi

; 2088 : 		}

	pop	ebp
	ret	4
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2054 : 		{	// construct by moving _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [eax], dx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2056 : 		}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1980 : 		{	// construct from [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1980 : 		{	// construct from [_Ptr, <null>)

	mov	esi, ecx
	push	edi

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, edx
	lea	edi, DWORD PTR [eax+2]
$LL25@basic_stri:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL25@basic_stri
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi

; 1981 : 		_Tidy_init();
; 1982 : 		assign(_Ptr);
; 1983 : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$ = ecx
	ret	0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 343  : 		return (_Myval2);

	mov	eax, ecx

; 344  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 338  : 		return (_Myval2);

	mov	eax, ecx

; 339  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 323  : 		return (*this);

	mov	eax, ecx

; 324  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 318  : 		return (*this);

	mov	eax, ecx

; 319  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres, COMDAT
; _this$ = ecx

; 1849 : 		return (_Get_data()._Myres);

	lea	eax, DWORD PTR [ecx+20]

; 1850 : 		}

	ret	0
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 1844 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1845 : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 1839 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1840 : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 1834 : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 1835 : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 1829 : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 1830 : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 1824 : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 1825 : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 1819 : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 1820 : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 1809 : 		_Get_data()._Orphan_all();
; 1810 : 		}

	ret	0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Move_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Move_alloc, COMDAT
; _this$ = ecx

; 1714 : 		_Pocma(_Getal(), _Al);
; 1715 : 		}

	ret	4
?_Move_alloc@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Move_alloc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1697 : 		}

	mov	eax, ecx

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 1697 : 		}

	ret	0
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Myptr

; 1690 : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 1691 : 		}

	ret	0
$LN11@Myptr:

; 1690 : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 1691 : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Myptr

; 1685 : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 1686 : 		}

	ret	0
$LN11@Myptr:

; 1685 : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 1686 : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1639 : 			}

	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1634 : 			{	// user-provided, for fancy pointers
; 1635 : 			}

	mov	eax, ecx
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1627 : 		{	// returns whether the large string mode (allocated memory) is engaged

	cmp	DWORD PTR [ecx+20], 8
	setae	al

; 1628 : 		return (this->_BUF_SIZE <= _Myres);
; 1629 : 		}

	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 1622 : 			? _Unfancy(_Bx._Ptr)
; 1623 : 			: _Bx._Buf);
; 1624 : 		}

	ret	0
$LN3@Myptr:

; 1621 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 1622 : 			? _Unfancy(_Bx._Ptr)
; 1623 : 			: _Bx._Buf);
; 1624 : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 1615 : 			? _Unfancy(_Bx._Ptr)
; 1616 : 			: _Bx._Buf);
; 1617 : 		}

	ret	0
$LN3@Myptr:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 1615 : 			? _Unfancy(_Bx._Ptr)
; 1616 : 			: _Bx._Buf);
; 1617 : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1598 : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1108 : 		return (_Mytraits::max_size(*this));

	mov	eax, 2147483647				; 7fffffffH

; 1109 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??4?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEAAU01@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??4?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEAAU01@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::operator=, COMDAT
; _this$ = ecx

; 1064 : 		_Mybase::operator=(_STD move(_Right));
; 1065 : 		return (*this);

	mov	eax, ecx

; 1066 : 		}

	ret	4
??4?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEAAU01@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1048 : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1038 : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 970  : 		return (_Al.max_size());

	mov	eax, 2147483647				; 7fffffffH

; 971  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 851  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 2147483647				; 7fffffffH

; 852  : 		}

	ret	0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 807  : 		{	// construct by copying (do nothing)
; 808  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 803  : 		{	// construct default allocator (do nothing)
; 804  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 96   : 	{	// deallocate storage for _Count elements of size _Sz

	npad	2
	push	ebp
	mov	ebp, esp

; 97   :  #if defined(_M_IX86) || defined(_M_X64)
; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	or	eax, -1
	mov	ecx, DWORD PTR __Count$[ebp]
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	ecx, eax
	jbe	SHORT $LN2@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:

; 99   : 	const size_t _User_size = _Count * _Sz;

	imul	ecx, DWORD PTR __Sz$[ebp]

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN9@Deallocate

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	eax, DWORD PTR __Ptr$[ebp]
	test	al, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR [eax-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	ecx, eax
	jb	SHORT $LN5@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN6@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:

; 126  : 			<= _Ptr_user - _Ptr_container);
; 127  :  #endif /* _DEBUG */
; 128  : 
; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN3@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 	}

	pop	ebp
	ret	0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 50   : 	{	// allocate storage for _Count elements of size _Sz

	npad	2
	push	ebp
	mov	ebp, esp

; 51   : 	void *_Ptr = 0;
; 52   : 
; 53   : 	if (_Count == 0)

	mov	ecx, DWORD PTR __Count$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@Allocate

; 54   : 		return (_Ptr);

	xor	eax, eax
$LN1@Allocate:

; 89   : 		}
; 90   : 	return (_Ptr);
; 91   : 	}

	pop	ebp
	ret	0
$LN2@Allocate:

; 55   : 
; 56   : 	// check overflow of multiply
; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN3@Allocate

; 58   : 		_Xbad_alloc();	// report no memory

	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	imul	ecx, DWORD PTR __Sz$[ebp]

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	BYTE PTR __Try_aligned_allocation$[ebp], 0
	je	SHORT $LN4@Allocate
	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN4@Allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	eax, DWORD PTR [ecx+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	eax, ecx
	ja	SHORT $LN6@Allocate

; 69   : 			_Xbad_alloc();	// report no memory

	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	eax
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN7@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 89   : 		}
; 90   : 	return (_Ptr);
; 91   : 	}

	pop	ebp
	ret	0
$LN4@Allocate:

; 76   : 
; 77   :  #ifdef _DEBUG
; 78   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 79   :  #endif /* _DEBUG */
; 80   : 		}
; 81   : 	else
; 82   :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 83   : 	static_cast<void>(_Try_aligned_allocation);
; 84   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 85   : 
; 86   : 		{	// allocate normal block
; 87   : 		_Ptr = ::operator new(_User_size);

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN1@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 75   : 		}

	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z PROC	; std::_Container_base0::_Swap_all, COMDAT
; _this$ = ecx

; 68   : 		}

	ret	4
?_Swap_all@_Container_base0@std@@QAEXAAU12@@Z ENDP	; std::_Container_base0::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 64   : 		}

	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 325  : 		{	// assign an element

	npad	2
	push	ebp
	mov	ebp, esp

; 326  : 		_Left = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	cx, WORD PTR [eax]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	WORD PTR [eax], cx

; 327  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT

; 314  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, eax
	mov	DWORD PTR __Count$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 316  : 		}

	pop	ebp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	jmp	DWORD PTR __imp__memmove
?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT

; 294  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, eax
	push	eax
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 296  : 		}

	pop	ebp
	ret	0
?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?length@?$char_traits@_W@std@@SAIQB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIQB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 288  : 		{	// find length of null-terminated sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [eax+2]
	npad	5
$LL3@length:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL3@length
	sub	eax, edx
	sar	eax, 1

; 290  : 		}

	pop	ebp
	ret	0
?length@?$char_traits@_W@std@@SAIQB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 91   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 92   :         (void)_Size;
; 93   :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 94   :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT

; 244  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __N$[ebp]
	add	eax, eax
	mov	DWORD PTR __N$[ebp], eax

; 248  :         #pragma warning(pop)
; 249  :     }

	pop	ebp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	jmp	DWORD PTR __imp__memmove
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 231  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __N$[ebp]
	add	eax, eax
	mov	DWORD PTR __N$[ebp], eax

; 235  :         #pragma warning(pop)
; 236  :     }

	pop	ebp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	jmp	_memcpy
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
;	COMDAT ?wcsstr@@YAPA_WPA_WPB_W@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?wcsstr@@YAPA_WPA_WPB_W@Z PROC				; wcsstr, COMDAT

; 552  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 554  :     }

	pop	ebp

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	jmp	DWORD PTR __imp__wcsstr
?wcsstr@@YAPA_WPA_WPB_W@Z ENDP				; wcsstr
_TEXT	ENDS
END
