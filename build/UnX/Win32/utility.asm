; Listing generated by Microsoft (R) Optimizing Compiler Version 19.10.25019.0 

	TITLE	C:\Users\andon\Source\Repos\SpecialK\src\utility.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	_IID_IInternalConnection
PUBLIC	?chDirSep@ATL@@3_WB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3_WB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3_WB			; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3_WB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3_WB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QB_WB			; ATL::szStringVal
PUBLIC	?multiszStringVal@ATL@@3QB_WB			; ATL::multiszStringVal
PUBLIC	?szDwordVal@ATL@@3QB_WB				; ATL::szDwordVal
PUBLIC	?szBinaryVal@ATL@@3QB_WB			; ATL::szBinaryVal
PUBLIC	?szValToken@ATL@@3QB_WB				; ATL::szValToken
PUBLIC	?szForceRemove@ATL@@3QB_WB			; ATL::szForceRemove
PUBLIC	?szNoRemove@ATL@@3QB_WB				; ATL::szNoRemove
PUBLIC	?szDelete@ATL@@3QB_WB				; ATL::szDelete
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	?__SK_base_img_addr@@3PAXA			; __SK_base_img_addr
PUBLIC	?__SK_end_img_addr@@3PAXA			; __SK_end_img_addr
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	_LIBID_ATLLib
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?__SK_RunDLL_Bypass@@3_NA			; __SK_RunDLL_Bypass
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
_BSS	SEGMENT
?__SK_base_img_addr@@3PAXA DD 01H DUP (?)		; __SK_base_img_addr
?__SK_end_img_addr@@3PAXA DD 01H DUP (?)		; __SK_end_img_addr
?_tableInitialized@@3_NA DB 01H DUP (?)			; _tableInitialized
	ALIGN	4

?append_func@@3P6AIIPBXI@ZA DD 01H DUP (?)		; append_func
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
_BSS	SEGMENT
?__SK_RunDLL_Bypass@@3_NA DB 01H DUP (?)		; __SK_RunDLL_Bypass
_BSS	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QB_WB
CONST	SEGMENT
?szDelete@ATL@@3QB_WB DD FLAT:$SG180368			; ATL::szDelete
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QB_WB
CONST	SEGMENT
?szNoRemove@ATL@@3QB_WB DD FLAT:$SG180366		; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QB_WB
CONST	SEGMENT
?szForceRemove@ATL@@3QB_WB DD FLAT:$SG180364		; ATL::szForceRemove
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QB_WB
CONST	SEGMENT
?szValToken@ATL@@3QB_WB DD FLAT:$SG180362		; ATL::szValToken
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QB_WB
CONST	SEGMENT
?szBinaryVal@ATL@@3QB_WB DD FLAT:$SG180360		; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QB_WB
CONST	SEGMENT
?szDwordVal@ATL@@3QB_WB DD FLAT:$SG180358		; ATL::szDwordVal
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QB_WB
CONST	SEGMENT
?multiszStringVal@ATL@@3QB_WB DD FLAT:$SG180356		; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QB_WB
CONST	SEGMENT
?szStringVal@ATL@@3QB_WB DD FLAT:$SG180354		; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3_WB
CONST	SEGMENT
?chEquals@ATL@@3_WB DW 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3_WB
CONST	SEGMENT
?chQuote@ATL@@3_WB DW 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3_WB
CONST	SEGMENT
?chLeftBracket@ATL@@3_WB DW 07bH			; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3_WB
CONST	SEGMENT
?chRightBracket@ATL@@3_WB DW 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3_WB
CONST	SEGMENT
?chDirSep@ATL@@3_WB DW 05cH				; ATL::chDirSep
CONST	ENDS
_DATA	SEGMENT
?crc32_tab@@3PAIA DD 00H				; crc32_tab
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
CONST	SEGMENT
$SG183322 DB	'S', 00H, 'K', 00H, 'I', 00H, 00H, 00H
$SG171043 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 00H, 00H
$SG299087 DB	'\', 00H, 00H, 00H
$SG299091 DB	'\', 00H, 00H, 00H
$SG299089 DB	'[', 00H, 'C', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'n', 00H
	DB	' ', 00H, 'M', 00H, 'g', 00H, 'r', 00H, '.', 00H, ']', 00H, ' '
	DB	00H, 'C', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 'n', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p'
	DB	00H, 'o', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 'y', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 'n', 00H, ' ', 00H, '''', 00H, '%', 00H, 's', 00H, '''', 00H
	DB	'.', 00H, '.', 00H, '.', 00H, ' ', 00H, ' ', 00H, ' ', 00H, ' '
	DB	00H, 00H, 00H
?piecewise_construct@std@@3Upiecewise_construct_t@1@B	ORG $+1 ; std::piecewise_construct
	ORG $+1
$SG171090 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'Q', 00H, 'I', 00H, 00H, 00H
	ORG $+2
$SG299093 DB	'%', 00H, 'z', 00H, 'u', 00H, ' ', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, ' ', 00H, 'd', 00H, 'e', 00H, 'l'
	DB	00H, 'e', 00H, 't', 00H, 'e', 00H, 'd', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG185432 DB	'R', 00H, 'T', 00H, 'S', 00H, 'S', 00H, '.', 00H, 'e', 00H
	DB	'x', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG299097 DB	' ', 00H, 00H, 00H
$SG185434 DB	'R', 00H, 'T', 00H, 'S', 00H, 'S', 00H, '.', 00H, 'e', 00H
	DB	'x', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG185435 DB	'R', 00H, 'T', 00H, 'S', 00H, 'S', 00H, '.', 00H, 'e', 00H
	DB	'x', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG299105 DB	' ', 00H, 00H, 00H
$SG171137 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 00H, 00H
$SG299138 DB	'S', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 's', 00H, 't', 00H
	DB	'o', 00H, 'r', 00H, 'e', 00H, 'P', 00H, 'r', 00H, 'i', 00H, 'v'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG180354 DB	'S', 00H, 00H, 00H
$SG299139 DB	'S', 00H, 'e', 00H, 'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'u', 00H, 'p', 00H, 'P', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'i'
	DB	00H, 'l', 00H, 'e', 00H, 'g', 00H, 'e', 00H, 00H, 00H
$SG180356 DB	'M', 00H, 00H, 00H
$SG180358 DB	'D', 00H, 00H, 00H
$SG180360 DB	'B', 00H, 00H, 00H
$SG180362 DB	'V', 00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG180364 DB	'F', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG180366 DB	'N', 00H, 'o', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG299152 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG180368 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG299153 DB	'%', 00H, 's', 00H, '.', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG299154 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG299155 DB	'%', 00H, 's', 00H, '.', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG299156 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG299157 DB	'%', 00H, 's', 00H, '.', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG171184 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG171231 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG299192 DB	'C', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'A', 00H, 'u', 00H, 't', 00H, 'o', 00H, 'm', 00H, 'a'
	DB	00H, 't', 00H, 'i', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'y', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 's', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 't', 00H, ' ', 00H, 'G', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, ' ', 00H, 'B', 00H, 'e', 00H, 'c', 00H, 'a', 00H, 'u'
	DB	00H, 's', 00H, 'e', 00H, ' ', 00H, 'o', 00H, 'f', 00H, ' ', 00H
	DB	'B', 00H, 'a', 00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l'
	DB	00H, 'e', 00H, ' ', 00H, 's', 00H, 'y', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'm', 00H, ' ', 00H, 'P', 00H, 'o', 00H, 'l', 00H, 'i'
	DB	00H, 'c', 00H, 'y', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG293134 DB	'd', 00H, '3', 00H, 'd', 00H, '9', 00H, 00H, 00H
	ORG $+2
$SG299193 DB	'Y', 00H, 'o', 00H, 'u', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'm', 00H, 'i', 00H
	DB	's', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ';', 00H, ' ', 00H
	DB	'p', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'D', 00H, 'O', 00H, 'S', 00H, ' ', 00H, '8', 00H, '.'
	DB	00H, '3', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'g', 00H, 'e'
	DB	00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, '.', 00H, 0dH, 00H, 0aH, 00H, 0dH, 00H, 0aH
	DB	00H, 09H, 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'p', 00H
	DB	'r', 00H, 'o', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	'n', 00H, '-', 00H, 'b', 00H, 'o', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 's', 00H
	DB	',', 00H, ' ', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'd', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'y', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, ' ', 00H, 'g', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'h', 00H, 'a'
	DB	00H, 's', 00H, ' ', 00H, '8', 00H, '.', 00H, '3', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'-', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H
	DB	'm', 00H, 'o', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG299195 DB	'\', 00H, 'M', 00H, 'y', 00H, ' ', 00H, 'M', 00H, 'o', 00H
	DB	'd', 00H, 's', 00H, '\', 00H, 'S', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 'i', 00H, 'a', 00H, 'l', 00H, 'K', 00H, '\', 00H, 'S', 00H
	DB	'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'K'
	DB	00H, 00H, 00H
	ORG $+2
$SG299196 DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H
	DB	00H, 00H
	ORG $+2
$SG171278 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r'
	DB	00H, 'o', 00H, 'l', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG299199 DB	'R', 00H, 'u', 00H, 'n', 00H, 'D', 00H, 'l', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ',', 00H, 'R', 00H, 'u', 00H, 'n', 00H
	DB	'D', 00H, 'L', 00H, 'L', 00H, '_', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, 'G', 00H, 'a', 00H
	DB	'm', 00H, 'e', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG293137 DB	'd', 00H, 'x', 00H, 'g', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG299222 DB	'C', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'o', 00H, 't', 00H
	DB	' ', 00H, 'E', 00H, 'l', 00H, 'e', 00H, 'v', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'A', 00H
	DB	'd', 00H, 'm', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'B', 00H, 'e'
	DB	00H, 'c', 00H, 'a', 00H, 'u', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	'o', 00H, 'f', 00H, ' ', 00H, 'B', 00H, 'a', 00H, 'd', 00H, ' '
	DB	00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 's', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'e', 00H, 'm', 00H, ' ', 00H, 'P'
	DB	00H, 'o', 00H, 'l', 00H, 'i', 00H, 'c', 00H, 'y', 00H, '.', 00H
	DB	00H, 00H
	ORG $+2
$SG299223 DB	'Y', 00H, 'o', 00H, 'u', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'm', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'm', 00H, 'i', 00H
	DB	's', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 'f', 00H, 'i', 00H, 'g'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 'd', 00H, ';', 00H, ' ', 00H
	DB	'p', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's', 00H, 'e', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'D', 00H, 'O', 00H, 'S', 00H, ' ', 00H, '8', 00H, '.'
	DB	00H, '3', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'g', 00H, 'e'
	DB	00H, 'n', 00H, 'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, '.', 00H, 0dH, 00H, 0aH, 00H, 0dH, 00H, 0aH
	DB	00H, 09H, 00H, 'T', 00H, 'h', 00H, 'i', 00H, 's', 00H, ' ', 00H
	DB	'i', 00H, 's', 00H, ' ', 00H, 'a', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'm', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'p', 00H
	DB	'r', 00H, 'o', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 'm', 00H, ' '
	DB	00H, 'f', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'n', 00H, 'o', 00H
	DB	'n', 00H, '-', 00H, 'b', 00H, 'o', 00H, 'o', 00H, 't', 00H, ' '
	DB	00H, 'd', 00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 's', 00H
	DB	',', 00H, ' ', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'a', 00H, 's'
	DB	00H, 'e', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 's', 00H, 'u', 00H
	DB	'r', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't'
	DB	00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H, 'd', 00H
	DB	'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, ' ', 00H, 'y', 00H, 'o'
	DB	00H, 'u', 00H, 'r', 00H, ' ', 00H, 'g', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, ' ', 00H, 'i', 00H, 's', 00H, ' ', 00H, 'i', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'h', 00H, 'a'
	DB	00H, 's', 00H, ' ', 00H, '8', 00H, '.', 00H, '3', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 'n', 00H, 'e', 00H
	DB	'r', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' '
	DB	00H, 'e', 00H, 'n', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 'a', 00H, 'n', 00H, 'd', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'-', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'e', 00H, ' ', 00H
	DB	'm', 00H, 'o', 00H, 'd', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG293139 DB	'O', 00H, 'p', 00H, 'e', 00H, 'n', 00H, 'G', 00H, 'L', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG299224 DB	'R', 00H, 'u', 00H, 'n', 00H, 'D', 00H, 'l', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'e', 00H, 'x', 00H, 'e', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ',', 00H, 'R', 00H, 'u', 00H, 'n', 00H
	DB	'D', 00H, 'L', 00H, 'L', 00H, '_', 00H, 'E', 00H, 'l', 00H, 'e'
	DB	00H, 'v', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'M', 00H, 'e', 00H
	DB	' ', 00H, '%', 00H, 's', 00H, 00H, 00H
$SG171325 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG171372 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'D', 00H, 'B', 00H, 'C', 00H, 'l', 00H, 'i'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG171419 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'D', 00H, 'B', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG171466 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i'
	DB	00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG171513 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'I', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, 00H, 00H
$SG171560 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG171607 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG298584 DB	'[', 00H, 'I', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H
	DB	't', 00H, ' ', 00H, 'T', 00H, 'b', 00H, 'l', 00H, ']', 00H, ' '
	DB	00H, 'A', 00H, 'c', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	' ', 00H, 'V', 00H, 'i', 00H, 'o', 00H, 'l', 00H, 'a', 00H, 't'
	DB	00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'A', 00H, 't', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'p', 00H, 't', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'W', 00H
	DB	'a', 00H, 'l', 00H, 'k', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'p'
	DB	00H, 'o', 00H, 'r', 00H, 't', 00H, ' ', 00H, 'T', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, '.', 00H, 00H, 00H
	ORG $+2
$SG298600 DB	'OpenGL32.dll', 00H
	ORG $+3
$SG298601 DB	'vulkan-1.dll', 00H
	ORG $+3
$SG298602 DB	'd3d9.dll', 00H
	ORG $+3
$SG298603 DB	'd3d11.dll', 00H
	ORG $+2
$SG298604 DB	'd3d8.dll', 00H
	ORG $+3
$SG298605 DB	'ddraw.dll', 00H
	ORG $+2
$SG298606 DB	'glide.dll', 00H
	ORG $+2
$SG171654 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG298671 DB	'\', 00H, 00H, 00H
$SG298674 DB	'\', 00H, 'V', 00H, 'a', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '\'
	DB	00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'l', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG298675 DB	'\', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '\', 00H, '%', 00H, '0', 00H, '4', 00H
	DB	'x', 00H, '%', 00H, '0', 00H, '4', 00H, 'x', 00H, '\', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'c', 00H, 't', 00H
	DB	'N', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG298676 DB	'S', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'a', 00H
	DB	'l', 00H, ' ', 00H, 'K', 00H, 00H, 00H
$SG171701 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e'
	DB	00H, 00H, 00H
$SG298710 DB	'N', 00H, '/', 00H, 'A', 00H, 00H, 00H
$SG298712 DB	'\', 00H, 'V', 00H, 'a', 00H, 'r', 00H, 'F', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '\'
	DB	00H, 'T', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 's', 00H, 'l', 00H
	DB	'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG298713 DB	'\', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '\', 00H, '%', 00H, '0', 00H, '4', 00H
	DB	'x', 00H, '%', 00H, '0', 00H, '4', 00H, 'x', 00H, '\', 00H, 'F'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'D', 00H, 'e', 00H, 's', 00H
	DB	'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG298718 DB	00H, 00H
	ORG $+2
$SG298714 DB	'\', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'I', 00H, 'n'
	DB	00H, 'f', 00H, 'o', 00H, '\', 00H, '%', 00H, '0', 00H, '4', 00H
	DB	'x', 00H, '%', 00H, '0', 00H, '4', 00H, 'x', 00H, '\', 00H, 'F'
	DB	00H, 'i', 00H, 'l', 00H, 'e', 00H, 'V', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG298717 DB	' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG298720 DB	' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG171748 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c'
	DB	00H, 'i', 00H, 'l', 00H, 00H, 00H
$SG171795 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG181044 DB	'A', 00H, 'p', 00H, 'p', 00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG298781 DB	'[', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'g', 00H, ' ', 00H
	DB	'S', 00H, 'c', 00H, 'a', 00H, 'n', 00H, ' ', 00H, ']', 00H, ' '
	DB	00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ' ', 00H, 'w'
	DB	00H, 'a', 00H, 'l', 00H, 'k', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'i', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	' ', 00H, 'a', 00H, 'd', 00H, 'd', 00H, 'r', 00H, '.', 00H, ' '
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, '-', 00H, 'o', 00H, 'f', 00H
	DB	'-', 00H, 'r', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H, ':'
	DB	00H, ' ', 00H, '%', 00H, 'p', 00H, 'h', 00H, 00H, 00H
$SG181045 DB	'C', 00H, 'L', 00H, 'S', 00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG298782 DB	'[', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'g', 00H, ' ', 00H
	DB	'S', 00H, 'c', 00H, 'a', 00H, 'n', 00H, ' ', 00H, ']', 00H, ' '
	DB	00H, ' ', 00H, '>', 00H, '>', 00H, ' ', 00H, 'R', 00H, 'e', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'c', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'%', 00H, 'p', 00H, 'h', 00H, 00H, 00H
$SG181046 DB	'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'n', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG181047 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG181048 DB	'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'f', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG181049 DB	'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG181050 DB	'M', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG181051 DB	'S', 00H, 'A', 00H, 'M', 00H, 00H, 00H
$SG181052 DB	'S', 00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H
	DB	'T', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG181053 DB	'S', 00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H
	DB	00H, 00H
	ORG $+2
$SG181054 DB	'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG181055 DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 'L', 00H, 'i', 00H
	DB	'b', 00H, 00H, 00H
$SG171842 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG171847 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'U', 00H, 't', 00H, 'i', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG299848 DB	'S', 00H, 'K', 00H, 'I', 00H, 'M', 00H, 00H, 00H
	ORG $+2
$SG299849 DB	'R', 00H, 'u', 00H, 'n', 00H, 'D', 00H, 'L', 00H, 'L', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG171894 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG183176 DB	'(', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG183189 DB	'(', 00H, 'n', 00H, 'u', 00H, 'l', 00H, 'l', 00H, ')', 00H
	DB	00H, 00H
	ORG $+2
$SG171941 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+2
$SG171988 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'I', 00H, 'S', 00H, 'A', 00H, 'P', 00H, 'I'
	DB	00H, 00H, 00H
$SG170972 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG298974 DB	'S', 00H, 'K', 00H, 'I', 00H, 'M', 00H, 00H, 00H
	ORG $+2
$SG298982 DB	'R', 00H, 'u', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, 00H, 00H
	ORG $+2
$SG298985 DB	'R', 00H, 'u', 00H, 'n', 00H, 'D', 00H, 'L', 00H, 'L', 00H
	DB	'_', 00H, 00H, 00H
$SG299006 DB	'\', 00H, 'S', 00H, 'p', 00H, 'e', 00H, 'c', 00H, 'i', 00H
	DB	'a', 00H, 'l', 00H, 'K', 00H, '.', 00H, 'd', 00H, 'e', 00H, 'n'
	DB	00H, 'y', 00H, '.', 00H, 00H, 00H
$SG183294 DB	'O', 00H, 'U', 00H, 'T', 00H, '_', 00H, 'O', 00H, 'F', 00H
	DB	'_', 00H, 'M', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'R', 00H, 'Y'
	DB	00H, 00H, 00H
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
PUBLIC	?__empty_global_delete@@YAXPAX@Z		; __empty_global_delete
PUBLIC	?__empty_global_delete@@YAXPAXI@Z		; __empty_global_delete
PUBLIC	?wcsrchr@@YAPA_WPA_W_W@Z			; wcsrchr
PUBLIC	?wcsstr@@YAPA_WPA_WPB_W@Z			; wcsstr
PUBLIC	?strstr@@YAPADQADQBD@Z				; strstr
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	?_InterlockedCompareExchange@@YAKPCKKK@Z	; _InterlockedCompareExchange
PUBLIC	??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ ; __vcrt_va_start_verify_argument_type<wchar_t const * const>
PUBLIC	_wmemcpy
PUBLIC	_wmemmove
PUBLIC	_wmemset
PUBLIC	?max@?$numeric_limits@I@std@@SAIXZ		; std::numeric_limits<unsigned int>::max
PUBLIC	??2@YAPAXIPAX@Z					; operator new
PUBLIC	?length@?$char_traits@_W@std@@SAIQB_W@Z		; std::char_traits<wchar_t>::length
PUBLIC	?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::char_traits<wchar_t>::copy
PUBLIC	?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z	; std::char_traits<wchar_t>::move
PUBLIC	?assign@?$char_traits@_W@std@@SAPA_WQA_WI_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z	; std::char_traits<wchar_t>::assign
PUBLIC	?compare@?$char_traits@D@std@@SAHQBD0I@Z	; std::char_traits<char>::compare
PUBLIC	?length@?$char_traits@D@std@@SAIQBD@Z		; std::char_traits<char>::length
PUBLIC	?copy@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::copy
PUBLIC	?move@?$char_traits@D@std@@SAPADQADQBDI@Z	; std::char_traits<char>::move
PUBLIC	?assign@?$char_traits@D@std@@SAPADQADID@Z	; std::char_traits<char>::assign
PUBLIC	?assign@?$char_traits@D@std@@SAXAADABD@Z	; std::char_traits<char>::assign
PUBLIC	?_Orphan_all@_Container_base0@std@@QAEXXZ	; std::_Container_base0::_Orphan_all
PUBLIC	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z		; std::_Iterator_base0::_Adopt
PUBLIC	??0_Container_proxy@std@@QAE@XZ			; std::_Container_proxy::_Container_proxy
PUBLIC	??0_Container_base12@std@@QAE@XZ		; std::_Container_base12::_Container_base12
PUBLIC	??1_Container_base12@std@@QAE@XZ		; std::_Container_base12::~_Container_base12
PUBLIC	?_Orphan_all@_Container_base12@std@@QAEXXZ	; std::_Container_base12::_Orphan_all
PUBLIC	?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z	; std::_Container_base12::_Swap_all
PUBLIC	??0_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::_Iterator_base12
PUBLIC	??1_Iterator_base12@std@@QAE@XZ			; std::_Iterator_base12::~_Iterator_base12
PUBLIC	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt
PUBLIC	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont
PUBLIC	?_Allocate@std@@YAPAXII_N@Z			; std::_Allocate
PUBLIC	?_Deallocate@std@@YAXPAXII@Z			; std::_Deallocate
PUBLIC	??0?$allocator@D@std@@QAE@XZ			; std::allocator<char>::allocator<char>
PUBLIC	??0?$allocator@D@std@@QAE@ABV01@@Z		; std::allocator<char>::allocator<char>
PUBLIC	?deallocate@?$allocator@D@std@@QAEXPADI@Z	; std::allocator<char>::deallocate
PUBLIC	?allocate@?$allocator@D@std@@QAEPADI@Z		; std::allocator<char>::allocate
PUBLIC	?max_size@?$allocator@D@std@@QBEIXZ		; std::allocator<char>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char> >::max_size
PUBLIC	?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z ; std::_Wrap_alloc<std::allocator<char> >::address
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<char> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
PUBLIC	??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
PUBLIC	?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
PUBLIC	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
PUBLIC	?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
PUBLIC	?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
PUBLIC	?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
PUBLIC	?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
PUBLIC	?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
PUBLIC	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
PUBLIC	?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
PUBLIC	?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
PUBLIC	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
PUBLIC	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
PUBLIC	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
PUBLIC	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
PUBLIC	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
PUBLIC	?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
PUBLIC	?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
PUBLIC	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
PUBLIC	??0?$allocator@_W@std@@QAE@XZ			; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	??0?$allocator@_W@std@@QAE@ABV01@@Z		; std::allocator<wchar_t>::allocator<wchar_t>
PUBLIC	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z	; std::allocator<wchar_t>::deallocate
PUBLIC	?allocate@?$allocator@_W@std@@QAEPA_WI@Z	; std::allocator<wchar_t>::allocate
PUBLIC	?max_size@?$allocator@_W@std@@QBEIXZ		; std::allocator<wchar_t>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t> >::max_size
PUBLIC	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
PUBLIC	?address@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEPA_WAA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::address
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
PUBLIC	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
PUBLIC	?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
PUBLIC	??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
PUBLIC	??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
PUBLIC	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
PUBLIC	?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
PUBLIC	??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
PUBLIC	?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
PUBLIC	?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
PUBLIC	??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents_with_alloc_always_equal
PUBLIC	?_Assign_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_lv_contents
PUBLIC	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
PUBLIC	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
PUBLIC	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
PUBLIC	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
PUBLIC	?data@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPA_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::data
PUBLIC	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
PUBLIC	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
PUBLIC	?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::resize
PUBLIC	?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::resize
PUBLIC	?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
PUBLIC	?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
PUBLIC	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
PUBLIC	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
PUBLIC	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
PUBLIC	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
PUBLIC	?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
PUBLIC	?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
PUBLIC	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
PUBLIC	?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
PUBLIC	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
PUBLIC	?SK_GetHostApp@@YAPB_WXZ			; SK_GetHostApp
PUBLIC	?SK_GetHostPath@@YAPB_WXZ			; SK_GetHostPath
PUBLIC	?SK_GetBlacklistFilename@@YAPB_WXZ		; SK_GetBlacklistFilename
PUBLIC	?SK_GetDocumentsDir@@YA_NPA_WPAI@Z		; SK_GetDocumentsDir
PUBLIC	?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_GetDocumentsDir
PUBLIC	?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_GetFontsDir
PUBLIC	?SK_GetRTSSInstallDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_GetRTSSInstallDir
PUBLIC	?SK_CreateDirectories@@YG_NPB_W@Z		; SK_CreateDirectories
PUBLIC	?SK_DeleteTemporaryFiles@@YAIPB_W0@Z		; SK_DeleteTemporaryFiles
PUBLIC	?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; SK_EvalEnvironmentVars
PUBLIC	?SK_GetUserProfileDir@@YA_NPA_WPAI@Z		; SK_GetUserProfileDir
PUBLIC	?SK_IsTrue@@YA_NPB_W@Z				; SK_IsTrue
PUBLIC	?SK_IsAdmin@@YA_NXZ				; SK_IsAdmin
PUBLIC	?SK_ElevateToAdmin@@YAXXZ			; SK_ElevateToAdmin
PUBLIC	?SK_RestartGame@@YAXPB_W@Z			; SK_RestartGame
PUBLIC	?SK_MessageBox@@YAHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0I@Z ; SK_MessageBox
PUBLIC	?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ; SK_WideCharToUTF8
PUBLIC	?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ; SK_UTF8ToWideChar
PUBLIC	?SK_FormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBDZZ ; SK_FormatString
PUBLIC	?SK_FormatStringW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QB_WZZ ; SK_FormatStringW
PUBLIC	?SK_StripTrailingSlashesW@@YAXPA_W@Z		; SK_StripTrailingSlashesW
PUBLIC	?SK_FixSlashesW@@YAXPA_W@Z			; SK_FixSlashesW
PUBLIC	?SK_StripTrailingSlashesA@@YAXPAD@Z		; SK_StripTrailingSlashesA
PUBLIC	?SK_FixSlashesA@@YAXPAD@Z			; SK_FixSlashesA
PUBLIC	?SK_SetNormalFileAttribs@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; SK_SetNormalFileAttribs
PUBLIC	?SK_MoveFileNoFail@@YAXPB_W0@Z			; SK_MoveFileNoFail
PUBLIC	?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z ; SK_FullCopy
PUBLIC	?SK_GetSystemDirectory@@YAPB_WXZ		; SK_GetSystemDirectory
PUBLIC	?SK_GetDLLConfig@@YAPAUiSK_INI@@XZ		; SK_GetDLLConfig
PUBLIC	?SK_GetCallingDLL@@YAPAUHINSTANCE__@@PAX@Z	; SK_GetCallingDLL
PUBLIC	?SK_GetCallerName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAX@Z ; SK_GetCallerName
PUBLIC	?SK_GetModuleName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ; SK_GetModuleName
PUBLIC	?SK_GetModuleFullName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ; SK_GetModuleFullName
PUBLIC	?SK_StripUserNameFromPathA@@YA_NPAD@Z		; SK_StripUserNameFromPathA
PUBLIC	?SK_StripUserNameFromPathW@@YA_NPA_W@Z		; SK_StripUserNameFromPathW
PUBLIC	?SK_GetProcAddress@@YAPAXPB_WPBD@Z		; SK_GetProcAddress
PUBLIC	?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ; SK_GetDLLVersionStr
PUBLIC	?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ ; SK_SuspendAllOtherThreads
PUBLIC	?SK_ResumeThreads@@YAXV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@@Z ; SK_ResumeThreads
PUBLIC	?SK_IsRunDLLInvocation@@YA_NXZ			; SK_IsRunDLLInvocation
PUBLIC	?SK_IsSuperSpecialK@@YA_NXZ			; SK_IsSuperSpecialK
PUBLIC	??0SK_HostAppUtil@@QAE@XZ			; SK_HostAppUtil::SK_HostAppUtil
PUBLIC	?SK_IsDLLSpecialK@@YG_NPB_W@Z			; SK_IsDLLSpecialK
PUBLIC	?SK_SelfDestruct@@YGXXZ				; SK_SelfDestruct
PUBLIC	?SK_TestImports@@YGXPAUHINSTANCE__@@PAUsk_import_test_s@@H@Z ; SK_TestImports
PUBLIC	?SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z ; SK_TestRenderImports
PUBLIC	?SK_GetFileSize@@YG_KPB_W@Z			; SK_GetFileSize
PUBLIC	?SK_GetFileCRC32@@YGIPB_WP6GX_K1@Z@Z		; SK_GetFileCRC32
PUBLIC	?SK_GetFileCRC32C@@YGIPB_WP6GX_K1@Z@Z		; SK_GetFileCRC32C
PUBLIC	?SK_Path_wcsrchr@@YAPB_WPB_W_W@Z		; SK_Path_wcsrchr
PUBLIC	?SK_Path_wcsstr@@YAPB_WPB_W0@Z			; SK_Path_wcsstr
PUBLIC	?SK_Path_wcsicmp@@YAHPB_W0@Z			; SK_Path_wcsicmp
PUBLIC	?SK_RemoveTrailingDecimalZeros@@YAIPA_WI@Z	; SK_RemoveTrailingDecimalZeros
PUBLIC	?SK_RemoveTrailingDecimalZeros@@YAIPADI@Z	; SK_RemoveTrailingDecimalZeros
PUBLIC	?SK_Scan@@YGPAXPBXI0@Z				; SK_Scan
PUBLIC	?SK_ScanAligned@@YGPAXPBXI0H@Z			; SK_ScanAligned
PUBLIC	?SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z		; SK_ScanAlignedEx
PUBLIC	?SK_InjectMemory@@YGHPAX0IK0@Z			; SK_InjectMemory
PUBLIC	_crc32
PUBLIC	_crc32c
PUBLIC	___crc32_init
PUBLIC	_crc32c_append_sw
PUBLIC	_crc32c_append_hw
PUBLIC	_crc32c_hw_available
PUBLIC	?SK_IsHostAppSKIM@@YA_NXZ			; SK_IsHostAppSKIM
PUBLIC	??$AtlMultiply@I@ATL@@YAJPAIII@Z		; ATL::AtlMultiply<unsigned int>
PUBLIC	?Allocate@CCRTAllocator@ATL@@SAPAXI@Z		; ATL::CCRTAllocator::Allocate
PUBLIC	?Free@CCRTAllocator@ATL@@SAXPAX@Z		; ATL::CCRTAllocator::Free
PUBLIC	??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
PUBLIC	??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
PUBLIC	??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
PUBLIC	??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
PUBLIC	??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
PUBLIC	??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
PUBLIC	??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
PUBLIC	??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
PUBLIC	??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
PUBLIC	??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
PUBLIC	??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	??0CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::CComCriticalSection
PUBLIC	??1CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::~CComCriticalSection
PUBLIC	?Init@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Init
PUBLIC	?Term@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Term
PUBLIC	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
PUBLIC	??0_ATL_COM_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70
PUBLIC	??1_ATL_COM_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70
PUBLIC	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
PUBLIC	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
PUBLIC	?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
PUBLIC	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
PUBLIC	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
PUBLIC	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
PUBLIC	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
PUBLIC	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	?Free@CComAllocator@ATL@@SAXPAX@Z		; ATL::CComAllocator::Free
PUBLIC	??0CHandle@ATL@@QAE@XZ				; ATL::CHandle::CHandle
PUBLIC	??0CHandle@ATL@@QAE@PAX@Z			; ATL::CHandle::CHandle
PUBLIC	??1CHandle@ATL@@QAE@XZ				; ATL::CHandle::~CHandle
PUBLIC	??BCHandle@ATL@@QBEPAXXZ			; ATL::CHandle::operator void *
PUBLIC	?Close@CHandle@ATL@@QAEXXZ			; ATL::CHandle::Close
PUBLIC	??0CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::CAtlComModule
PUBLIC	??1CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::~CAtlComModule
PUBLIC	?Term@CAtlComModule@ATL@@QAEXXZ			; ATL::CAtlComModule::Term
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
PUBLIC	??1CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::~CAtlWinModule
PUBLIC	?Term@CAtlWinModule@ATL@@QAEXXZ			; ATL::CAtlWinModule::Term
PUBLIC	?SK_GetFullyQualifiedApp@@YAPB_WXZ		; SK_GetFullyQualifiedApp
PUBLIC	??0?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::CHeapPtrBase<wchar_t,ATL::CComAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::~CHeapPtrBase<wchar_t,ATL::CComAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::operator wchar_t *
PUBLIC	??I?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEPAPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::operator&
PUBLIC	?Free@?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CComAllocator>::CHeapPtr<wchar_t,ATL::CComAllocator>
PUBLIC	??1?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CComAllocator>::~CHeapPtr<wchar_t,ATL::CComAllocator>
PUBLIC	??0?$CComHeapPtr@_W@ATL@@QAE@XZ			; ATL::CComHeapPtr<wchar_t>::CComHeapPtr<wchar_t>
PUBLIC	??1?$CComHeapPtr@_W@ATL@@QAE@XZ			; ATL::CComHeapPtr<wchar_t>::~CComHeapPtr<wchar_t>
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@PA_W@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@PA_W@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
PUBLIC	?SK_IsProcessRunning@@YA_NPB_W@Z		; SK_IsProcessRunning
PUBLIC	??0InstructionSet_Internal@InstructionSet@@QAE@XZ ; InstructionSet::InstructionSet_Internal::InstructionSet_Internal
PUBLIC	??0?$bitset@$0CA@@std@@QAE@_K@Z			; std::bitset<32>::bitset<32>
PUBLIC	??0?$allocator@V?$array@H$03@std@@@std@@QAE@XZ	; std::allocator<std::array<int,4> >::allocator<std::array<int,4> >
PUBLIC	?deallocate@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@2@I@Z ; std::allocator<std::array<int,4> >::deallocate
PUBLIC	?allocate@?$allocator@V?$array@H$03@std@@@std@@QAEPAV?$array@H$03@2@I@Z ; std::allocator<std::array<int,4> >::allocate
PUBLIC	?max_size@?$allocator@V?$array@H$03@std@@@std@@QBEIXZ ; std::allocator<std::array<int,4> >::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAIABV?$allocator@V?$array@H$03@std@@@2@@Z ; std::allocator_traits<std::allocator<std::array<int,4> > >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::_Wrap_alloc<std::allocator<std::array<int,4> > >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEPAV?$array@H$03@2@I@Z ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@2@I@Z ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::max_size
PUBLIC	??0?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAE@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >
PUBLIC	?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEXXZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Orphan_all
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Getal
PUBLIC	?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Getal
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Get_data
PUBLIC	?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Get_data
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myfirst
PUBLIC	?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myfirst
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Mylast
PUBLIC	?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Mylast
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myend
PUBLIC	?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myend
PUBLIC	??0?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@std@@QAE@XZ ; std::_Vector_val<std::_Simple_types<std::array<int,4> > >::_Vector_val<std::_Simple_types<std::array<int,4> > >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_second
PUBLIC	??0?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::vector<std::array<int,4>,std::allocator<std::array<int,4> > >
PUBLIC	??1?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::~vector<std::array<int,4>,std::allocator<std::array<int,4> > >
PUBLIC	?push_back@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@2@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::push_back
PUBLIC	?size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::size
PUBLIC	?max_size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::max_size
PUBLIC	?capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::capacity
PUBLIC	?_Has_unused_capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABE_NXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Has_unused_capacity
PUBLIC	??A?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEAAV?$array@H$03@1@I@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::operator[]
PUBLIC	?_Umove_if_noexcept1@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00U?$integral_constant@_N$00@2@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Umove_if_noexcept1
PUBLIC	?_Umove_if_noexcept@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Umove_if_noexcept
PUBLIC	?_Destroy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@0@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Destroy
PUBLIC	?_Calculate_growth@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEII@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Calculate_growth
PUBLIC	?_Change_array@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXQAV?$array@H$03@2@II@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Change_array
PUBLIC	?_Tidy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Tidy
PUBLIC	?_Xlength@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@CAXXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Xlength
PUBLIC	?_Orphan_range@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEXPAV?$array@H$03@2@0@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Orphan_range
PUBLIC	??1InstructionSet_Internal@InstructionSet@@QAE@XZ ; InstructionSet::InstructionSet_Internal::~InstructionSet_Internal
PUBLIC	??A?$array@H$03@std@@QAEAAHI@Z			; std::array<int,4>::operator[]
PUBLIC	?data@?$array@H$03@std@@QAEPAHXZ		; std::array<int,4>::data
PUBLIC	??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
PUBLIC	_calculate_table
PUBLIC	_calculate_table_hw
PUBLIC	?FindProcessByName@@YA?AUtagPROCESSENTRY32W@@PB_W@Z ; FindProcessByName
PUBLIC	??0?$allocator@K@std@@QAE@XZ			; std::allocator<unsigned long>::allocator<unsigned long>
PUBLIC	??0?$allocator@K@std@@QAE@ABV01@@Z		; std::allocator<unsigned long>::allocator<unsigned long>
PUBLIC	?deallocate@?$allocator@K@std@@QAEXPAKI@Z	; std::allocator<unsigned long>::deallocate
PUBLIC	?allocate@?$allocator@K@std@@QAEPAKI@Z		; std::allocator<unsigned long>::allocate
PUBLIC	?max_size@?$allocator@K@std@@QBEIXZ		; std::allocator<unsigned long>::max_size
PUBLIC	?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ; std::allocator_traits<std::allocator<unsigned long> >::max_size
PUBLIC	??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >
PUBLIC	??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@$$QAU01@@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::deallocate
PUBLIC	?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIU_Nil@2@@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::max_size
PUBLIC	?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z	; std::allocator<unsigned long *>::deallocate
PUBLIC	?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z	; std::allocator<unsigned long *>::allocate
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long *> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z ; std::_Wrap_alloc<std::allocator<unsigned long *> >::deallocate
PUBLIC	?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEII@Z ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getblock
PUBLIC	??0?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??1?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::~_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
PUBLIC	?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Alloc_proxy
PUBLIC	?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Free_proxy
PUBLIC	?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Myproxy
PUBLIC	?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Orphan_all
PUBLIC	?_Swap_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXAAV12@@Z ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Swap_all
PUBLIC	?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
PUBLIC	?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
PUBLIC	?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
PUBLIC	?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
PUBLIC	?_Map@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAPAKXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Map
PUBLIC	?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mapsize
PUBLIC	?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Myoff
PUBLIC	?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize
PUBLIC	?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize
PUBLIC	??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Deque_val<std::_Deque_simple_types<unsigned long> >
PUBLIC	?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Getblock
PUBLIC	??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::~_Deque_val<std::_Deque_simple_types<unsigned long> >
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_first
PUBLIC	?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_first
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_second
PUBLIC	?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_second
PUBLIC	??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@XZ ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>
PUBLIC	??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	??0?$deque@KV?$allocator@K@std@@@std@@QAE@$$QAV01@@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	?_Assign_rv@?$deque@KV?$allocator@K@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Assign_rv
PUBLIC	??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
PUBLIC	?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::begin
PUBLIC	?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::max_size
PUBLIC	?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::empty
PUBLIC	?front@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::front
PUBLIC	?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_front
PUBLIC	?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back
PUBLIC	?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back
PUBLIC	?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
PUBLIC	?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
PUBLIC	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
PUBLIC	??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
PUBLIC	?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::empty
PUBLIC	?front@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEAAKXZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::front
PUBLIC	?push@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXABK@Z ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::push
PUBLIC	?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::pop
PUBLIC	??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::~queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV01@@Z ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
PUBLIC	??$static_cast_p2p@X_W@@YAPAPAXPAPA_W@Z		; static_cast_p2p<void,wchar_t>
PUBLIC	??$max@PAE@std@@YAABQAEABQAE0@Z			; std::max<unsigned char *>
PUBLIC	?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z ; SK_GetFileHash_32
PUBLIC	??$min@I@std@@YAABIABI0@Z			; std::min<unsigned int>
PUBLIC	??0?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@IAE@XZ ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>
PUBLIC	??1?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::~CHeapPtrBase<unsigned char,ATL::CCRTAllocator>
PUBLIC	??B?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QBEPAEXZ ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::operator unsigned char *
PUBLIC	?AllocateBytes@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::AllocateBytes
PUBLIC	?Free@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAEXXZ ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::Free
PUBLIC	??0?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::CHeapPtr<unsigned char,ATL::CCRTAllocator>
PUBLIC	?Allocate@?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::Allocate
PUBLIC	??1?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ	; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::~CHeapPtr<unsigned char,ATL::CCRTAllocator>
PUBLIC	??0sk_host_process_s@@QAE@XZ			; sk_host_process_s::sk_host_process_s
PUBLIC	?SK_PathRemoveExtension@@YAXPA_W@Z		; SK_PathRemoveExtension
PUBLIC	?SK_FileHasSpaces@@YA_NPB_W@Z			; SK_FileHasSpaces
PUBLIC	?SK_FileHas8Dot3Name@@YAHPB_W@Z			; SK_FileHas8Dot3Name
PUBLIC	?ModifyPrivilege@@YAJPB_WH@Z			; ModifyPrivilege
PUBLIC	?SK_Generate8Dot3@@YA_NPB_W@Z			; SK_Generate8Dot3
PUBLIC	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@QB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
PUBLIC	??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ; __vcrt_va_start_verify_argument_type<char const * const>
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator*
PUBLIC	??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator++
PUBLIC	??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+=
PUBLIC	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
PUBLIC	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==
PUBLIC	??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV12@PA_W@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Rechecked
PUBLIC	?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator*
PUBLIC	??E?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator++
PUBLIC	??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+=
PUBLIC	??H?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE?AV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+
PUBLIC	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
PUBLIC	??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
PUBLIC	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
PUBLIC	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
PUBLIC	??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=
PUBLIC	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
PUBLIC	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
PUBLIC	?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV12@PAD@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_Rechecked
PUBLIC	?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEPADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_Unchecked
PUBLIC	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
PUBLIC	??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
PUBLIC	??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
PUBLIC	??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
PUBLIC	??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::emplace_back<std::array<int,4> const &>
PUBLIC	??$move@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<unsigned long> > &>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@X@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > ><std::_Wrap_alloc<std::allocator<unsigned long> >,void>
PUBLIC	??$move@AAV?$deque@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$deque@KV?$allocator@K@std@@@0@AAV10@@Z ; std::move<std::deque<unsigned long,std::allocator<unsigned long> > &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>
PUBLIC	??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
PUBLIC	??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ; std::addressof<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ; std::move<std::_Wrap_alloc<std::allocator<char> > &>
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
PUBLIC	??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1><>
PUBLIC	??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<unsigned long *> >::_Wrap_alloc<std::allocator<unsigned long *> ><std::_Wrap_alloc<std::allocator<unsigned long> > &>
PUBLIC	??$addressof@PAK@std@@YAPAPAKAAPAK@Z		; std::addressof<unsigned long *>
PUBLIC	??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long *>
PUBLIC	??$_Unfancy@K@std@@YAPAKPAK@Z			; std::_Unfancy<unsigned long>
PUBLIC	??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
PUBLIC	??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long>
PUBLIC	??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
PUBLIC	?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Setcont
PUBLIC	??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
PUBLIC	??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??$_Unfancy@_W@std@@YAPA_WPA_W@Z		; std::_Unfancy<wchar_t>
PUBLIC	?pointer_to@?$pointer_traits@PA_W@std@@SAPA_WAA_W@Z ; std::pointer_traits<wchar_t *>::pointer_to
PUBLIC	??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
PUBLIC	??$_Unfancy@D@std@@YAPADPAD@Z			; std::_Unfancy<char>
PUBLIC	?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ; std::pointer_traits<char *>::pointer_to
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
PUBLIC	??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z		; std::addressof<wchar_t *>
PUBLIC	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$addressof@PAD@std@@YAPAPADAAPAD@Z		; std::addressof<char *>
PUBLIC	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
PUBLIC	??$addressof@D@std@@YAPADAAD@Z			; std::addressof<char>
PUBLIC	??$addressof@_W@std@@YAPA_WAA_W@Z		; std::addressof<wchar_t>
PUBLIC	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate
PUBLIC	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
PUBLIC	?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QBEPAU_Container_proxy@2@AAU32@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address
PUBLIC	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
PUBLIC	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
PUBLIC	??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<unsigned long> > &>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1><>
PUBLIC	??$_Destroy_range@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z ; std::_Destroy_range<std::allocator<std::array<int,4> >,std::array<int,4> *>
PUBLIC	??$_Uninitialized_copy@PAPAKPAPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Uninitialized_copy<unsigned long * *,unsigned long * *,std::allocator<unsigned long *> >
PUBLIC	??$_Uninitialized_default_fill_n@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Uninitialized_default_fill_n<unsigned long * *,unsigned int,std::allocator<unsigned long *> >
PUBLIC	??$_Destroy_range@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ; std::_Destroy_range<std::allocator<unsigned long *>,unsigned long * *>
PUBLIC	??$addressof@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@0@AAV10@@Z ; std::addressof<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
PUBLIC	??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
PUBLIC	??$_Min_value@I@std@@YAABIABI0@Z		; std::_Min_value<unsigned int>
PUBLIC	??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
PUBLIC	?pointer_to@?$pointer_traits@PAU_Container_proxy@std@@@std@@SAPAU_Container_proxy@2@AAU32@@Z ; std::pointer_traits<std::_Container_proxy *>::pointer_to
PUBLIC	??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ; std::_Unfancy<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ; std::addressof<std::_Container_proxy>
PUBLIC	??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$_Rechecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@AAV10@PA_W@Z ; std::_Rechecked<std::_String_val<std::_Simple_types<wchar_t> > >
PUBLIC	??$_Unchecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPADV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z ; std::_Unchecked<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$_Rechecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@AAV10@PAD@Z ; std::_Rechecked<std::_String_val<std::_Simple_types<char> > >
PUBLIC	??$forward@ABV?$array@H$03@std@@@std@@YAABV?$array@H$03@0@ABV10@@Z ; std::forward<std::array<int,4> const &>
PUBLIC	??$_Emplace_back_with_unused_capacity@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXABV?$array@H$03@1@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Emplace_back_with_unused_capacity<std::array<int,4> const &>
PUBLIC	??$_Unfancy@V?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z ; std::_Unfancy<std::array<int,4> >
PUBLIC	??$construct@V?$array@H$03@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::construct<std::array<int,4>,std::array<int,4> const &>
PUBLIC	??$destroy@V?$array@H$03@std@@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@@Z ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::destroy<std::array<int,4> >
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<unsigned long> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1><std::_Wrap_alloc<std::allocator<unsigned long> > >
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >
PUBLIC	??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >
PUBLIC	??$forward@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YAAAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z ; std::forward<std::_Wrap_alloc<std::allocator<unsigned long> > &>
PUBLIC	??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>
PUBLIC	??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long *>
PUBLIC	??$forward@ABK@std@@YAABKABK@Z			; std::forward<unsigned long const &>
PUBLIC	??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z ; std::allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
PUBLIC	??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long>
PUBLIC	??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ; std::forward<std::allocator<wchar_t> >
PUBLIC	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
PUBLIC	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char> >::destroy<char *>
PUBLIC	??$?0K@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@K@1@@Z ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned long>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
PUBLIC	??$_Destroy_range1@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<std::array<int,4> >,std::array<int,4> *>
PUBLIC	??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z		; std::_Unchecked<unsigned long * *>
PUBLIC	??$_Ptr_copy_cat@PAKPAK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAK0@Z ; std::_Ptr_copy_cat<unsigned long *,unsigned long *>
PUBLIC	??$_Uninitialized_copy_al_unchecked@PAKPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_copy_al_unchecked<unsigned long *,unsigned long *,std::allocator<unsigned long *> >
PUBLIC	??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z ; std::_Rechecked<unsigned long * *,unsigned long * *>
PUBLIC	??$_Uninitialized_default_fill_n1@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_default_fill_n1<unsigned long * *,unsigned int,std::allocator<unsigned long *> >
PUBLIC	??$_Destroy_range1@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z ; std::_Destroy_range1<std::allocator<unsigned long *>,unsigned long * *>
PUBLIC	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z		; std::forward<wchar_t * &>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
PUBLIC	??$forward@AAPAD@std@@YAAAPADAAPAD@Z		; std::forward<char * &>
PUBLIC	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
PUBLIC	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
PUBLIC	??$_Uninitialized_move@PAV?$array@H$03@std@@PAV12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z ; std::_Uninitialized_move<std::array<int,4> *,std::array<int,4> *,std::allocator<std::array<int,4> > >
PUBLIC	??$move@AA_W@std@@YA$$QA_WAA_W@Z		; std::move<wchar_t &>
PUBLIC	??$move@AAD@std@@YA$$QADAAD@Z			; std::move<char &>
PUBLIC	??$construct@V?$array@H$03@std@@ABV12@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@ABV31@@Z ; std::allocator_traits<std::allocator<std::array<int,4> > >::construct<std::array<int,4>,std::array<int,4> const &>
PUBLIC	??$destroy@V?$array@H$03@std@@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@@Z ; std::allocator_traits<std::allocator<std::array<int,4> > >::destroy<std::array<int,4> >
PUBLIC	??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z	; std::allocator<unsigned long>::destroy<unsigned long *>
PUBLIC	??$construct@KABK@?$allocator@K@std@@QAEXPAKABK@Z ; std::allocator<unsigned long>::construct<unsigned long,unsigned long const &>
PUBLIC	??$destroy@K@?$allocator@K@std@@QAEXPAK@Z	; std::allocator<unsigned long>::destroy<unsigned long>
PUBLIC	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>
PUBLIC	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z	; std::allocator<char>::destroy<char *>
PUBLIC	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
PUBLIC	??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ; std::_Copy_memmove<unsigned long * *,unsigned long * *>
PUBLIC	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
PUBLIC	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
PUBLIC	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>
PUBLIC	??$_Unchecked@PAV?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z ; std::_Unchecked<std::array<int,4> *>
PUBLIC	??$_Ptr_move_cat@V?$array@H$03@std@@V12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAV?$array@H$03@0@0@Z ; std::_Ptr_move_cat<std::array<int,4>,std::array<int,4> >
PUBLIC	??$_Uninitialized_move_al_unchecked@V?$array@H$03@std@@V12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ; std::_Uninitialized_move_al_unchecked<std::array<int,4>,std::array<int,4>,std::allocator<std::array<int,4> > >
PUBLIC	??$_Rechecked@PAV?$array@H$03@std@@PAV12@@std@@YAAAPAV?$array@H$03@0@AAPAV10@PAV10@@Z ; std::_Rechecked<std::array<int,4> *,std::array<int,4> *>
PUBLIC	??$_Const_cast@$$CB_W@std@@YAPA_WPB_W@Z		; std::_Const_cast<wchar_t const >
PUBLIC	??$_Const_cast@$$CBD@std@@YAPADPBD@Z		; std::_Const_cast<char const >
PUBLIC	??$construct@V?$array@H$03@std@@ABV12@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z ; std::allocator<std::array<int,4> >::construct<std::array<int,4>,std::array<int,4> const &>
PUBLIC	??$destroy@V?$array@H$03@std@@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@@Z ; std::allocator<std::array<int,4> >::destroy<std::array<int,4> >
PUBLIC	??$_Copy_memmove@PAV?$array@H$03@std@@PAV12@@std@@YAPAV?$array@H$03@0@PAV10@00@Z ; std::_Copy_memmove<std::array<int,4> *,std::array<int,4> *>
PUBLIC	?SK_HostApp@@3VSK_HostAppUtil@@A		; SK_HostApp
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?_AtlComModule@ATL@@3VCAtlComModule@1@A		; ATL::_AtlComModule
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B ; InstructionSet::CPU_Rep
PUBLIC	??_C@_0N@BDDFKIGD@GenuineIntel?$AA@		; `string'
PUBLIC	??_C@_0N@FFJGBINN@AuthenticAMD?$AA@		; `string'
PUBLIC	?host_proc@@3Usk_host_process_s@@A		; host_proc
PUBLIC	??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@	; `string'
PUBLIC	??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ ; `string'
PUBLIC	??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; `string'
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??_U@YAPAXI@Z:PROC				; operator new[]
EXTRN	??_V@YAXPAX@Z:PROC				; operator delete[]
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__imp___invalid_parameter_noinfo_noreturn:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	__imp__towlower:PROC
EXTRN	__imp__memmove:PROC
EXTRN	__imp__strstr:PROC
EXTRN	__imp__wcsrchr:PROC
EXTRN	__imp__wcsstr:PROC
EXTRN	__imp___wcsdup:PROC
EXTRN	__imp__wcsncat:PROC
EXTRN	__imp__wcsncpy:PROC
EXTRN	__imp___wcsicmp:PROC
EXTRN	__imp__GetCommandLineW@0:PROC
EXTRN	__imp__ExpandEnvironmentStringsW@12:PROC
EXTRN	__imp__CreateDirectoryW@8:PROC
EXTRN	__imp__CreateFileW@28:PROC
EXTRN	__imp__DeleteFileW@4:PROC
EXTRN	__imp__FindClose@4:PROC
EXTRN	__imp__FindFirstFileW@8:PROC
EXTRN	__imp__FindNextFileW@8:PROC
EXTRN	__imp__GetFileAttributesW@4:PROC
EXTRN	__imp__GetFileAttributesExW@12:PROC
EXTRN	__imp__GetShortPathNameW@12:PROC
EXTRN	__imp__GetTempFileNameW@16:PROC
EXTRN	__imp__ReadFile@20:PROC
EXTRN	__imp__SetFileAttributesW@8:PROC
EXTRN	__imp__SetFileTime@16:PROC
EXTRN	__imp__DecodePointer@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__RaiseException@16:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__InitializeCriticalSectionEx@12:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__GetCurrentProcessId@0:PROC
EXTRN	__imp__ExitProcess@4:PROC
EXTRN	__imp__TerminateProcess@8:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__OpenThread@12:PROC
EXTRN	__imp__SuspendThread@4:PROC
EXTRN	__imp__ResumeThread@4:PROC
EXTRN	__imp__CreateProcessW@40:PROC
EXTRN	__imp__OpenProcessToken@12:PROC
EXTRN	__imp__OpenProcess@12:PROC
EXTRN	__imp__GetSystemDirectoryW@8:PROC
EXTRN	__imp__VirtualProtect@16:PROC
EXTRN	__imp__VirtualQuery@12:PROC
EXTRN	__imp__IsWow64Process@8:PROC
EXTRN	__imp__GetModuleFileNameW@12:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__GetModuleHandleExA@12:PROC
EXTRN	__imp__GetModuleHandleExW@12:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__AdjustTokenPrivileges@24:PROC
EXTRN	__imp__GetTokenInformation@20:PROC
EXTRN	__imp__SetFileShortNameW@8:PROC
EXTRN	__imp__lstrcpynW@12:PROC
EXTRN	__imp__lstrcatW@8:PROC
EXTRN	__imp__lstrlenW@4:PROC
EXTRN	__imp__QueryFullProcessImageNameW@16:PROC
EXTRN	__imp__GetSystemWow64DirectoryW@8:PROC
EXTRN	__imp__CopyFileW@12:PROC
EXTRN	__imp__MoveFileExW@12:PROC
EXTRN	__imp__LookupPrivilegeValueW@12:PROC
EXTRN	__imp__GetUserNameA@8:PROC
EXTRN	__imp__GetUserNameW@8:PROC
EXTRN	__imp__wsprintfW:PROC
EXTRN	__imp__UnregisterClassW@8:PROC
EXTRN	__imp__CharNextA@4:PROC
EXTRN	__imp__CharNextW@4:PROC
EXTRN	__imp__CharPrevW@8:PROC
EXTRN	__imp__MessageBoxW@16:PROC
EXTRN	__imp__CompareStringW@24:PROC
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	_GetFileVersionInfoExW@20:PROC
EXTRN	_VerQueryValueW@16:PROC
EXTRN	__imp__timeGetTime@0:PROC
EXTRN	__imp__CoTaskMemFree@4:PROC
EXTRN	__vsnwprintf:PROC
EXTRN	__vswprintf:PROC
EXTRN	__swprintf:PROC
EXTRN	_vsnprintf:PROC
EXTRN	_vsprintf:PROC
EXTRN	__imp_?_Xbad_alloc@std@@YAXXZ:PROC
EXTRN	__imp_?_Xlength_error@std@@YAXPBD@Z:PROC
EXTRN	__imp_?_Xout_of_range@std@@YAXPBD@Z:PROC
EXTRN	?SK_SYS_GetInstallPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:PROC ; SK_SYS_GetInstallPath
EXTRN	?SK_GetDLL@@YGPAUHINSTANCE__@@XZ:PROC		; SK_GetDLL
EXTRN	?SK_HasGlobalInjector@@YG_NXZ:PROC		; SK_HasGlobalInjector
EXTRN	__imp__GetUserProfileDirectoryW@12:PROC
EXTRN	_SHGetKnownFolderPath@16:PROC
EXTRN	_CreateToolhelp32Snapshot@8:PROC
EXTRN	_Process32FirstW@8:PROC
EXTRN	_Process32NextW@8:PROC
EXTRN	_Thread32First@8:PROC
EXTRN	_Thread32Next@8:PROC
EXTRN	__imp__StrStrW@8:PROC
EXTRN	__imp__StrStrIA@8:PROC
EXTRN	__imp__StrStrIW@8:PROC
EXTRN	__imp__PathFindExtensionW@4:PROC
EXTRN	__imp__PathGetArgsW@4:PROC
EXTRN	__imp__PathRemoveBackslashW@4:PROC
EXTRN	__imp__PathRemoveBlanksW@4:PROC
EXTRN	__imp__PathRemoveExtensionW@4:PROC
EXTRN	__imp__PathRemoveFileSpecW@4:PROC
EXTRN	__imp__PathStripPathW@4:PROC
EXTRN	?LogEx@iSK_Logger@@UAAX_NQB_WZZ:PROC		; iSK_Logger::LogEx
EXTRN	?Log@iSK_Logger@@UAAXQB_WZZ:PROC		; iSK_Logger::Log
EXTRN	?Shutdown@DXGI@SK@@YA_NXZ:PROC			; SK::DXGI::Shutdown
EXTRN	?Shutdown@D3D9@SK@@YA_NXZ:PROC			; SK::D3D9::Shutdown
EXTRN	?Shutdown@OpenGL@SK@@YA_NXZ:PROC		; SK::OpenGL::Shutdown
EXTRN	?SK_GetBackend@@YGPB_WXZ:PROC			; SK_GetBackend
EXTRN	?contains@SK_ModuleAddrMap@@QAE_NPAXPAPAUHINSTANCE__@@@Z:PROC ; SK_ModuleAddrMap::contains
EXTRN	?insert@SK_ModuleAddrMap@@QAEXPAXPAUHINSTANCE__@@@Z:PROC ; SK_ModuleAddrMap::insert
EXTRN	?SK_TLS_Bottom@@YGPAUSK_TLS@@XZ:PROC		; SK_TLS_Bottom
EXTRN	__CxxThrowException@8:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__except_handler3:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	?__SK_DLL_Ending@@3JC:DWORD			; __SK_DLL_Ending
EXTRN	_FOLDERID_Fonts:BYTE
EXTRN	_FOLDERID_Documents:BYTE
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
EXTRN	___ImageBase:BYTE
EXTRN	?dll_log@@3UiSK_Logger@@A:BYTE			; dll_log
EXTRN	?dll_ini@@3PAUiSK_INI@@A:DWORD			; dll_ini
_BSS	SEGMENT
	ALIGN	4

?SK_HostApp@@3VSK_HostAppUtil@@A DW 01H DUP (?)		; SK_HostApp
_BSS	ENDS
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
_BSS	SEGMENT
	ALIGN	4

?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B DB 06cH DUP (?) ; InstructionSet::CPU_Rep
?table@@3PAY0BAA@IA DD 01000H DUP (?)			; table
?long_shifts@@3PAY0BAA@IA DD 0400H DUP (?)		; long_shifts
?short_shifts@@3PAY0BAA@IA DD 0400H DUP (?)		; short_shifts
_BSS	ENDS
;	COMDAT ?warned@?8??SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z@4_NA
_BSS	SEGMENT
?warned@?8??SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z@4_NA DB 01H DUP (?) ; `SK_ScanAlignedEx'::`9'::warned
_BSS	ENDS
_BSS	SEGMENT
?host_proc@@3Usk_host_process_s@@A DB 01450H DUP (?)	; host_proc
_BSS	ENDS
;	COMDAT ?init@?1??SK_GetBlacklistFilename@@YAPB_WXZ@4KC
_BSS	SEGMENT
?init@?1??SK_GetBlacklistFilename@@YAPB_WXZ@4KC DD 01H DUP (?) ; `SK_GetBlacklistFilename'::`2'::init
_BSS	ENDS
;	COMDAT ?init@?1??SK_GetHostApp@@YAPB_WXZ@4KC
_BSS	SEGMENT
?init@?1??SK_GetHostApp@@YAPB_WXZ@4KC DD 01H DUP (?)	; `SK_GetHostApp'::`2'::init
_BSS	ENDS
;	COMDAT ?init@?1??SK_GetFullyQualifiedApp@@YAPB_WXZ@4KC
_BSS	SEGMENT
?init@?1??SK_GetFullyQualifiedApp@@YAPB_WXZ@4KC DD 01H DUP (?) ; `SK_GetFullyQualifiedApp'::`2'::init
_BSS	ENDS
;	COMDAT ?init@?1??SK_GetHostPath@@YAPB_WXZ@4KC
_BSS	SEGMENT
?init@?1??SK_GetHostPath@@YAPB_WXZ@4KC DD 01H DUP (?)	; `SK_GetHostPath'::`2'::init
_BSS	ENDS
;	COMDAT ?init@?1??SK_GetSystemDirectory@@YAPB_WXZ@4KC
_BSS	SEGMENT
?init@?1??SK_GetSystemDirectory@@YAPB_WXZ@4KC DD 01H DUP (?) ; `SK_GetSystemDirectory'::`2'::init
_BSS	ENDS
;	COMDAT ?szUserName@?1??SK_StripUserNameFromPathA@@YA_NPAD@Z@4PADA
_BSS	SEGMENT
?szUserName@?1??SK_StripUserNameFromPathA@@YA_NPAD@Z@4PADA DB 0104H DUP (?) ; `SK_StripUserNameFromPathA'::`2'::szUserName
_BSS	ENDS
;	COMDAT ?wszUserName@?1??SK_StripUserNameFromPathW@@YA_NPA_W@Z@4PA_WA
_BSS	SEGMENT
?wszUserName@?1??SK_StripUserNameFromPathW@@YA_NPA_W@Z@4PA_WA DW 0104H DUP (?) ; `SK_StripUserNameFromPathW'::`2'::wszUserName
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlComModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlComModule@ATL@@YAXXZ ; ATL::_AtlComModule$initializer$
CRT$XCU	ENDS
;	COMDAT ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
CONST	SEGMENT
??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ DB 'invalid string posi'
	DB	'tion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@ DB 'deque<T> too long', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@ DB 'vector<T> too long'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
CONST	SEGMENT
??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ DB 'string too long', 00H ; `string'
CONST	ENDS
;	COMDAT ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A
_DATA	SEGMENT
?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A DD FLAT:$SG298600 ; `SK_TestRenderImports'::`2'::tests
	DB	00H
	ORG $+3
	DD	FLAT:$SG298601
	DB	00H
	ORG $+3
	DD	FLAT:$SG298602
	DB	00H
	ORG $+3
	DD	FLAT:$SG298603
	DB	00H
	ORG $+3
	DD	FLAT:$SG298604
	DB	00H
	ORG $+3
	DD	FLAT:$SG298605
	DB	00H
	ORG $+3
	DD	FLAT:$SG298606
	DB	00H
	ORG $+3
_DATA	ENDS
;	COMDAT ??_C@_0N@FFJGBINN@AuthenticAMD?$AA@
CONST	SEGMENT
??_C@_0N@FFJGBINN@AuthenticAMD?$AA@ DB 'AuthenticAMD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BDDFKIGD@GenuineIntel?$AA@
CONST	SEGMENT
??_C@_0N@BDDFKIGD@GenuineIntel?$AA@ DB 'GenuineIntel', 00H ; `string'
CONST	ENDS
;	COMDAT ?_AtlComModule@ATL@@3VCAtlComModule@1@A
_DATA	SEGMENT
?_AtlComModule@ATL@@3VCAtlComModule@1@A DB 04H DUP (?)
	DD	FLAT:___ImageBase			; ATL::_AtlComModule
	DD	FLAT:___pobjMapEntryFirst+4
	DD	FLAT:___pobjMapEntryLast
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0InstructionSet_Internal@InstructionSet@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$3
__ehfuncinfo$??0InstructionSet_Internal@InstructionSet@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0InstructionSet_Internal@InstructionSet@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__F_AtlComModule@ATL@@YAXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??__F_AtlComModule@ATL@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__F_AtlComModule@ATL@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CAtlComModule@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$1
__unwindtable$?SK_StripTrailingSlashesA@@YAXPAD@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_StripTrailingSlashesA@@YAXPAD@Z$0
__unwindtable$?SK_StripTrailingSlashesW@@YAXPA_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_StripTrailingSlashesW@@YAXPA_W@Z$0
__unwindtable$?SK_ElevateToAdmin@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_ElevateToAdmin@@YAXXZ$1
__unwindtable$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0
__sehtable$?SK_InjectMemory@@YGHPAX0IK0@Z DD 0ffffffffH
	DD	FLAT:$LN12@SK_InjectM
	DD	FLAT:$LN8@SK_InjectM
__unwindtable$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z$1
__unwindtable$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z$1
__unwindtable$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0
__unwindtable$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0
__unwindtable$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
__unwindtable$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1
__ehfuncinfo$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__sehtable$?SK_TestImports@@YGXPAUHINSTANCE__@@PAUsk_import_test_s@@H@Z DD 0ffffffffH
	DD	FLAT:$LN45@SK_TestImp
	DD	FLAT:$LN21@SK_TestImp
	DD	00H
	DD	FLAT:$LN44@SK_TestImp
	DD	FLAT:$LN25@SK_TestImp
__unwindtable$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ$2
__unwindtable$?SK_RestartGame@@YAXPB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$4
__ehfuncinfo$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_StripTrailingSlashesA@@YAXPAD@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SK_StripTrailingSlashesA@@YAXPAD@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_StripTrailingSlashesW@@YAXPA_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SK_StripTrailingSlashesW@@YAXPA_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_RestartGame@@YAXPB_W@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SK_RestartGame@@YAXPB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_ElevateToAdmin@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SK_ElevateToAdmin@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$18 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$0
__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$18
__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z$18 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z$0
__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z$18
__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlWinModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlWinModule@ATL@@YAXXZ ; ATL::_AtlWinModule$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
??CPU_Rep$initializer$@InstructionSet@@0P6AXXZA@@3P6AXXZA DD FLAT:??__E?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ ; InstructionSet::PU_Rep$initializer$::operator->
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?SK_HostApp$initializer$@@3P6AXXZA DD FLAT:??__ESK_HostApp@@YAXXZ ; SK_HostApp$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Copy_memmove@PAV?$array@H$03@std@@PAV12@@std@@YAPAV?$array@H$03@0@PAV10@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAV?$array@H$03@std@@PAV12@@std@@YAPAV?$array@H$03@0@PAV10@00@Z PROC ; std::_Copy_memmove<std::array<int,4> *,std::array<int,4> *>, COMDAT

; 2295 : 	{	// implement copy-like function as memmove

	npad	2
	push	ebp
	mov	ebp, esp

; 2296 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);
; 2297 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
; 2298 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax
	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 2302 : 	}

	pop	ebp
	ret	0
??$_Copy_memmove@PAV?$array@H$03@std@@PAV12@@std@@YAPAV?$array@H$03@0@PAV10@00@Z ENDP ; std::_Copy_memmove<std::array<int,4> *,std::array<int,4> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@V?$array@H$03@std@@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@V?$array@H$03@std@@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@@Z PROC ; std::allocator<std::array<int,4> >::destroy<std::array<int,4> >, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@V?$array@H$03@std@@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@@Z ENDP ; std::allocator<std::array<int,4> >::destroy<std::array<int,4> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@V?$array@H$03@std@@ABV12@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@V?$array@H$03@std@@ABV12@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z PROC ; std::allocator<std::array<int,4> >::construct<std::array<int,4>,std::array<int,4> const &>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
$LN3@construct:

; 841  : 		}

	pop	ebp
	ret	8
??$construct@V?$array@H$03@std@@ABV12@@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z ENDP ; std::allocator<std::array<int,4> >::construct<std::array<int,4>,std::array<int,4> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Const_cast@$$CBD@std@@YAPADPBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CBD@std@@YAPADPBD@Z PROC		; std::_Const_cast<char const >, COMDAT

; 314  : 	{	// remove constness from a plain pointer

	npad	2
	push	ebp
	mov	ebp, esp

; 315  : 	return (const_cast<remove_const_t<_Ty> *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]

; 316  : 	}

	pop	ebp
	ret	0
??$_Const_cast@$$CBD@std@@YAPADPBD@Z ENDP		; std::_Const_cast<char const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Const_cast@$$CB_W@std@@YAPA_WPB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Const_cast@$$CB_W@std@@YAPA_WPB_W@Z PROC		; std::_Const_cast<wchar_t const >, COMDAT

; 314  : 	{	// remove constness from a plain pointer

	npad	2
	push	ebp
	mov	ebp, esp

; 315  : 	return (const_cast<remove_const_t<_Ty> *>(_Ptr));

	mov	eax, DWORD PTR __Ptr$[ebp]

; 316  : 	}

	pop	ebp
	ret	0
??$_Const_cast@$$CB_W@std@@YAPA_WPB_W@Z ENDP		; std::_Const_cast<wchar_t const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Rechecked@PAV?$array@H$03@std@@PAV12@@std@@YAAAPAV?$array@H$03@0@AAPAV10@PAV10@@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAV?$array@H$03@std@@PAV12@@std@@YAAAPAV?$array@H$03@0@AAPAV10@PAV10@@Z PROC ; std::_Rechecked<std::array<int,4> *,std::array<int,4> *>, COMDAT

; 480  : 	{	// reset checked from unchecked, generic

	npad	2
	push	ebp
	mov	ebp, esp

; 481  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 482  : 	return (_Dest);
; 483  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAV?$array@H$03@std@@PAV12@@std@@YAAAPAV?$array@H$03@0@AAPAV10@PAV10@@Z ENDP ; std::_Rechecked<std::array<int,4> *,std::array<int,4> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_move_al_unchecked@V?$array@H$03@std@@V12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_move_al_unchecked@V?$array@H$03@std@@V12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_move_al_unchecked<std::array<int,4>,std::array<int,4>,std::allocator<std::array<int,4> > >, COMDAT

; 157  : 	{	// move [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 159  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move_al_unchecked@V?$array@H$03@std@@V12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_move_al_unchecked<std::array<int,4>,std::array<int,4>,std::allocator<std::array<int,4> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Ptr_move_cat@V?$array@H$03@std@@V12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAV?$array@H$03@0@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_move_cat@V?$array@H$03@std@@V12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAV?$array@H$03@0@0@Z PROC ; std::_Ptr_move_cat<std::array<int,4>,std::array<int,4> >, COMDAT

; 892  : 	{	// return pointer move optimization category for pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 893  : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 894  : 	}

	pop	ebp
	ret	0
??$_Ptr_move_cat@V?$array@H$03@std@@V12@@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAV?$array@H$03@0@0@Z ENDP ; std::_Ptr_move_cat<std::array<int,4>,std::array<int,4> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Unchecked@PAV?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAV?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z PROC ; std::_Unchecked<std::array<int,4> *>, COMDAT

; 450  : 	{	// construct unchecked from checked, generic

	npad	2
	push	ebp
	mov	ebp, esp

; 451  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 452  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAV?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z ENDP ; std::_Unchecked<std::array<int,4> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC ; std::allocator<char>::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 841  : 		}

	pop	ebp
	ret	8
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ENDP ; std::allocator<char>::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 841  : 		}

	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edx, edx
	je	SHORT $LN3@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
$LN3@construct:

; 841  : 		}

	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z PROC	; std::_Copy_memmove<unsigned long * *,unsigned long * *>, COMDAT

; 2295 : 	{	// implement copy-like function as memmove

	npad	2
	push	ebp
	mov	ebp, esp

; 2296 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);
; 2297 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
; 2298 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax
	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 2302 : 	}

	pop	ebp
	ret	0
??$_Copy_memmove@PAPAKPAPAK@std@@YAPAPAKPAPAK00@Z ENDP	; std::_Copy_memmove<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	; std::allocator<char>::destroy<char *>, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ENDP	; std::allocator<char>::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	; std::allocator<wchar_t>::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ENDP	; std::allocator<wchar_t>::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@K@?$allocator@K@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@K@?$allocator@K@std@@QAEXPAK@Z PROC		; std::allocator<unsigned long>::destroy<unsigned long>, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@K@?$allocator@K@std@@QAEXPAK@Z ENDP		; std::allocator<unsigned long>::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@KABK@?$allocator@K@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KABK@?$allocator@K@std@@QAEXPAKABK@Z PROC	; std::allocator<unsigned long>::construct<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 839  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@construct:

; 841  : 		}

	pop	ebp
	ret	8
??$construct@KABK@?$allocator@K@std@@QAEXPAKABK@Z ENDP	; std::allocator<unsigned long>::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z PROC	; std::allocator<unsigned long>::destroy<unsigned long *>, COMDAT
; _this$ = ecx

; 846  : 		_Ptr->~_Uty();
; 847  : 		}

	ret	4
??$destroy@PAK@?$allocator@K@std@@QAEXPAPAK@Z ENDP	; std::allocator<unsigned long>::destroy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@V?$array@H$03@std@@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@V?$array@H$03@std@@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@@Z PROC ; std::allocator_traits<std::allocator<std::array<int,4> > >::destroy<std::array<int,4> >, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@V?$array@H$03@std@@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@@Z ENDP ; std::allocator_traits<std::allocator<std::array<int,4> > >::destroy<std::array<int,4> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@V?$array@H$03@std@@ABV12@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@ABV31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@V?$array@H$03@std@@ABV12@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@ABV31@@Z PROC ; std::allocator_traits<std::allocator<std::array<int,4> > >::construct<std::array<int,4>,std::array<int,4> const &>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
$LN8@construct:

; 959  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 960  : 		}

	pop	ebp
	ret	0
??$construct@V?$array@H$03@std@@ABV12@@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAXAAV?$allocator@V?$array@H$03@std@@@1@PAV?$array@H$03@1@ABV31@@Z ENDP ; std::allocator_traits<std::allocator<std::array<int,4> > >::construct<std::array<int,4>,std::array<int,4> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAD@std@@YA$$QADAAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAD@std@@YA$$QADAAD@Z PROC			; std::move<char &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAD@std@@YA$$QADAAD@Z ENDP			; std::move<char &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AA_W@std@@YA$$QA_WAA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AA_W@std@@YA$$QA_WAA_W@Z PROC			; std::move<wchar_t &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AA_W@std@@YA$$QA_WAA_W@Z ENDP			; std::move<wchar_t &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_move@PAV?$array@H$03@std@@PAV12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_move@PAV?$array@H$03@std@@PAV12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z PROC ; std::_Uninitialized_move<std::array<int,4> *,std::array<int,4> *,std::allocator<std::array<int,4> > >, COMDAT

; 166  : 	{	// move [_First, _Last) to raw _Dest, using _Al

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 176  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_move@PAV?$array@H$03@std@@PAV12@V?$allocator@V?$array@H$03@std@@@2@@std@@YAPAV?$array@H$03@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z ENDP ; std::_Uninitialized_move<std::array<int,4> *,std::array<int,4> *,std::allocator<std::array<int,4> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Left_size$ = 12					; size = 4
__Right$ = 16						; size = 4
__Right_size$ = 20					; size = 4
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z PROC ; std::_Traits_equal<std::char_traits<char> >, COMDAT

; 24   : 	{	// compare [_Left, _Left + _Left_size) to [_Right, _Right + _Right_size) for equality using _Traits

	npad	2
	push	ebp
	mov	ebp, esp

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	mov	ecx, DWORD PTR __Left_size$[ebp]
	cmp	ecx, DWORD PTR __Right_size$[ebp]
	jne	SHORT $LN3@Traits_equ
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

	mov	edx, DWORD PTR __Left$[ebp]
	push	esi
	mov	esi, DWORD PTR __Right$[ebp]
	sub	ecx, 4
	jb	SHORT $LN10@Traits_equ
	npad	7
$LL11@Traits_equ:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN9@Traits_equ
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL11@Traits_equ
$LN10@Traits_equ:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN8@Traits_equ
$LN9@Traits_equ:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN12@Traits_equ
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN8@Traits_equ
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN12@Traits_equ
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN8@Traits_equ
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN12@Traits_equ
	cmp	ecx, -1
	je	SHORT $LN8@Traits_equ
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	je	SHORT $LN8@Traits_equ
$LN12@Traits_equ:
	sbb	eax, eax
	or	eax, 1
	jmp	SHORT $LN13@Traits_equ
$LN8@Traits_equ:
	xor	eax, eax
$LN13@Traits_equ:
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	test	eax, eax
	jne	SHORT $LN3@Traits_equ
	mov	al, 1

; 26   : 	}

	pop	ebp
	ret	0
$LN3@Traits_equ:

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	xor	al, al

; 26   : 	}

	pop	ebp
	ret	0
??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ENDP ; std::_Traits_equal<std::char_traits<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 959  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 960  : 		}

	pop	ebp
	ret	0
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		; std::forward<char * &>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@AAPAD@std@@YAAAPADAAPAD@Z ENDP		; std::forward<char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 959  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 960  : 		}

	pop	ebp
	ret	0
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		; std::forward<wchar_t * &>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ENDP		; std::forward<wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edx, edx
	je	SHORT $LN8@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
$LN8@construct:

; 959  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 960  : 		}

	pop	ebp
	ret	0
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC ; std::forward<std::_Container_proxy>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ENDP ; std::forward<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<unsigned long *>,unsigned long * *>, COMDAT

; 1208 : 		// nothing to do
; 1209 : 	}

	ret	0
??$_Destroy_range1@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<unsigned long *>,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n1@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Uninitialized_default_fill_n1@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_default_fill_n1<unsigned long * *,unsigned int,std::allocator<unsigned long *> >, COMDAT

; 250  : 	{	// value-initialize _Count objects to raw _First, using default _Alloc construct, all-bits-zero type

	npad	2
	push	ebp
	mov	ebp, esp

; 251  : 	_CSTD memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));

	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax*4]
	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 252  : 	return (_First + _Count);

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 253  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_default_fill_n1@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_default_fill_n1<unsigned long * *,unsigned int,std::allocator<unsigned long *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z
_TEXT	SEGMENT
__Dest$ = 8						; size = 4
__Src$ = 12						; size = 4
??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z PROC ; std::_Rechecked<unsigned long * *,unsigned long * *>, COMDAT

; 480  : 	{	// reset checked from unchecked, generic

	npad	2
	push	ebp
	mov	ebp, esp

; 481  : 	_Dest = _Src;

	mov	eax, DWORD PTR __Dest$[ebp]
	mov	ecx, DWORD PTR __Src$[ebp]
	mov	DWORD PTR [eax], ecx

; 482  : 	return (_Dest);
; 483  : 	}

	pop	ebp
	ret	0
??$_Rechecked@PAPAKPAPAK@std@@YAAAPAPAKAAPAPAKPAPAK@Z ENDP ; std::_Rechecked<unsigned long * *,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_copy_al_unchecked@PAKPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 4
___formal$ = 24						; size = 1
___formal$ = 28						; size = 1
??$_Uninitialized_copy_al_unchecked@PAKPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Uninitialized_copy_al_unchecked<unsigned long *,unsigned long *,std::allocator<unsigned long *> >, COMDAT

; 108  : 	{	// copy [_First, _Last) to raw _Dest, using default _Alloc construct, memmove optimization

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 110  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_copy_al_unchecked@PAKPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@U_Really_trivial_ptr_iterator_tag@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Uninitialized_copy_al_unchecked<unsigned long *,unsigned long *,std::allocator<unsigned long *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Ptr_copy_cat@PAKPAK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAK0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
??$_Ptr_copy_cat@PAKPAK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAK0@Z PROC ; std::_Ptr_copy_cat<unsigned long *,unsigned long *>, COMDAT

; 875  : 	{	// return pointer copy optimization category for pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 876  : 	return {};

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 877  : 	}

	pop	ebp
	ret	0
??$_Ptr_copy_cat@PAKPAK@std@@YA?AU_Really_trivial_ptr_iterator_tag@0@ABQAPAK0@Z ENDP ; std::_Ptr_copy_cat<unsigned long *,unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z
_TEXT	SEGMENT
__Src$ = 8						; size = 4
??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z PROC		; std::_Unchecked<unsigned long * *>, COMDAT

; 450  : 	{	// construct unchecked from checked, generic

	npad	2
	push	ebp
	mov	ebp, esp

; 451  : 	return (_Src);

	mov	eax, DWORD PTR __Src$[ebp]

; 452  : 	}

	pop	ebp
	ret	0
??$_Unchecked@PAPAK@std@@YAPAPAKPAPAK@Z ENDP		; std::_Unchecked<unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Destroy_range1@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 1
??$_Destroy_range1@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z PROC ; std::_Destroy_range1<std::allocator<std::array<int,4> >,std::array<int,4> *>, COMDAT

; 1208 : 		// nothing to do
; 1209 : 	}

	ret	0
??$_Destroy_range1@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@U?$integral_constant@_N$00@0@@Z ENDP ; std::_Destroy_range1<std::allocator<std::array<int,4> >,std::array<int,4> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z ENDP ; std::allocator_traits<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$?0K@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned long>, COMDAT
; _this$ = ecx

; 813  : 		}

	mov	eax, ecx
	ret	4
??$?0K@?$allocator@U_Container_proxy@std@@@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy><unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC ; std::allocator_traits<std::allocator<char> >::destroy<char *>, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ENDP ; std::allocator_traits<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z PROC ; std::forward<std::allocator<wchar_t> >, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@V?$allocator@_W@std@@@std@@YA$$QAV?$allocator@_W@0@AAV10@@Z ENDP ; std::forward<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long>, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@K@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAK@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
_<_Args_0>$ = 16					; size = 4
??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>, COMDAT

; 958  : 		{	// construct _Objty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN8@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN8@construct:

; 959  : 		_Al.construct(_Ptr, _STD forward<_Types>(_Args)...);
; 960  : 		}

	pop	ebp
	ret	0
??$construct@KABK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAKABK@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@ABK@std@@YAABKABK@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABK@std@@YAABKABK@Z PROC			; std::forward<unsigned long const &>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@ABK@std@@YAABKABK@Z ENDP			; std::forward<unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
__Ptr$ = 12						; size = 4
??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long *>, COMDAT

; 965  : 		_Al.destroy(_Ptr);
; 966  : 		}

	ret	0
??$destroy@PAK@?$allocator_traits@V?$allocator@K@std@@@std@@SAXAAV?$allocator@K@1@PAPAK@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::destroy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z PROC ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>, COMDAT
; _this$ = ecx

; 813  : 		}

	mov	eax, ecx
	ret	4
??$?0K@?$allocator@PAK@std@@QAE@ABV?$allocator@K@1@@Z ENDP ; std::allocator<unsigned long *>::allocator<unsigned long *><unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YAAAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YAAAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<unsigned long> > &>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YAAAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<unsigned long> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<char> > >, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
__Val1$ = 12						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1><std::_Wrap_alloc<std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [ecx], 0

; 313  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [ecx+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [ecx+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [ecx+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 313  : 		}

	ret	8
??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_One_then_variadic_args_t@1@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1><std::_Wrap_alloc<std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z PROC ; std::forward<std::_Wrap_alloc<std::allocator<unsigned long> > >, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z ENDP ; std::forward<std::_Wrap_alloc<std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@V?$array@H$03@std@@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@V?$array@H$03@std@@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::destroy<std::array<int,4> >, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@V?$array@H$03@std@@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::destroy<std::array<int,4> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@V?$array@H$03@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@V?$array@H$03@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::construct<std::array<int,4>,std::array<int,4> const &>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
$LN13@construct:

; 1096 : 		_Mytraits::construct(*this, _Ptr,
; 1097 : 			_STD forward<_Types>(_Args)...);
; 1098 : 		}

	pop	ebp
	ret	8
??$construct@V?$array@H$03@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@1@ABV21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::construct<std::array<int,4>,std::array<int,4> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@V?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@V?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z PROC ; std::_Unfancy<std::array<int,4> >, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@V?$array@H$03@std@@@std@@YAPAV?$array@H$03@0@PAV10@@Z ENDP ; std::_Unfancy<std::array<int,4> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??$_Emplace_back_with_unused_capacity@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXABV?$array@H$03@1@@Z
_TEXT	SEGMENT
_<_Val_0>$ = 8						; size = 4
??$_Emplace_back_with_unused_capacity@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXABV?$array@H$03@1@@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Emplace_back_with_unused_capacity<std::array<int,4> const &>, COMDAT
; _this$ = ecx

; 898  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR [ecx+4]
	test	edx, edx
	je	SHORT $LN71@Emplace_ba
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edx], xmm0
$LN71@Emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 902  : 		++this->_Mylast();

	add	DWORD PTR [ecx+4], 16			; 00000010H

; 903  : 		}

	pop	ebp
	ret	4
??$_Emplace_back_with_unused_capacity@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXABV?$array@H$03@1@@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Emplace_back_with_unused_capacity<std::array<int,4> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$forward@ABV?$array@H$03@std@@@std@@YAABV?$array@H$03@0@ABV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$forward@ABV?$array@H$03@std@@@std@@YAABV?$array@H$03@0@ABV10@@Z PROC ; std::forward<std::array<int,4> const &>, COMDAT

; 1334 : 	{	// forward an lvalue as either an lvalue or an rvalue

	npad	2
	push	ebp
	mov	ebp, esp

; 1335 : 	return (static_cast<_Ty&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1336 : 	}

	pop	ebp
	ret	0
??$forward@ABV?$array@H$03@std@@@std@@YAABV?$array@H$03@0@ABV10@@Z ENDP ; std::forward<std::array<int,4> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$_Rechecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@AAV10@PAD@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iter$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Rechecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@AAV10@PAD@Z PROC ; std::_Rechecked<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 1519 : 	{	// convert to checked

	npad	2
	push	ebp
	mov	ebp, esp

; 1428 : 		this->_Ptr = _Right;

	mov	eax, DWORD PTR __Iter$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx

; 1520 : 	return (_Iter._Rechecked(_Right));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1521 : 	}

	pop	ebp
	ret	0
??$_Rechecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@AAV10@PAD@Z ENDP ; std::_Rechecked<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
;	COMDAT ??$_Unique_unchecked@PADUtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YAPADPAD0AAUtest_slashes@?1??SK_StripTrailingSlashesA@@YAX0@Z@@Z
_TEXT	SEGMENT
tv278 = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Unique_unchecked@PADUtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YAPADPAD0AAUtest_slashes@?1??SK_StripTrailingSlashesA@@YAX0@Z@@Z PROC ; std::_Unique_unchecked<char *,`SK_StripTrailingSlashesA'::`2'::test_slashes>, COMDAT

; 1432 : 	{	// remove each satisfying _Pred with previous

	npad	2
	push	ebp
	mov	ebp, esp

; 1433 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	push	ebx
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	eax, edi
	je	SHORT $LN3@Unique_unc

; 1434 : 		for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )

	mov	ecx, eax
	inc	eax
	cmp	eax, edi
	je	SHORT $LN3@Unique_unc
$LL2@Unique_unc:

; 1435 : 			if (_Pred(*_Firstb, *_First))

	mov	bl, BYTE PTR [ecx]
	mov	dl, BYTE PTR [eax]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2934 :         return (a == '\\' || a == '/');

	cmp	bl, 92					; 0000005cH
	je	SHORT $LN18@Unique_unc
	cmp	bl, 47					; 0000002fH
	jne	SHORT $LN14@Unique_unc
$LN18@Unique_unc:
	cmp	dl, 92					; 0000005cH
	je	SHORT $LN41@Unique_unc
	cmp	dl, 47					; 0000002fH
	je	SHORT $LN41@Unique_unc
$LN14@Unique_unc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1434 : 		for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )

	mov	ecx, eax
	inc	eax
	cmp	eax, edi
	jne	SHORT $LL2@Unique_unc
$LN3@Unique_unc:

; 1441 : 				}
; 1442 : 
; 1443 : 	return (_Last);

	mov	eax, edi
	pop	edi
	pop	ebx

; 1444 : 	}

	pop	ebp
	ret	0
$LN41@Unique_unc:
	push	esi

; 1436 : 				{	// copy down
; 1437 : 				for (; ++_First != _Last; )

	lea	esi, DWORD PTR [eax+1]
	xor	ebx, ebx
	mov	eax, edi
	xor	edx, edx
	sub	eax, esi
	cmp	esi, edi
	cmova	eax, ebx
	mov	DWORD PTR tv278[ebp], eax
	test	eax, eax
	je	SHORT $LN6@Unique_unc
	mov	edi, eax
$LL5@Unique_unc:

; 1438 : 					if (!_Pred(*_Firstb, *_First))

	mov	bl, BYTE PTR [ecx]
	mov	al, BYTE PTR [esi]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2934 :         return (a == '\\' || a == '/');

	cmp	bl, 92					; 0000005cH
	je	SHORT $LN30@Unique_unc
	cmp	bl, 47					; 0000002fH
	jne	SHORT $LN26@Unique_unc
$LN30@Unique_unc:
	cmp	al, 92					; 0000005cH
	je	SHORT $LN10@Unique_unc
	cmp	al, 47					; 0000002fH
	je	SHORT $LN10@Unique_unc
$LN26@Unique_unc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1439 : 						*++_Firstb = _STD move(*_First);

	inc	ecx
	mov	BYTE PTR [ecx], al
$LN10@Unique_unc:

; 1436 : 				{	// copy down
; 1437 : 				for (; ++_First != _Last; )

	inc	edx
	inc	esi
	cmp	edx, edi
	jne	SHORT $LL5@Unique_unc
$LN6@Unique_unc:
	pop	esi
	pop	edi

; 1440 : 				return (++_Firstb);

	lea	eax, DWORD PTR [ecx+1]
	pop	ebx

; 1444 : 	}

	pop	ebp
	ret	0
??$_Unique_unchecked@PADUtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YAPADPAD0AAUtest_slashes@?1??SK_StripTrailingSlashesA@@YAX0@Z@@Z ENDP ; std::_Unique_unchecked<char *,`SK_StripTrailingSlashesA'::`2'::test_slashes>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$_Unchecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPADV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPADV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 1510 : 	{	// convert to unchecked

	npad	2
	push	ebp
	mov	ebp, esp

; 1511 : 	return (_Iter._Unchecked());

	mov	eax, DWORD PTR __Iter$[ebp]

; 1512 : 	}

	pop	ebp
	ret	0
??$_Unchecked@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPADV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$_Rechecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@AAV10@PA_W@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Iter$ = 12						; size = 4
__Right$ = 16						; size = 4
??$_Rechecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@AAV10@PA_W@Z PROC ; std::_Rechecked<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT

; 1519 : 	{	// convert to checked

	npad	2
	push	ebp
	mov	ebp, esp

; 1428 : 		this->_Ptr = _Right;

	mov	eax, DWORD PTR __Iter$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [eax], ecx

; 1520 : 	return (_Iter._Rechecked(_Right));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1521 : 	}

	pop	ebp
	ret	0
??$_Rechecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@AAV10@PA_W@Z ENDP ; std::_Rechecked<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
;	COMDAT ??$_Unique_unchecked@PA_WUtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YAPA_WPA_W0AAUtest_slashes@?1??SK_StripTrailingSlashesW@@YAX0@Z@@Z
_TEXT	SEGMENT
tv275 = 8						; size = 4
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Pred$ = 16						; size = 4
??$_Unique_unchecked@PA_WUtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YAPA_WPA_W0AAUtest_slashes@?1??SK_StripTrailingSlashesW@@YAX0@Z@@Z PROC ; std::_Unique_unchecked<wchar_t *,`SK_StripTrailingSlashesW'::`2'::test_slashes>, COMDAT

; 1432 : 	{	// remove each satisfying _Pred with previous

	npad	2
	push	ebp
	mov	ebp, esp

; 1433 : 	if (_First != _Last)

	mov	eax, DWORD PTR __First$[ebp]
	push	esi
	push	edi
	mov	edi, DWORD PTR __Last$[ebp]
	cmp	eax, edi
	je	SHORT $LN3@Unique_unc

; 1434 : 		for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )

	mov	ecx, eax
	add	eax, 2
	cmp	eax, edi
	je	SHORT $LN3@Unique_unc
	npad	6
$LL2@Unique_unc:

; 1435 : 			if (_Pred(*_Firstb, *_First))

	movzx	esi, WORD PTR [ecx]
	movzx	edx, WORD PTR [eax]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2896 :         return (a == L'\\' || a == L'/');

	cmp	esi, 92					; 0000005cH
	je	SHORT $LN18@Unique_unc
	cmp	esi, 47					; 0000002fH
	jne	SHORT $LN14@Unique_unc
$LN18@Unique_unc:
	cmp	edx, 92					; 0000005cH
	je	SHORT $LN41@Unique_unc
	cmp	edx, 47					; 0000002fH
	je	SHORT $LN41@Unique_unc
$LN14@Unique_unc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1434 : 		for (_FwdIt _Firstb; (void)(_Firstb = _First), ++_First != _Last; )

	mov	ecx, eax
	add	eax, 2
	cmp	eax, edi
	jne	SHORT $LL2@Unique_unc
$LN3@Unique_unc:

; 1441 : 				}
; 1442 : 
; 1443 : 	return (_Last);

	mov	eax, edi
	pop	edi
	pop	esi

; 1444 : 	}

	pop	ebp
	ret	0
$LN41@Unique_unc:
	push	ebx

; 1436 : 				{	// copy down
; 1437 : 				for (; ++_First != _Last; )

	lea	edx, DWORD PTR [eax+2]
	mov	ebx, edi
	sub	ebx, edx
	xor	esi, esi
	inc	ebx
	xor	eax, eax
	shr	ebx, 1
	cmp	edx, edi
	cmova	ebx, esi
	mov	DWORD PTR tv275[ebp], ebx
	test	ebx, ebx
	je	SHORT $LN6@Unique_unc
$LL5@Unique_unc:

; 1438 : 					if (!_Pred(*_Firstb, *_First))

	movzx	edi, WORD PTR [ecx]
	movzx	ebx, WORD PTR [edx]
	mov	esi, ebx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2896 :         return (a == L'\\' || a == L'/');

	cmp	edi, 92					; 0000005cH
	je	SHORT $LN30@Unique_unc
	cmp	edi, 47					; 0000002fH
	jne	SHORT $LN26@Unique_unc
$LN30@Unique_unc:
	cmp	esi, 92					; 0000005cH
	je	SHORT $LN10@Unique_unc
	cmp	esi, 47					; 0000002fH
	je	SHORT $LN10@Unique_unc
$LN26@Unique_unc:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1439 : 						*++_Firstb = _STD move(*_First);

	add	ecx, 2
	mov	WORD PTR [ecx], bx
$LN10@Unique_unc:

; 1436 : 				{	// copy down
; 1437 : 				for (; ++_First != _Last; )

	inc	eax
	add	edx, 2
	cmp	eax, DWORD PTR tv275[ebp]
	jne	SHORT $LL5@Unique_unc
$LN6@Unique_unc:
	pop	ebx
	pop	edi

; 1440 : 				return (++_Firstb);

	lea	eax, DWORD PTR [ecx+2]
	pop	esi

; 1444 : 	}

	pop	ebp
	ret	0
??$_Unique_unchecked@PA_WUtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YAPA_WPA_W0AAUtest_slashes@?1??SK_StripTrailingSlashesW@@YAX0@Z@@Z ENDP ; std::_Unique_unchecked<wchar_t *,`SK_StripTrailingSlashesW'::`2'::test_slashes>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z
_TEXT	SEGMENT
__Iter$ = 8						; size = 4
??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z PROC ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT

; 1510 : 	{	// convert to unchecked

	npad	2
	push	ebp
	mov	ebp, esp

; 1511 : 	return (_Iter._Unchecked());

	mov	eax, DWORD PTR __Iter$[ebp]

; 1512 : 	}

	pop	ebp
	ret	0
??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z ENDP ; std::_Unchecked<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z PROC ; std::addressof<std::_Container_proxy>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@AAU10@@Z ENDP ; std::addressof<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 1096 : 		_Mytraits::construct(*this, _Ptr,
; 1097 : 			_STD forward<_Types>(_Args)...);
; 1098 : 		}

	pop	ebp
	ret	8
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::construct<char *,char * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 1096 : 		_Mytraits::construct(*this, _Ptr,
; 1097 : 			_STD forward<_Types>(_Args)...);
; 1098 : 		}

	pop	ebp
	ret	8
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::construct<wchar_t *,wchar_t * &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	edx, DWORD PTR __Ptr$[ebp]
	test	edx, edx
	je	SHORT $LN13@construct
	mov	ecx, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
$LN13@construct:

; 1096 : 		_Mytraits::construct(*this, _Ptr,
; 1097 : 			_STD forward<_Types>(_Args)...);
; 1098 : 		}

	pop	ebp
	ret	8
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::construct<std::_Container_proxy,std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z PROC ; std::_Unfancy<std::_Container_proxy>, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@PAU10@@Z ENDP ; std::_Unfancy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAU_Container_proxy@std@@@std@@SAPAU_Container_proxy@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAU_Container_proxy@std@@@std@@SAPAU_Container_proxy@2@AAU32@@Z PROC ; std::pointer_traits<std::_Container_proxy *>::pointer_to, COMDAT

; 289  : 		{	// convert raw reference to pointer

	npad	2
	push	ebp
	mov	ebp, esp

; 290  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 291  : 		}

	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAU_Container_proxy@std@@@std@@SAPAU_Container_proxy@2@AAU32@@Z ENDP ; std::pointer_traits<std::_Container_proxy *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YAPBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<char,std::char_traits<char>,std::allocator<char> > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
;	COMDAT ??$_Min_value@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$_Min_value@I@std@@YAABIABI0@Z PROC			; std::_Min_value<unsigned int>, COMDAT

; 22   : 	{	// return smaller of _Left and _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	cmovb	eax, edx

; 24   : 	}

	pop	ebp
	ret	0
??$_Min_value@I@std@@YAABIABI0@Z ENDP			; std::_Min_value<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z PROC ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z ENDP ; std::addressof<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > const >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@0@AAV10@@Z PROC ; std::addressof<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@YAPAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<unsigned long *>,unsigned long * *>, COMDAT

; 1215 : 		// note that this is an optimization for debug mode codegen;
; 1216 : 		// in release mode the BE removes all of this
; 1217 : 	typedef typename _Alloc::value_type _Val;
; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<
; 1219 : 		is_trivially_destructible<_Val>,
; 1220 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1221 : 	}

	ret	0
??$_Destroy_range@V?$allocator@PAK@std@@PAPAK@std@@YAXPAPAK0AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<unsigned long *>,unsigned long * *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_default_fill_n@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Uninitialized_default_fill_n@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Uninitialized_default_fill_n<unsigned long * *,unsigned int,std::allocator<unsigned long *> >, COMDAT

; 260  : 	{	// value-initialize _Count objects to raw _First, using _Al

	npad	2
	push	ebp
	mov	ebp, esp

; 251  : 	_CSTD memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));

	mov	eax, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, DWORD PTR __First$[ebp]
	push	edi
	lea	edi, DWORD PTR [eax*4]
	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH

; 252  : 	return (_First + _Count);

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi

; 261  : 	typedef _Iter_value_t<_FwdIt> _Ty;
; 262  : 	return (_Uninitialized_default_fill_n1(_First, _Count, _Al,
; 263  : 		_Conjunction_t<
; 264  : 			is_pointer<_FwdIt>,
; 265  : 			is_scalar<_Ty>,
; 266  : 			negation<is_volatile<_Ty>>,
; 267  : 			negation<is_member_pointer<_Ty>>,
; 268  : 			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>()));
; 269  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_default_fill_n@PAPAKIV?$allocator@PAK@std@@@std@@YAPAPAKPAPAKIAAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Uninitialized_default_fill_n<unsigned long * *,unsigned int,std::allocator<unsigned long *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
;	COMDAT ??$_Uninitialized_copy@PAPAKPAPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
__Al$ = 20						; size = 4
??$_Uninitialized_copy@PAPAKPAPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z PROC ; std::_Uninitialized_copy<unsigned long * *,unsigned long * *,std::allocator<unsigned long *> >, COMDAT

; 117  : 	{	// copy [_First, _Last) to raw _Dest, using _Al

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR __First$[ebp]
	push	esi

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	esi, DWORD PTR __Dest$[ebp]
	push	edi

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, DWORD PTR __Last$[ebp]
	sub	edi, eax

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	esi
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	eax, DWORD PTR [edi+esi]
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 127  : 	}

	pop	ebp
	ret	0
??$_Uninitialized_copy@PAPAKPAPAKV?$allocator@PAK@std@@@std@@YAPAPAKPAPAK00AAU?$_Wrap_alloc@V?$allocator@PAK@std@@@0@@Z ENDP ; std::_Uninitialized_copy<unsigned long * *,unsigned long * *,std::allocator<unsigned long *> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$_Destroy_range@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Al$ = 16						; size = 4
??$_Destroy_range@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z PROC ; std::_Destroy_range<std::allocator<std::array<int,4> >,std::array<int,4> *>, COMDAT

; 1215 : 		// note that this is an optimization for debug mode codegen;
; 1216 : 		// in release mode the BE removes all of this
; 1217 : 	typedef typename _Alloc::value_type _Val;
; 1218 : 	_Destroy_range1(_First, _Last, _Al, _Conjunction_t<
; 1219 : 		is_trivially_destructible<_Val>,
; 1220 : 		_Uses_default_destroy<_Alloc, _Val *>>());
; 1221 : 	}

	ret	0
??$_Destroy_range@V?$allocator@V?$array@H$03@std@@@std@@PAV?$array@H$03@2@@std@@YAXPAV?$array@H$03@0@0AAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@0@@Z ENDP ; std::_Destroy_range<std::allocator<std::array<int,4> >,std::array<int,4> *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1><>, COMDAT
; _this$ = ecx

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [ecx], 0

; 304  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [ecx+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [ecx+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [ecx+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::destroy<std::_Container_proxy>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<unsigned long> > &>, COMDAT
; _this$ = ecx

; 1054 : 		}

	mov	eax, ecx
	ret	4
??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::_Wrap_alloc<std::allocator<std::_Container_proxy> ><std::_Wrap_alloc<std::allocator<unsigned long> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QBEPAU_Container_proxy@2@AAU32@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QBEPAU_Container_proxy@2@AAU32@@Z PROC ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address, COMDAT
; _this$ = ecx

; 1026 : 		{	// return address of mutable _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 1027 : 		return (pointer_traits<pointer>::pointer_to(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 1028 : 		}

	pop	ebp
	ret	4
?address@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QBEPAU_Container_proxy@2@AAU32@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::_Container_proxy> >::address
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 536870911				; 1fffffffH
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 3

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC ; std::allocator<std::_Container_proxy>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ENDP ; std::allocator<std::_Container_proxy>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@_W@std@@YAPA_WAA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@_W@std@@YAPA_WAA_W@Z PROC			; std::addressof<wchar_t>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@_W@std@@YAPA_WAA_W@Z ENDP			; std::addressof<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@D@std@@YAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@D@std@@YAPADAAD@Z PROC			; std::addressof<char>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@D@std@@YAPADAAD@Z ENDP			; std::addressof<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::destroy<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@PAD@std@@YAPAPADAAPAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAD@std@@YAPAPADAAPAD@Z PROC		; std::addressof<char *>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@PAD@std@@YAPAPADAAPAD@Z ENDP		; std::addressof<char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::destroy<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z PROC		; std::addressof<wchar_t *>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@PA_W@std@@YAPAPA_WAAPA_W@Z ENDP		; std::addressof<wchar_t *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z PROC	; std::pointer_traits<char *>::pointer_to, COMDAT

; 289  : 		{	// convert raw reference to pointer

	npad	2
	push	ebp
	mov	ebp, esp

; 290  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 291  : 		}

	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PAD@std@@SAPADAAD@Z ENDP	; std::pointer_traits<char *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@D@std@@YAPADPAD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@D@std@@YAPADPAD@Z PROC			; std::_Unfancy<char>, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@D@std@@YAPADPAD@Z ENDP			; std::_Unfancy<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1054 : 		}

	mov	eax, ecx
	ret	4
??$?0V?$allocator@_W@std@@@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAV?$allocator@_W@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> ><std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?pointer_to@?$pointer_traits@PA_W@std@@SAPA_WAA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?pointer_to@?$pointer_traits@PA_W@std@@SAPA_WAA_W@Z PROC ; std::pointer_traits<wchar_t *>::pointer_to, COMDAT

; 289  : 		{	// convert raw reference to pointer

	npad	2
	push	ebp
	mov	ebp, esp

; 290  : 		return (_STD addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 291  : 		}

	pop	ebp
	ret	0
?pointer_to@?$pointer_traits@PA_W@std@@SAPA_WAA_W@Z ENDP ; std::pointer_traits<wchar_t *>::pointer_to
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@_W@std@@YAPA_WPA_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@_W@std@@YAPA_WPA_W@Z PROC			; std::_Unfancy<wchar_t>, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@_W@std@@YAPA_WPA_W@Z ENDP			; std::_Unfancy<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ
_TEXT	SEGMENT
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR [ecx]
	push	esi
	test	eax, eax
	jne	SHORT $LN7@operator
	xor	esi, esi
	jmp	SHORT $LN8@operator
$LN7@operator:
	mov	esi, DWORD PTR [eax]
$LN8@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, edx
	mov	eax, DWORD PTR [esi+8]

; 339  : 		size_type _Off = _Myoff % _DEQUESIZ;

	and	edx, 3

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	dec	eax
	shr	ecx, 2
	and	ecx, eax

; 340  : 		return (_Mycont->_Map[_Block][_Off]);

	mov	eax, DWORD PTR [esi+4]
	pop	esi
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4]

; 583  : 		return ((reference)**(_Mybase *)this);
; 584  : 		}

	ret	0
??D?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEAAKXZ ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 565  : 		{	// construct with offset _Off in *_Pdeque

	npad	2
	push	ebp
	mov	ebp, esp

; 301  : 		: _Myoff(_Off)

	mov	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [ecx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 170  : 		if (_Parent == 0)

	mov	eax, DWORD PTR __Pdeque$[ebp]

; 133  : 		: _Myproxy(0), _Mynextiter(0)

	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0

; 170  : 		if (_Parent == 0)

	test	eax, eax
	je	SHORT $LN13@Deque_iter

; 171  : 			{	// no future parent, just disown current parent
; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 			_Lockit _Lock(_LOCK_DEBUG);
; 174  : 			_Orphan_me();
; 175  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 176  : 			}
; 177  : 		else
; 178  : 			{	// have a parent, do adoption
; 179  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 180  : 
; 181  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 182  : 			if (_Myproxy != _Parent_proxy)
; 183  : 				{	// change parentage
; 184  : 				_Lockit _Lock(_LOCK_DEBUG);
; 185  : 				_Orphan_me();
; 186  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 187  : 				_Parent_proxy->_Myfirstiter = this;
; 188  : 				_Myproxy = _Parent_proxy;
; 189  : 				}
; 190  : 
; 191  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 192  : 			_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@Deque_iter:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 566  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::~_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z
_TEXT	SEGMENT
__Pdeque$ = 8						; size = 4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Setcont, COMDAT
; _this$ = ecx

; 511  : 		{	// set container pointer

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 170  : 		if (_Parent == 0)

	mov	eax, DWORD PTR __Pdeque$[ebp]
	test	eax, eax
	je	SHORT $LN5@Setcont

; 171  : 			{	// no future parent, just disown current parent
; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 			_Lockit _Lock(_LOCK_DEBUG);
; 174  : 			_Orphan_me();
; 175  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 176  : 			}
; 177  : 		else
; 178  : 			{	// have a parent, do adoption
; 179  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 180  : 
; 181  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 182  : 			if (_Myproxy != _Parent_proxy)
; 183  : 				{	// change parentage
; 184  : 				_Lockit _Lock(_LOCK_DEBUG);
; 185  : 				_Orphan_me();
; 186  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 187  : 				_Parent_proxy->_Myfirstiter = this;
; 188  : 				_Myproxy = _Parent_proxy;
; 189  : 				}
; 190  : 
; 191  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 192  : 			_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN5@Setcont:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 513  : 		}

	pop	ebp
	ret	4
?_Setcont@?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAEXPBV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Setcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ
_TEXT	SEGMENT
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR [ecx]
	push	esi
	test	eax, eax
	jne	SHORT $LN5@operator
	xor	esi, esi
	jmp	SHORT $LN6@operator
$LN5@operator:
	mov	esi, DWORD PTR [eax]
$LN6@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, edx
	mov	eax, DWORD PTR [esi+8]

; 321  : 		const auto _Mycont = static_cast<const _Mydeque *>(this->_Getcont());
; 322  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 323  : 		if (_Mycont == 0
; 324  : 			|| this->_Myoff < _Mycont->_Myoff
; 325  : 			|| _Mycont->_Myoff + _Mycont->_Mysize <= this->_Myoff)
; 326  : 		{	// report error
; 327  : 		_DEBUG_ERROR("deque iterator not dereferencable");
; 328  : 		}
; 329  : 
; 330  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 331  : 		_SCL_SECURE_VALIDATE(_Mycont != 0);
; 332  : 		_SCL_SECURE_VALIDATE_RANGE(_Mycont->_Myoff <= this->_Myoff
; 333  : 			&& this->_Myoff < _Mycont->_Myoff + _Mycont->_Mysize);
; 334  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 335  : 
; 336  : 		_Analysis_assume_(_Mycont != 0);
; 337  : 
; 338  : 		size_type _Block = _Mycont->_Getblock(_Myoff);
; 339  : 		size_type _Off = _Myoff % _DEQUESIZ;

	and	edx, 3

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	dec	eax
	shr	ecx, 2
	and	ecx, eax

; 340  : 		return (_Mycont->_Map[_Block][_Off]);

	mov	eax, DWORD PTR [esi+4]
	pop	esi
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4]

; 341  : 		}

	ret	0
??D?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QBEABKXZ ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Pdeque$ = 12						; size = 4
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z PROC ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >, COMDAT
; _this$ = ecx

; 302  : 		{	// construct with offset _Off in *_Pdeque

	npad	2
	push	ebp
	mov	ebp, esp

; 301  : 		: _Myoff(_Off)

	mov	eax, DWORD PTR __Off$[ebp]
	mov	DWORD PTR [ecx+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 170  : 		if (_Parent == 0)

	mov	eax, DWORD PTR __Pdeque$[ebp]

; 133  : 		: _Myproxy(0), _Mynextiter(0)

	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0

; 170  : 		if (_Parent == 0)

	test	eax, eax
	je	SHORT $LN11@Deque_cons

; 171  : 			{	// no future parent, just disown current parent
; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 			_Lockit _Lock(_LOCK_DEBUG);
; 174  : 			_Orphan_me();
; 175  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 176  : 			}
; 177  : 		else
; 178  : 			{	// have a parent, do adoption
; 179  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 180  : 
; 181  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 182  : 			if (_Myproxy != _Parent_proxy)
; 183  : 				{	// change parentage
; 184  : 				_Lockit _Lock(_LOCK_DEBUG);
; 185  : 				_Orphan_me();
; 186  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 187  : 				_Parent_proxy->_Myfirstiter = this;
; 188  : 				_Myproxy = _Parent_proxy;
; 189  : 				}
; 190  : 
; 191  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 192  : 			_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN11@Deque_cons:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 304  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_Deque_const_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@std@@QAE@IPBU_Container_base12@1@@Z ENDP ; std::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >::_Deque_const_iterator<std::_Deque_val<std::_Deque_simple_types<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long>, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@K@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAK@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
_<_Args_0>$ = 12					; size = 4
??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>, COMDAT
; _this$ = ecx

; 1095 : 		{	// construct _Ty(_Types...) at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	ecx, DWORD PTR __Ptr$[ebp]
	test	ecx, ecx
	je	SHORT $LN13@construct
	mov	eax, DWORD PTR _<_Args_0>$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN13@construct:

; 1096 : 		_Mytraits::construct(*this, _Ptr,
; 1097 : 			_STD forward<_Types>(_Args)...);
; 1098 : 		}

	pop	ebp
	ret	8
??$construct@KABK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKABK@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::construct<unsigned long,unsigned long const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$_Unfancy@K@std@@YAPAKPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$_Unfancy@K@std@@YAPAKPAK@Z PROC			; std::_Unfancy<unsigned long>, COMDAT

; 642  : 	{	// do nothing for plain pointers

	npad	2
	push	ebp
	mov	ebp, esp

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR __Ptr$[ebp]

; 644  : 	}

	pop	ebp
	ret	0
??$_Unfancy@K@std@@YAPAKPAK@Z ENDP			; std::_Unfancy<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long *>, COMDAT
; _this$ = ecx

; 1103 : 		_Mytraits::destroy(*this, _Ptr);
; 1104 : 		}

	ret	4
??$destroy@PAK@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAPAK@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::destroy<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@PAK@std@@YAPAPAKAAPAK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@PAK@std@@YAPAPAKAAPAK@Z PROC		; std::addressof<unsigned long *>, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@PAK@std@@YAPAPAKAAPAK@Z ENDP		; std::addressof<unsigned long *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long *> >::_Wrap_alloc<std::allocator<unsigned long *> ><std::_Wrap_alloc<std::allocator<unsigned long> > &>, COMDAT
; _this$ = ecx

; 1054 : 		}

	mov	eax, ecx
	ret	4
??$?0AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAE@AAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long *> >::_Wrap_alloc<std::allocator<unsigned long *> ><std::_Wrap_alloc<std::allocator<unsigned long> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1><>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	mov	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 304  : 		}

	ret	4
??$?0$$V@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAE@U_Zero_then_variadic_args_t@1@@Z ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1><>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@YA$$QAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<char,std::char_traits<char>,std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1705 : 		}

	mov	eax, ecx

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 1705 : 		}

	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@D@std@@@std@@X@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > ><std::_Wrap_alloc<std::allocator<char> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<char> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@D@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@D@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<char> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<char> > >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@D@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ENDP ; std::move<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1705 : 		}

	mov	eax, ecx

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 1705 : 		}

	ret	4
??$?0U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@X@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@1@@Z ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > ><std::_Wrap_alloc<std::allocator<wchar_t> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<wchar_t> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
;	COMDAT ??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z PROC ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT

; 629  : 	{	// return address of _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 630  : 	return (__builtin_addressof(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 631  : 	}

	pop	ebp
	ret	0
??$addressof@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPAV?$_String_val@U?$_Simple_types@_W@std@@@0@AAV10@@Z ENDP ; std::addressof<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAV?$deque@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$deque@KV?$allocator@K@std@@@0@AAV10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAV?$deque@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$deque@KV?$allocator@K@std@@@0@AAV10@@Z PROC ; std::move<std::deque<unsigned long,std::allocator<unsigned long> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAV?$deque@KV?$allocator@K@std@@@std@@@std@@YA$$QAV?$deque@KV?$allocator@K@std@@@0@AAV10@@Z ENDP ; std::move<std::deque<unsigned long,std::allocator<unsigned long> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@X@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@X@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > ><std::_Wrap_alloc<std::allocator<unsigned long> >,void>, COMDAT
; _this$ = ecx

; 807  : 		{	// construct allocator from _Al

	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [esi+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [esi+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [esi+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN34@allocator
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN101@allocator:
$LN34@allocator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi

; 808  : 		_Alloc_proxy();
; 809  : 		}

	mov	eax, esi
	pop	esi
	ret	4
$LN100@allocator:
??$?0U?$_Wrap_alloc@V?$allocator@K@std@@@std@@X@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@1@@Z ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > ><std::_Wrap_alloc<std::allocator<unsigned long> >,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\type_traits
;	COMDAT ??$move@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z
_TEXT	SEGMENT
__Arg$ = 8						; size = 4
??$move@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z PROC ; std::move<std::_Wrap_alloc<std::allocator<unsigned long> > &>, COMDAT

; 1350 : 	{	// forward _Arg as movable

	npad	2
	push	ebp
	mov	ebp, esp

; 1351 : 	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));

	mov	eax, DWORD PTR __Arg$[ebp]

; 1352 : 	}

	pop	ebp
	ret	0
??$move@AAU?$_Wrap_alloc@V?$allocator@K@std@@@std@@@std@@YA$$QAU?$_Wrap_alloc@V?$allocator@K@std@@@0@AAU10@@Z ENDP ; std::move<std::_Wrap_alloc<std::allocator<unsigned long> > &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z
_TEXT	SEGMENT
__Newsize$1$ = -8					; size = 4
__Newvec$1$ = -4					; size = 4
_<_Val_0>$ = 8						; size = 4
??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::emplace_back<std::array<int,4> const &>, COMDAT
; _this$ = ecx

; 908  : 		{	// insert by perfectly forwarding into element at end, provide strong guarantee

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	esi, ecx
	push	edi

; 1731 : 		return (this->_Myend() != this->_Mylast());

	mov	edx, DWORD PTR [esi+8]
	mov	edi, DWORD PTR [esi+4]
	cmp	edx, edi

; 909  : 		if (_Has_unused_capacity())

	je	SHORT $LN2@emplace_ba
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	edi, edi
	je	SHORT $LN70@emplace_ba
	mov	eax, DWORD PTR _<_Val_0>$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [edi], xmm0
$LN70@emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 902  : 		++this->_Mylast();

	add	DWORD PTR [esi+4], 16			; 00000010H
	pop	edi
	pop	esi

; 929  : 			_Emplaced = true;
; 930  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 931  : 			_CATCH_ALL
; 932  : 			if (_Emplaced)
; 933  : 				{
; 934  : 				this->_Getal().destroy(_Unfancy(_Newvec + _Oldsize));
; 935  : 				}
; 936  : 
; 937  : 			this->_Getal().deallocate(_Newvec, _Newcapacity);
; 938  : 			_RERAISE;
; 939  : 			_CATCH_END
; 940  : 
; 941  : 			_Change_array(_Newvec, _Newsize, _Newcapacity);
; 942  : 			}
; 943  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@emplace_ba:

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [esi]
	sub	edi, eax
	sar	edi, 4

; 910  : 			{
; 911  : 			_Emplace_back_with_unused_capacity(_STD forward<_Valty>(_Val)...);
; 912  : 			}
; 913  : 		else
; 914  : 			{	// reallocate
; 915  : 			const size_type _Oldsize = size();
; 916  : 
; 917  : 			if (_Oldsize == max_size())

	cmp	edi, 268435455				; 0fffffffH
	je	$LN365@emplace_ba

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	sub	edx, eax

; 920  : 				}
; 921  : 
; 922  : 			const size_type _Newsize = _Oldsize + 1;

	lea	ecx, DWORD PTR [edi+1]

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	sar	edx, 4

; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	eax, 268435455				; 0fffffffH
	push	ebx
	mov	ebx, edx

; 920  : 				}
; 921  : 
; 922  : 			const size_type _Newsize = _Oldsize + 1;

	mov	DWORD PTR __Newsize$1$[ebp], ecx

; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	shr	ebx, 1
	sub	eax, ebx
	cmp	edx, eax
	jbe	SHORT $LN146@emplace_ba

; 1893 : 			{
; 1894 : 			return (_Newsize);	// geometric growth would overflow

	mov	ebx, ecx
	jmp	SHORT $LN147@emplace_ba
$LN146@emplace_ba:

; 1895 : 			}
; 1896 : 
; 1897 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	add	ebx, edx

; 1898 : 
; 1899 : 		if (_Geometric < _Newsize)

	cmp	ebx, ecx
	cmovb	ebx, ecx
$LN147@emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	ebx
	mov	ecx, esi
	call	?allocate@?$allocator@V?$array@H$03@std@@@std@@QAEPAV?$array@H$03@2@I@Z ; std::allocator<std::array<int,4> >::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 925  : 			const pointer _Newvec = this->_Getal().allocate(_Newcapacity);

	mov	edx, eax

; 926  : 
; 927  : 			_TRY_BEGIN
; 928  : 			this->_Getal().construct(_Unfancy(_Newvec + _Oldsize), _STD forward<_Valty>(_Val)...);

	add	edi, edi
	mov	DWORD PTR __Newvec$1$[ebp], edx
	lea	eax, DWORD PTR [edx+edi*8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	eax, eax
	je	SHORT $LN219@emplace_ba
	mov	ecx, DWORD PTR _<_Val_0>$[ebp]
	movups	xmm0, XMMWORD PTR [ecx]
	movups	XMMWORD PTR [eax], xmm0
$LN219@emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2296 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

	mov	ecx, DWORD PTR [esi]

; 2297 : 	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
; 2298 : 	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	eax, DWORD PTR [esi+4]
	sub	eax, ecx

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	eax
	push	ecx
	push	edx
	call	DWORD PTR __imp__memmove
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1934 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1934 : 		if (this->_Myfirst() != pointer())

	test	ecx, ecx
	je	SHORT $LN271@emplace_ba

; 1937 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1937 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN271@emplace_ba:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1941 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$1$[ebp]
	mov	ecx, DWORD PTR __Newvec$1$[ebp]
	shl	eax, 4

; 1942 : 		this->_Myend() = _Newvec + _Newcapacity;

	shl	ebx, 4
	add	eax, ecx
	mov	DWORD PTR [esi], ecx
	add	ebx, ecx
	mov	DWORD PTR [esi+4], eax
	mov	DWORD PTR [esi+8], ebx
	pop	ebx
	pop	edi
	pop	esi

; 929  : 			_Emplaced = true;
; 930  : 			_Umove_if_noexcept(this->_Myfirst(), this->_Mylast(), _Newvec);
; 931  : 			_CATCH_ALL
; 932  : 			if (_Emplaced)
; 933  : 				{
; 934  : 				this->_Getal().destroy(_Unfancy(_Newvec + _Oldsize));
; 935  : 				}
; 936  : 
; 937  : 			this->_Getal().deallocate(_Newvec, _Newcapacity);
; 938  : 			_RERAISE;
; 939  : 			_CATCH_END
; 940  : 
; 941  : 			_Change_array(_Newvec, _Newsize, _Newcapacity);
; 942  : 			}
; 943  : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
$LN365@emplace_ba:

; 918  : 				{
; 919  : 				_Xlength();

	call	?_Xlength@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@CAXXZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Xlength
$LN367@emplace_ba:
$LN364@emplace_ba:
	int	3
??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::emplace_back<std::array<int,4> const &>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??__ESK_HostApp@@YAXXZ
text$di	SEGMENT
??__ESK_HostApp@@YAXXZ PROC				; `dynamic initializer for 'SK_HostApp'', COMDAT

; 3035 : SK_HostAppUtil SK_HostApp;

	mov	ecx, OFFSET ?SK_HostApp@@3VSK_HostAppUtil@@A ; SK_HostApp
	jmp	??0SK_HostAppUtil@@QAE@XZ		; SK_HostAppUtil::SK_HostAppUtil
??__ESK_HostApp@@YAXXZ ENDP				; `dynamic initializer for 'SK_HostApp''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
;	COMDAT ??$unique@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@Utest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@V10@0Utest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$unique@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@Utest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@V10@0Utest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@Z PROC ; std::unique<std::_String_iterator<std::_String_val<std::_Simple_types<char> > >,`SK_StripTrailingSlashesA'::`2'::test_slashes>, COMDAT

; 1449 : 	{	// remove each satisfying _Pred with previous

	npad	2
	push	ebp
	mov	ebp, esp

; 1451 : 	return (_Rechecked(_First,

	lea	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Unique_unchecked@PADUtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YAPADPAD0AAUtest_slashes@?1??SK_StripTrailingSlashesA@@YAX0@Z@@Z ; std::_Unique_unchecked<char *,`SK_StripTrailingSlashesA'::`2'::test_slashes>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1520 : 	return (_Iter._Rechecked(_Right));

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1520 : 	return (_Iter._Rechecked(_Right));

	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	mov	eax, ecx

; 1452 : 		_Unique_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
; 1453 : 	}

	pop	ebp
	ret	0
??$unique@V?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@Utest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@0@V10@0Utest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@Z ENDP ; std::unique<std::_String_iterator<std::_String_val<std::_Simple_types<char> > >,`SK_StripTrailingSlashesA'::`2'::test_slashes>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+, COMDAT
; _this$ = ecx

; 1480 : 		{	// return this + integer

	npad	2
	push	ebp
	mov	ebp, esp

; 1481 : 		_Myiter _Tmp = *this;
; 1482 : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1295 : 		_Ptr += _Off;

	mov	ecx, DWORD PTR [ecx]
	add	ecx, DWORD PTR __Off$[ebp]

; 1481 : 		_Myiter _Tmp = *this;
; 1482 : 		return (_Tmp += _Off);

	mov	DWORD PTR [eax], ecx

; 1483 : 		}

	pop	ebp
	ret	8
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=, COMDAT
; _this$ = ecx

; 1474 : 		{	// increment by integer

	npad	2
	push	ebp
	mov	ebp, esp

; 1295 : 		_Ptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	add	DWORD PTR [ecx], eax

; 1475 : 		*(_Mybase *)this += _Off;
; 1476 : 		return (*this);

	mov	eax, ecx

; 1477 : 		}

	pop	ebp
	ret	4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT
; _this$ = ecx

; 1246 : 		++_Ptr;

	inc	DWORD PTR [ecx]

; 1449 : 		++*(_Mybase *)this;
; 1450 : 		return (*this);

	mov	eax, ecx

; 1451 : 		}

	ret	0
??E?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ
_TEXT	SEGMENT
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1439 : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [ecx]

; 1440 : 		}

	ret	0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEAADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEPADXZ
_TEXT	SEGMENT
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEPADXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_Unchecked, COMDAT
; _this$ = ecx

; 1434 : 		return (_Const_cast(this->_Ptr));

	mov	eax, DWORD PTR [ecx]

; 1435 : 		}

	ret	0
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEPADXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV12@PAD@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV12@PAD@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_Rechecked, COMDAT
; _this$ = ecx

; 1427 : 		{	// reset from unchecked iterator

	npad	2
	push	ebp
	mov	ebp, esp

; 1428 : 		this->_Ptr = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], eax

; 1429 : 		return (*this);

	mov	eax, ecx

; 1430 : 		}

	pop	ebp
	ret	4
?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV12@PAD@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_Rechecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1421 : 		{	// construct with pointer _Parg

	npad	2
	push	ebp
	mov	ebp, esp

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 1422 : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PADPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<char> > >::_String_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat, COMDAT
; _this$ = ecx

; 1369 : 		}

	ret	4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=, COMDAT
; _this$ = ecx

; 1334 : 		{	// test for iterator inequality

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 1335 : 		return (!(*this == _Right));
; 1336 : 		}

	pop	ebp
	ret	4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==, COMDAT
; _this$ = ecx

; 1328 : 		{	// test for iterator equality

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 1329 : 		_Compat(_Right);
; 1330 : 		return (_Ptr == _Right._Ptr);
; 1331 : 		}

	pop	ebp
	ret	4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-, COMDAT
; _this$ = ecx

; 1317 : 		{	// return difference of iterators

	npad	2
	push	ebp
	mov	ebp, esp

; 1318 : 		_Compat(_Right);
; 1319 : 		return (_Ptr - _Right._Ptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[ebp]
	sub	eax, DWORD PTR [ecx]

; 1320 : 		}

	pop	ebp
	ret	4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=, COMDAT
; _this$ = ecx

; 1279 : 		{	// increment by integer

	npad	2
	push	ebp
	mov	ebp, esp

; 1280 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1281 : 		if (_Off != 0)
; 1282 : 			{
; 1283 : 			_IDL_VERIFY(_Ptr, "cannot seek value-initialized string iterator");
; 1284 : 			const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1285 : 			_IDL_VERIFY(_Mycont != 0, "cannot seek string iterator because the iterator was"
; 1286 : 				" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1287 : 			const auto _Contptr = _Mycont->_Myptr();
; 1288 : 			const auto _Rawptr = _Unfancy(_Ptr);
; 1289 : 			_IDL_VERIFY(_Contptr <= _Rawptr + _Off, "cannot seek string iterator before begin");
; 1290 : 			_IDL_VERIFY(_Rawptr + _Off <= _Contptr + _Mycont->_Mysize,
; 1291 : 				"cannot seek string iterator past end");
; 1292 : 			}
; 1293 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1294 : 
; 1295 : 		_Ptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	add	DWORD PTR [ecx], eax

; 1296 : 		return (*this);

	mov	eax, ecx

; 1297 : 		}

	pop	ebp
	ret	4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++, COMDAT
; _this$ = ecx

; 1237 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1238 : 		_IDL_VERIFY(_Ptr, "cannot increment value-initialized string iterator");
; 1239 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1240 : 		_IDL_VERIFY(_Mycont, "cannot increment string iterator because the iterator was"
; 1241 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1242 : 		_IDL_VERIFY(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize,
; 1243 : 			"cannot increment string iterator past end");
; 1244 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1245 : 
; 1246 : 		++_Ptr;

	inc	DWORD PTR [ecx]

; 1247 : 		return (*this);

	mov	eax, ecx

; 1248 : 		}

	ret	0
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*, COMDAT
; _this$ = ecx

; 1215 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1216 : 		_IDL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");
; 1217 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1218 : 		_IDL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"
; 1219 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1220 : 		const auto _Contptr = _Mycont->_Myptr();
; 1221 : 		const auto _Rawptr = _Unfancy(_Ptr);
; 1222 : 		_IDL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,
; 1223 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1224 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1225 : 
; 1226 : 		_Analysis_assume_(_Ptr);
; 1227 : 		return (*_Ptr);

	mov	eax, DWORD PTR [ecx]

; 1228 : 		}

	ret	0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QBEABDXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >, COMDAT
; _this$ = ecx

; 1196 : 		{	// construct with pointer _Parg

	npad	2
	push	ebp
	mov	ebp, esp

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 1197 : 		this->_Adopt(_Pstring);
; 1198 : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@std@@QAE@PBDPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >::_String_const_iterator<std::_String_val<std::_Simple_types<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??R<lambda_63de45287bdf6a0ff4eac60dbe8f57ba>@@QBE_ND@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
??R<lambda_63de45287bdf6a0ff4eac60dbe8f57ba>@@QBE_ND@Z PROC ; <lambda_63de45287bdf6a0ff4eac60dbe8f57ba>::operator(), COMDAT
; _this$ = ecx

; 2933 :       auto IsSlash = [](char a) -> bool {

	npad	2
	push	ebp
	mov	ebp, esp

; 2934 :         return (a == '\\' || a == '/');

	mov	al, BYTE PTR _a$[ebp]
	cmp	al, 92					; 0000005cH
	je	SHORT $LN3@operator
	cmp	al, 47					; 0000002fH
	je	SHORT $LN3@operator
	xor	al, al

; 2935 :       };

	pop	ebp
	ret	4
$LN3@operator:

; 2934 :         return (a == '\\' || a == '/');

	mov	al, 1

; 2935 :       };

	pop	ebp
	ret	4
??R<lambda_63de45287bdf6a0ff4eac60dbe8f57ba>@@QBE_ND@Z ENDP ; <lambda_63de45287bdf6a0ff4eac60dbe8f57ba>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??Rtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@QBE_NDD@Z
_TEXT	SEGMENT
_a$ = 8							; size = 1
_b$ = 12						; size = 1
??Rtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@QBE_NDD@Z PROC ; `SK_StripTrailingSlashesA'::`2'::test_slashes::operator(), COMDAT
; _this$ = ecx

; 2932 :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 2934 :         return (a == '\\' || a == '/');

	mov	al, BYTE PTR _a$[ebp]
	cmp	al, 92					; 0000005cH
	je	SHORT $LN7@operator
	cmp	al, 47					; 0000002fH
	jne	SHORT $LN3@operator
$LN7@operator:
	mov	al, BYTE PTR _b$[ebp]
	cmp	al, 92					; 0000005cH
	je	SHORT $LN11@operator
	cmp	al, 47					; 0000002fH
	je	SHORT $LN11@operator
$LN3@operator:

; 2935 :       };
; 2936 : 
; 2937 :       return IsSlash (a) && IsSlash (b);

	xor	al, al

; 2938 :     }

	pop	ebp
	ret	8
$LN11@operator:

; 2935 :       };
; 2936 : 
; 2937 :       return IsSlash (a) && IsSlash (b);

	mov	al, 1

; 2938 :     }

	pop	ebp
	ret	8
??Rtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@QBE_NDD@Z ENDP ; `SK_StripTrailingSlashesA'::`2'::test_slashes::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
;	COMDAT ??$unique@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@Utest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@V10@0Utest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
__Pred$ = 20						; size = 1
??$unique@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@Utest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@V10@0Utest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@Z PROC ; std::unique<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,`SK_StripTrailingSlashesW'::`2'::test_slashes>, COMDAT

; 1449 : 	{	// remove each satisfying _Pred with previous

	npad	2
	push	ebp
	mov	ebp, esp

; 1451 : 	return (_Rechecked(_First,

	lea	eax, DWORD PTR __Pred$[ebp]
	push	eax
	push	DWORD PTR __Last$[ebp]
	push	DWORD PTR __First$[ebp]
	call	??$_Unique_unchecked@PA_WUtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YAPA_WPA_W0AAUtest_slashes@?1??SK_StripTrailingSlashesW@@YAX0@Z@@Z ; std::_Unique_unchecked<wchar_t *,`SK_StripTrailingSlashesW'::`2'::test_slashes>
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1520 : 	return (_Iter._Rechecked(_Right));

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1520 : 	return (_Iter._Rechecked(_Right));

	mov	DWORD PTR [ecx], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	mov	eax, ecx

; 1452 : 		_Unique_unchecked(_Unchecked(_First), _Unchecked(_Last), _Pred)));
; 1453 : 	}

	pop	ebp
	ret	0
??$unique@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@Utest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YA?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@V10@0Utest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@Z ENDP ; std::unique<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >,`SK_StripTrailingSlashesW'::`2'::test_slashes>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??H?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE?AV01@H@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Off$ = 12						; size = 4
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE?AV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+, COMDAT
; _this$ = ecx

; 1480 : 		{	// return this + integer

	npad	2
	push	ebp
	mov	ebp, esp

; 1295 : 		_Ptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	mov	ecx, DWORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+eax*2]

; 1481 : 		_Myiter _Tmp = *this;
; 1482 : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 1483 : 		}

	pop	ebp
	ret	8
??H?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE?AV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+=, COMDAT
; _this$ = ecx

; 1474 : 		{	// increment by integer

	npad	2
	push	ebp
	mov	ebp, esp

; 1295 : 		_Ptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, eax
	add	DWORD PTR [ecx], eax

; 1475 : 		*(_Mybase *)this += _Off;
; 1476 : 		return (*this);

	mov	eax, ecx

; 1477 : 		}

	pop	ebp
	ret	4
??Y?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??E?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator++, COMDAT
; _this$ = ecx

; 1246 : 		++_Ptr;

	add	DWORD PTR [ecx], 2

; 1449 : 		++*(_Mybase *)this;
; 1450 : 		return (*this);

	mov	eax, ecx

; 1451 : 		}

	ret	0
??E?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
_TEXT	SEGMENT
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator*, COMDAT
; _this$ = ecx

; 1439 : 		return ((reference)**(_Mybase *)this);

	mov	eax, DWORD PTR [ecx]

; 1440 : 		}

	ret	0
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ
_TEXT	SEGMENT
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked, COMDAT
; _this$ = ecx

; 1434 : 		return (_Const_cast(this->_Ptr));

	mov	eax, DWORD PTR [ecx]

; 1435 : 		}

	ret	0
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Unchecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV12@PA_W@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV12@PA_W@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Rechecked, COMDAT
; _this$ = ecx

; 1427 : 		{	// reset from unchecked iterator

	npad	2
	push	ebp
	mov	ebp, esp

; 1428 : 		this->_Ptr = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	DWORD PTR [ecx], eax

; 1429 : 		return (*this);

	mov	eax, ecx

; 1430 : 		}

	pop	ebp
	ret	4
?_Rechecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV12@PA_W@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Rechecked
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base0@1@@Z PROC ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx

; 1421 : 		{	// construct with pointer _Parg

	npad	2
	push	ebp
	mov	ebp, esp

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 1422 : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base0@1@@Z ENDP ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat, COMDAT
; _this$ = ecx

; 1369 : 		}

	ret	4
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_Compat
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=, COMDAT
; _this$ = ecx

; 1334 : 		{	// test for iterator inequality

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	setne	al

; 1335 : 		return (!(*this == _Right));
; 1336 : 		}

	pop	ebp
	ret	4
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==, COMDAT
; _this$ = ecx

; 1328 : 		{	// test for iterator equality

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR __Right$[ebp]
	mov	ecx, DWORD PTR [ecx]
	cmp	ecx, DWORD PTR [eax]
	sete	al

; 1329 : 		_Compat(_Right);
; 1330 : 		return (_Ptr == _Right._Ptr);
; 1331 : 		}

	pop	ebp
	ret	4
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-, COMDAT
; _this$ = ecx

; 1317 : 		{	// return difference of iterators

	npad	2
	push	ebp
	mov	ebp, esp

; 1318 : 		_Compat(_Right);
; 1319 : 		return (_Ptr - _Right._Ptr);

	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR __Right$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 1

; 1320 : 		}

	pop	ebp
	ret	4
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator-
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+=, COMDAT
; _this$ = ecx

; 1279 : 		{	// increment by integer

	npad	2
	push	ebp
	mov	ebp, esp

; 1280 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1281 : 		if (_Off != 0)
; 1282 : 			{
; 1283 : 			_IDL_VERIFY(_Ptr, "cannot seek value-initialized string iterator");
; 1284 : 			const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1285 : 			_IDL_VERIFY(_Mycont != 0, "cannot seek string iterator because the iterator was"
; 1286 : 				" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1287 : 			const auto _Contptr = _Mycont->_Myptr();
; 1288 : 			const auto _Rawptr = _Unfancy(_Ptr);
; 1289 : 			_IDL_VERIFY(_Contptr <= _Rawptr + _Off, "cannot seek string iterator before begin");
; 1290 : 			_IDL_VERIFY(_Rawptr + _Off <= _Contptr + _Mycont->_Mysize,
; 1291 : 				"cannot seek string iterator past end");
; 1292 : 			}
; 1293 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1294 : 
; 1295 : 		_Ptr += _Off;

	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, eax
	add	DWORD PTR [ecx], eax

; 1296 : 		return (*this);

	mov	eax, ecx

; 1297 : 		}

	pop	ebp
	ret	4
??Y?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@H@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ
_TEXT	SEGMENT
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator++, COMDAT
; _this$ = ecx

; 1237 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1238 : 		_IDL_VERIFY(_Ptr, "cannot increment value-initialized string iterator");
; 1239 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1240 : 		_IDL_VERIFY(_Mycont, "cannot increment string iterator because the iterator was"
; 1241 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1242 : 		_IDL_VERIFY(_Unfancy(_Ptr) < _Mycont->_Myptr() + _Mycont->_Mysize,
; 1243 : 			"cannot increment string iterator past end");
; 1244 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1245 : 
; 1246 : 		++_Ptr;

	add	DWORD PTR [ecx], 2

; 1247 : 		return (*this);

	mov	eax, ecx

; 1248 : 		}

	ret	0
??E?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAEAAV01@XZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator++
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
_TEXT	SEGMENT
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator*, COMDAT
; _this$ = ecx

; 1215 : #if _ITERATOR_DEBUG_LEVEL >= 1
; 1216 : 		_IDL_VERIFY(_Ptr, "cannot dereference value-initialized string iterator");
; 1217 : 		const auto _Mycont = static_cast<const _Mystr *>(this->_Getcont());
; 1218 : 		_IDL_VERIFY(_Mycont, "cannot dereference string iterator because the iterator was"
; 1219 : 			" invalidated (e.g. reallocation occurred, or the string was destroyed)");
; 1220 : 		const auto _Contptr = _Mycont->_Myptr();
; 1221 : 		const auto _Rawptr = _Unfancy(_Ptr);
; 1222 : 		_IDL_VERIFY(_Contptr <= _Rawptr && _Rawptr < _Contptr + _Mycont->_Mysize,
; 1223 : 			"cannot dereference string iterator because it is out of range (e.g. an end iterator)");
; 1224 : #endif /* _ITERATOR_DEBUG_LEVEL >= 1 */
; 1225 : 
; 1226 : 		_Analysis_assume_(_Ptr);
; 1227 : 		return (*_Ptr);

	mov	eax, DWORD PTR [ecx]

; 1228 : 		}

	ret	0
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::operator*
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base0@1@@Z
_TEXT	SEGMENT
__Parg$ = 8						; size = 4
__Pstring$ = 12						; size = 4
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base0@1@@Z PROC ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >, COMDAT
; _this$ = ecx

; 1196 : 		{	// construct with pointer _Parg

	npad	2
	push	ebp
	mov	ebp, esp

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR __Parg$[ebp]
	mov	DWORD PTR [ecx], eax

; 1197 : 		this->_Adopt(_Pstring);
; 1198 : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base0@1@@Z ENDP ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??R<lambda_ea44f988a9b60e4ff8e024aa6e86941e>@@QBE_N_W@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
??R<lambda_ea44f988a9b60e4ff8e024aa6e86941e>@@QBE_N_W@Z PROC ; <lambda_ea44f988a9b60e4ff8e024aa6e86941e>::operator(), COMDAT
; _this$ = ecx

; 2895 :       auto IsSlash = [](wchar_t a) -> bool {

	npad	2
	push	ebp
	mov	ebp, esp

; 2896 :         return (a == L'\\' || a == L'/');

	mov	ax, WORD PTR _a$[ebp]
	cmp	ax, 92					; 0000005cH
	je	SHORT $LN3@operator
	cmp	ax, 47					; 0000002fH
	je	SHORT $LN3@operator
	xor	al, al

; 2897 :       };

	pop	ebp
	ret	4
$LN3@operator:

; 2896 :         return (a == L'\\' || a == L'/');

	mov	al, 1

; 2897 :       };

	pop	ebp
	ret	4
??R<lambda_ea44f988a9b60e4ff8e024aa6e86941e>@@QBE_N_W@Z ENDP ; <lambda_ea44f988a9b60e4ff8e024aa6e86941e>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??Rtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@QBE_N_W1@Z
_TEXT	SEGMENT
_a$ = 8							; size = 2
_b$ = 12						; size = 2
??Rtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@QBE_N_W1@Z PROC ; `SK_StripTrailingSlashesW'::`2'::test_slashes::operator(), COMDAT
; _this$ = ecx

; 2894 :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 2896 :         return (a == L'\\' || a == L'/');

	mov	ax, WORD PTR _a$[ebp]
	cmp	ax, 92					; 0000005cH
	je	SHORT $LN7@operator
	cmp	ax, 47					; 0000002fH
	jne	SHORT $LN3@operator
$LN7@operator:
	mov	ax, WORD PTR _b$[ebp]
	cmp	ax, 92					; 0000005cH
	je	SHORT $LN11@operator
	cmp	ax, 47					; 0000002fH
	je	SHORT $LN11@operator
$LN3@operator:

; 2897 :       };
; 2898 : 
; 2899 :       return IsSlash (a) && IsSlash (b);

	xor	al, al

; 2900 :     }

	pop	ebp
	ret	8
$LN11@operator:

; 2897 :       };
; 2898 : 
; 2899 :       return IsSlash (a) && IsSlash (b);

	mov	al, 1

; 2900 :     }

	pop	ebp
	ret	8
??Rtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@QBE_N_W1@Z ENDP ; `SK_StripTrailingSlashesW'::`2'::test_slashes::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ PROC	; __vcrt_va_start_verify_argument_type<char const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	ret	0
??$__vcrt_va_start_verify_argument_type@QBD@@YAXXZ ENDP	; __vcrt_va_start_verify_argument_type<char const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@QB_W@Z
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Left$ = 12						; size = 4
__Right$ = 16						; size = 4
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@QB_W@Z PROC ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT

; 3802 : 	{	// return string + NTCTS

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, edx
	push	esi
	mov	DWORD PTR $T1[ebp], 0
	lea	esi, DWORD PTR [eax+2]
$LL71@operator:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL71@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, DWORD PTR __Left$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sub	eax, esi
	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 1595 : 		_Mysize(0),

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edx, edx
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [eax], dx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3803 : 	return (_STD move(_Left.append(_Right)));

	mov	eax, ecx

; 3804 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@QB_W@Z ENDP ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wsz8Dot3$ = -72					; size = 28
_wsz8$ = -44						; size = 22
_wszDot3$ = -20						; size = 8
_wszFileName$1$ = -12					; size = 4
_wszFileName1$1$ = -8					; size = 4
_dir$1$ = -1						; size = 1
_wszLongFileName$ = 8					; size = 4
?SK_Generate8Dot3@@YA_NPB_W@Z PROC			; SK_Generate8Dot3

; 2572 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
	push	esi

; 2573 :   wchar_t* wszFileName  = _wcsdup (wszLongFileName);

	mov	esi, DWORD PTR __imp___wcsdup
	push	edi
	mov	edi, DWORD PTR _wszLongFileName$[ebp]
	push	edi
	call	esi
	mov	ebx, eax

; 2574 :   wchar_t* wszFileName1 = _wcsdup (wszLongFileName);

	push	edi
	mov	DWORD PTR _wszFileName$1$[ebp], ebx
	call	esi
	xorps	xmm0, xmm0

; 2575 : 
; 2576 :   wchar_t  wsz8     [11] = { }; // One non-nul for overflow

	mov	DWORD PTR _wsz8$[ebp+16], 0
	mov	edi, eax
	mov	WORD PTR _wsz8$[ebp+20], 0

; 2580 :   while (SK_FileHasSpaces (wszFileName))

	push	ebx
	mov	DWORD PTR _wszFileName1$1$[ebp], edi
	movups	XMMWORD PTR _wsz8$[ebp], xmm0
	mov	DWORD PTR _wsz8Dot3$[ebp+24], 0
	movq	QWORD PTR _wszDot3$[ebp], xmm0
	movups	XMMWORD PTR _wsz8Dot3$[ebp], xmm0
	movq	QWORD PTR _wsz8Dot3$[ebp+16], xmm0
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 12					; 0000000cH
$LN59@SK_Generat:
	test	al, al
	je	$LN3@SK_Generat
	mov	edi, DWORD PTR __imp__GetFileAttributesW@4

; 2581 :   {
; 2582 :     ModifyPrivilege (SE_RESTORE_NAME, TRUE);

	push	1
	push	OFFSET $SG299138
	call	?ModifyPrivilege@@YAJPB_WH@Z		; ModifyPrivilege

; 2583 :     ModifyPrivilege (SE_BACKUP_NAME,  TRUE);

	push	1
	push	OFFSET $SG299139
	call	?ModifyPrivilege@@YAJPB_WH@Z		; ModifyPrivilege
	add	esp, 16					; 00000010H

; 2584 : 
; 2585 :     CHandle hFile (

	push	0
	push	ebx
	call	edi
	or	eax, 33554432				; 02000000H
	push	eax
	push	3
	push	0
	push	6
	push	1073807360				; 40010000H
	push	ebx
	call	DWORD PTR __imp__CreateFileW@28
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2604 :       GetFileAttributes (wszFileName);

	push	ebx
	cmp	esi, -1
	je	$LN43@SK_Generat
	call	edi

; 2605 : 
; 2606 :     if (dwAttrib == INVALID_FILE_ATTRIBUTES)

	cmp	eax, -1
	je	$LN44@SK_Generat

; 2610 : 
; 2611 :       return false;
; 2612 :     }
; 2613 : 
; 2614 :     bool dir = false;
; 2615 : 
; 2616 :     if (dwAttrib & FILE_ATTRIBUTE_DIRECTORY)

	test	al, 16					; 00000010H
	je	SHORT $LN8@SK_Generat

; 2617 :     {
; 2618 :       dir = true;

	mov	BYTE PTR _dir$1$[ebp], 1

; 2619 :     }
; 2620 : 
; 2621 :     else

	jmp	$LN9@SK_Generat
$LN8@SK_Generat:

; 2622 :     {
; 2623 :       dir = false;
; 2624 : 
; 2625 :       const wchar_t* pwszExt =
; 2626 :         PathFindExtension (wszFileName);

	push	ebx
	mov	BYTE PTR _dir$1$[ebp], 0
	call	DWORD PTR __imp__PathFindExtensionW@4
	mov	edi, eax

; 2627 : 
; 2628 :       if (*pwszExt == L'.')

	cmp	WORD PTR [edi], 46			; 0000002eH
	jne	SHORT $LN13@SK_Generat

; 2629 :       {
; 2630 :         if (*CharNextW (pwszExt) != L'\0')

	push	edi
	call	DWORD PTR __imp__CharNextW@4
	cmp	WORD PTR [eax], 0
	je	SHORT $LN13@SK_Generat

; 2631 :         {
; 2632 :           if (*CharNextW (CharNextW (pwszExt)) != L'\0')

	push	edi
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	call	DWORD PTR __imp__CharNextW@4
	cmp	WORD PTR [eax], 0
	je	SHORT $LN13@SK_Generat

; 2633 :           {
; 2634 :             if (*CharNextW (CharNextW (CharNextW (pwszExt))) != L'\0')

	push	edi
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	call	DWORD PTR __imp__CharNextW@4
	cmp	WORD PTR [eax], 0
	je	SHORT $LN13@SK_Generat

; 2635 :             {
; 2636 :               // DOT3 Satisfied
; 2637 :               *CharNextW (CharNextW (CharNextW (CharNextW (pwszExt)))) = L'\0';

	push	edi
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	call	DWORD PTR __imp__CharNextW@4

; 2638 : 
; 2639 :               wcsncpy (wszDot3, CharNextW (pwszExt), 3);

	push	3
	xor	ecx, ecx
	push	edi
	mov	WORD PTR [eax], cx
	call	DWORD PTR __imp__CharNextW@4
	push	eax
	lea	eax, DWORD PTR _wszDot3$[ebp]
	push	eax
	call	DWORD PTR __imp__wcsncpy
	add	esp, 12					; 0000000cH
$LN13@SK_Generat:

; 2640 :             }
; 2641 :           }
; 2642 :         }
; 2643 :       }
; 2644 : 
; 2645 :       PathRemoveExtension (wszFileName);

	push	ebx
	call	DWORD PTR __imp__PathRemoveExtensionW@4
$LN9@SK_Generat:

; 2646 :     }
; 2647 : 
; 2648 :     PathStripPath       (wszFileName);

	push	ebx
	call	DWORD PTR __imp__PathStripPathW@4

; 2649 :     PathRemoveBackslash (wszFileName);

	push	ebx
	call	DWORD PTR __imp__PathRemoveBackslashW@4

; 2650 :     PathRemoveBlanks    (wszFileName);

	push	ebx
	call	DWORD PTR __imp__PathRemoveBlanksW@4

; 2651 : 
; 2652 :     wcsncpy (wsz8, wszFileName, 10);

	push	10					; 0000000aH
	lea	eax, DWORD PTR _wsz8$[ebp]
	push	ebx
	push	eax
	call	DWORD PTR __imp__wcsncpy

; 2653 : 
; 2654 :     wchar_t idx = 0;
; 2655 : 
; 2656 :     if (wcslen (wsz8) > 8)

	lea	ecx, DWORD PTR _wsz8$[ebp]
	add	esp, 12					; 0000000cH
	xor	edi, edi
	lea	edx, DWORD PTR [ecx+2]
	npad	5
$LL56@SK_Generat:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL56@SK_Generat
	sub	ecx, edx
	sar	ecx, 1
	cmp	ecx, 8
	jbe	$LN14@SK_Generat

; 2657 :     {
; 2658 :       wsz8 [6] = L'~';
; 2659 :       wsz8 [7] = L'0';
; 2660 :       wsz8 [8] = L'\0';

	xor	eax, eax
	mov	DWORD PTR _wsz8$[ebp+12], 3145854	; 0030007eH

; 2661 : 
; 2662 :       _swprintf (wsz8Dot3, dir ? L"%s" : L"%s.%s", wsz8, wszDot3);

	cmp	BYTE PTR _dir$1$[ebp], 0
	mov	ecx, OFFSET $SG299153
	mov	WORD PTR _wsz8$[ebp+16], ax
	lea	eax, DWORD PTR _wszDot3$[ebp]
	push	eax
	lea	eax, DWORD PTR _wsz8$[ebp]
	push	eax
	mov	eax, OFFSET $SG299152
	cmove	eax, ecx
	push	eax
	lea	eax, DWORD PTR _wsz8Dot3$[ebp]
	push	eax
	call	__swprintf
	add	esp, 16					; 00000010H

; 2663 : 
; 2664 :       while ((! SetFileShortNameW (hFile, wsz8Dot3)) && idx < 9)

	lea	eax, DWORD PTR _wsz8Dot3$[ebp]
	push	eax
	push	esi
	call	DWORD PTR __imp__SetFileShortNameW@8
	test	eax, eax
	jne	$LN53@SK_Generat
	mov	bl, BYTE PTR _dir$1$[ebp]
$LL4@SK_Generat:
	cmp	di, 9
	jae	SHORT $LN57@SK_Generat

; 2665 :       {
; 2666 :         wsz8 [6] = L'~';

	mov	eax, 126				; 0000007eH

; 2667 :         wsz8 [7] = L'0' + idx++;
; 2668 :         wsz8 [8] = L'\0';
; 2669 : 
; 2670 :         _swprintf (wsz8Dot3, dir ? L"%s" : L"%s.%s", wsz8, wszDot3);

	mov	ecx, OFFSET $SG299155
	mov	WORD PTR _wsz8$[ebp+12], ax
	lea	eax, DWORD PTR [edi+48]
	mov	WORD PTR _wsz8$[ebp+14], ax
	inc	edi
	xor	eax, eax
	test	bl, bl
	mov	WORD PTR _wsz8$[ebp+16], ax
	lea	eax, DWORD PTR _wszDot3$[ebp]
	push	eax
	lea	eax, DWORD PTR _wsz8$[ebp]
	push	eax
	mov	eax, OFFSET $SG299154
	cmove	eax, ecx
	push	eax
	lea	eax, DWORD PTR _wsz8Dot3$[ebp]
	push	eax
	call	__swprintf
	add	esp, 16					; 00000010H
	lea	eax, DWORD PTR _wsz8Dot3$[ebp]
	push	eax
	push	esi
	call	DWORD PTR __imp__SetFileShortNameW@8
	test	eax, eax
	je	SHORT $LL4@SK_Generat

; 2677 :     }
; 2678 : 
; 2679 :     if (idx == 9)

	cmp	di, 9
$LN57@SK_Generat:
	mov	ebx, DWORD PTR _wszFileName$1$[ebp]
	jne	SHORT $LN53@SK_Generat
$LN44@SK_Generat:

; 2607 :     {
; 2608 :       free (wszFileName);

	mov	edi, DWORD PTR __imp__free
	push	ebx
	call	edi

; 2609 :       free (wszFileName1);

	push	DWORD PTR _wszFileName1$1$[ebp]
	call	edi
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	$LN32@SK_Generat

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
	pop	edi
	pop	esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2684 :       return false;

	xor	al, al
	pop	ebx

; 2695 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@SK_Generat:

; 2671 :       }
; 2672 :     }
; 2673 : 
; 2674 :     else
; 2675 :     {
; 2676 :       _swprintf (wsz8Dot3, dir ? L"%s" : L"%s.%s", wsz8, wszDot3);

	cmp	BYTE PTR _dir$1$[ebp], 0
	lea	eax, DWORD PTR _wszDot3$[ebp]
	push	eax
	lea	eax, DWORD PTR _wsz8$[ebp]
	mov	ecx, OFFSET $SG299157
	push	eax
	mov	eax, OFFSET $SG299156
	cmove	eax, ecx
	push	eax
	lea	eax, DWORD PTR _wsz8Dot3$[ebp]
	push	eax
	call	__swprintf
	add	esp, 16					; 00000010H
$LN53@SK_Generat:

; 2685 :     }
; 2686 : 
; 2687 :     PathRemoveFileSpec  (wszFileName1);

	mov	edi, DWORD PTR _wszFileName1$1$[ebp]
	push	edi
	call	DWORD PTR __imp__PathRemoveFileSpecW@4

; 2688 :     wcscpy (wszFileName, wszFileName1);

	mov	edx, ebx
	mov	eax, edi
	sub	edx, edi
	npad	7
$LL18@SK_Generat:
	movzx	ecx, WORD PTR [eax]
	lea	eax, DWORD PTR [eax+2]
	mov	WORD PTR [edx+eax-2], cx
	test	cx, cx
	jne	SHORT $LL18@SK_Generat
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN38@SK_Generat

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN38@SK_Generat:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2580 :   while (SK_FileHasSpaces (wszFileName))

	push	ebx
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 4
	jmp	$LN59@SK_Generat
$LN43@SK_Generat:

; 2586 :       CreateFileW ( wszFileName,
; 2587 :                       GENERIC_WRITE      | DELETE,
; 2588 :                         FILE_SHARE_WRITE | FILE_SHARE_DELETE,
; 2589 :                           nullptr,
; 2590 :                             OPEN_EXISTING,
; 2591 :                               GetFileAttributes (wszFileName) |
; 2592 :                               FILE_FLAG_BACKUP_SEMANTICS,
; 2593 :                                 nullptr ) );
; 2594 : 
; 2595 :     if (hFile == INVALID_HANDLE_VALUE)
; 2596 :     {
; 2597 :       free (wszFileName);

	mov	edi, DWORD PTR __imp__free
	call	edi

; 2598 :       free (wszFileName1);

	push	DWORD PTR _wszFileName1$1$[ebp]
	call	edi
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN32@SK_Generat:
	pop	edi
	pop	esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2684 :       return false;

	xor	al, al
	pop	ebx

; 2695 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@SK_Generat:

; 2689 :   }
; 2690 : 
; 2691 :   free (wszFileName);

	mov	esi, DWORD PTR __imp__free
	push	ebx
	call	esi

; 2692 :   free (wszFileName1);

	push	edi
	call	esi
	add	esp, 8

; 2693 : 
; 2694 :   return true;

	mov	al, 1
	pop	edi
	pop	esi
	pop	ebx

; 2695 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_Generate8Dot3@@YA_NPB_W@Z ENDP			; SK_Generate8Dot3
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_NewState$ = -28					; size = 16
_luid$ = -12						; size = 8
_hToken$ = -4						; size = 4
_szPrivilege$ = 8					; size = 4
_fEnable$ = 12						; size = 4
?ModifyPrivilege@@YAJPB_WH@Z PROC			; ModifyPrivilege

; 2523 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi

; 2524 :     HRESULT hr = S_OK;
; 2525 :     TOKEN_PRIVILEGES NewState;
; 2526 :     LUID             luid;
; 2527 :     HANDLE hToken    = nullptr;
; 2528 : 
; 2529 :     // Open the process token for this process.
; 2530 :     if (!OpenProcessToken(GetCurrentProcess(),

	lea	eax, DWORD PTR _hToken$[ebp]
	xor	esi, esi
	push	eax
	push	40					; 00000028H
	mov	DWORD PTR _hToken$[ebp], esi
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	je	SHORT $LN6@ModifyPriv

; 2531 :                           TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,
; 2532 :                           &hToken ))
; 2533 :     {
; 2534 :         return ERROR_FUNCTION_FAILED;
; 2535 :     }
; 2536 : 
; 2537 :     // Get the local unique ID for the privilege.
; 2538 :     if ( !LookupPrivilegeValue( nullptr,

	lea	eax, DWORD PTR _luid$[ebp]
	push	eax
	push	DWORD PTR _szPrivilege$[ebp]
	push	esi
	call	DWORD PTR __imp__LookupPrivilegeValueW@12
	test	eax, eax
	jne	SHORT $LN3@ModifyPriv

; 2539 :                                 szPrivilege,
; 2540 :                                 &luid ))
; 2541 :     {
; 2542 :         CloseHandle( hToken );

	push	DWORD PTR _hToken$[ebp]
	call	DWORD PTR __imp__CloseHandle@4
$LN6@ModifyPriv:

; 2543 :         return ERROR_FUNCTION_FAILED;

	mov	eax, 1627				; 0000065bH
	pop	esi

; 2567 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@ModifyPriv:

; 2544 :     }
; 2545 : 
; 2546 :     // Assign values to the TOKEN_PRIVILEGE structure.
; 2547 :     NewState.PrivilegeCount            = 1;
; 2548 :     NewState.Privileges [0].Luid       = luid;

	mov	eax, DWORD PTR _luid$[ebp]
	mov	DWORD PTR _NewState$[ebp+4], eax
	mov	eax, DWORD PTR _luid$[ebp+4]
	mov	DWORD PTR _NewState$[ebp+8], eax

; 2549 :     NewState.Privileges [0].Attributes = 

	mov	eax, DWORD PTR _fEnable$[ebp]
	neg	eax
	mov	DWORD PTR _NewState$[ebp], 1

; 2550 :               (fEnable ? SE_PRIVILEGE_ENABLED : 0);
; 2551 : 
; 2552 :     // Adjust the token privilege.
; 2553 :     if (!AdjustTokenPrivileges(hToken,

	push	0
	sbb	eax, eax
	push	0
	and	eax, 2
	push	0
	mov	DWORD PTR _NewState$[ebp+12], eax
	lea	eax, DWORD PTR _NewState$[ebp]
	push	eax
	push	0
	push	DWORD PTR _hToken$[ebp]
	call	DWORD PTR __imp__AdjustTokenPrivileges@24

; 2554 :                                FALSE,
; 2555 :                                &NewState,
; 2556 :                                0,
; 2557 :                                nullptr,
; 2558 :                                nullptr))
; 2559 :     {
; 2560 :         hr = ERROR_FUNCTION_FAILED;
; 2561 :     }
; 2562 : 
; 2563 :     // Close the handle.
; 2564 :     CloseHandle(hToken);

	push	DWORD PTR _hToken$[ebp]
	test	eax, eax
	mov	ecx, 1627				; 0000065bH
	cmove	esi, ecx
	call	DWORD PTR __imp__CloseHandle@4

; 2565 : 
; 2566 :     return hr;

	mov	eax, esi
	pop	esi

; 2567 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?ModifyPrivilege@@YAJPB_WH@Z ENDP			; ModifyPrivilege
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszShortPath$ = -524					; size = 524
_wszLongFileName$ = 8					; size = 4
?SK_FileHas8Dot3Name@@YAHPB_W@Z PROC			; SK_FileHas8Dot3Name

; 2507 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 524				; 0000020cH

; 2508 :   wchar_t wszShortPath [MAX_PATH + 2] = { };

	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	524					; 0000020cH
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2509 :  
; 2510 :   if ((! GetShortPathName   (wszLongFileName, wszShortPath, MAX_PATH - 1)) ||
; 2511 :          GetFileAttributesW (wszShortPath) == INVALID_FILE_ATTRIBUTES      ||

	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	259					; 00000103H
	push	eax
	push	DWORD PTR _wszLongFileName$[ebp]
	call	DWORD PTR __imp__GetShortPathNameW@12
	test	eax, eax
	je	SHORT $LN3@SK_FileHas
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesW@4
	cmp	eax, -1
	je	SHORT $LN3@SK_FileHas
	push	OFFSET $SG299105
	push	DWORD PTR _wszLongFileName$[ebp]
	call	DWORD PTR __imp__StrStrIW@8
	test	eax, eax
	jne	SHORT $LN3@SK_FileHas

; 2515 :   }
; 2516 : 
; 2517 :   return TRUE;

	mov	eax, 1

; 2518 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@SK_FileHas:

; 2512 :          StrStrIW           (wszLongFileName, L" "))
; 2513 :   {
; 2514 :     return FALSE;

	xor	eax, eax

; 2518 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_FileHas8Dot3Name@@YAHPB_W@Z ENDP			; SK_FileHas8Dot3Name
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszLongFileName$ = 8					; size = 4
?SK_FileHasSpaces@@YA_NPB_W@Z PROC			; SK_FileHasSpaces

; 2501 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 2502 :   return StrStrIW (wszLongFileName, L" ") != nullptr;

	push	OFFSET $SG299097
	push	DWORD PTR _wszLongFileName$[ebp]
	call	DWORD PTR __imp__StrStrIW@8
	neg	eax
	sbb	eax, eax
	neg	eax

; 2503 : }

	pop	ebp
	ret	0
?SK_FileHasSpaces@@YA_NPB_W@Z ENDP			; SK_FileHasSpaces
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszInOut$ = 8						; size = 4
?SK_PathRemoveExtension@@YAXPA_W@Z PROC			; SK_PathRemoveExtension

; 2240 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 2241 :   wchar_t *wszEnd  = wszInOut,
; 2242 :           *wszPrev = nullptr;
; 2243 : 
; 2244 :   while (*CharNextW (wszEnd) != L'\0')

	mov	ebx, DWORD PTR __imp__CharNextW@4
	push	esi
	push	edi
	mov	edi, DWORD PTR _wszInOut$[ebp]
	mov	esi, edi
	push	edi
	call	ebx
	cmp	WORD PTR [eax], 0
	je	SHORT $LN3@SK_PathRem
	npad	4
$LL2@SK_PathRem:

; 2245 :     wszEnd = CharNextW (wszEnd);

	push	esi
	call	ebx
	mov	esi, eax
	push	esi
	call	ebx
	cmp	WORD PTR [eax], 0
	jne	SHORT $LL2@SK_PathRem
$LN3@SK_PathRem:

; 2246 : 
; 2247 :   wszPrev = wszEnd;
; 2248 : 
; 2249 :   while (  CharPrevW (wszInOut, wszPrev) > wszInOut &&

	mov	ebx, DWORD PTR __imp__CharPrevW@8
	push	esi
	push	edi
	call	ebx
	cmp	eax, edi
	jbe	SHORT $LN17@SK_PathRem
	npad	4
$LL4@SK_PathRem:
	push	esi
	push	edi
	call	ebx
	cmp	WORD PTR [eax], 46			; 0000002eH
	je	SHORT $LN17@SK_PathRem

; 2250 :           *CharPrevW (wszInOut, wszPrev) != L'.' )
; 2251 :     wszPrev = CharPrevW (wszInOut, wszPrev);

	push	esi
	push	edi
	call	ebx
	mov	esi, eax
	push	esi
	push	edi
	call	ebx
	cmp	eax, edi
	ja	SHORT $LL4@SK_PathRem
$LN17@SK_PathRem:

; 2252 : 
; 2253 :   if (CharPrevW (wszInOut, wszPrev) > wszInOut)

	push	esi
	push	edi
	call	ebx
	cmp	eax, edi
	jbe	SHORT $LN7@SK_PathRem

; 2254 :   {
; 2255 :     if (*CharPrevW (wszInOut, wszPrev) == L'.')

	push	esi
	push	edi
	call	ebx
	cmp	WORD PTR [eax], 46			; 0000002eH
	jne	SHORT $LN7@SK_PathRem

; 2256 :         *CharPrevW (wszInOut, wszPrev)  = L'\0';

	push	esi
	push	edi
	call	ebx
	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN7@SK_PathRem:
	pop	edi
	pop	esi
	pop	ebx

; 2257 :   }
; 2258 : }

	pop	ebp
	ret	0
?SK_PathRemoveExtension@@YAXPA_W@Z ENDP			; SK_PathRemoveExtension
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0sk_host_process_s@@QAE@XZ
_TEXT	SEGMENT
??0sk_host_process_s@@QAE@XZ PROC			; sk_host_process_s::sk_host_process_s, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	push	5200					; 00001450H
	mov	esi, ecx
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, esi
	pop	esi
	ret	0
??0sk_host_process_s@@QAE@XZ ENDP			; sk_host_process_s::sk_host_process_s
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::~CHeapPtr<unsigned char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx

; 267  : 		free(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__free
	add	esp, 4

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::~CHeapPtr<unsigned char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

	mov	eax, DWORD PTR _nElements$[ebp]
	push	esi

; 455  : 	{

	mov	esi, ecx

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

	xor	ecx, ecx

; 137  : 	if(i64Result>UINT_MAX)

	ja	SHORT $LN17@Allocate
	cmp	eax, -1
	ja	SHORT $LN17@Allocate

; 262  : 		return malloc(nBytes);

	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	DWORD PTR [esi], eax
	test	eax, eax
	setne	al
	pop	esi

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);
; 462  : 	}

	pop	ebp
	ret	4
$LN17@Allocate:

; 456  : 		size_t nBytes=0;
; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))
; 458  : 		{
; 459  : 			return false;

	xor	al, al
	pop	esi

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);
; 462  : 	}

	pop	ebp
	ret	4
?Allocate@?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::CHeapPtr<unsigned char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0

; 435  : 	{
; 436  : 	}

	mov	eax, ecx
	ret	0
??0?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<unsigned char,ATL::CCRTAllocator>::CHeapPtr<unsigned char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Free@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

	npad	2
	push	esi
	mov	esi, ecx

; 267  : 		free(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__free
	add	esp, 4

; 408  : 		Allocator::Free(m_pData);
; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 410  : 	}

	ret	0
?Free@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 262  : 		return malloc(nBytes);

	push	DWORD PTR _nBytes$[ebp]

; 381  : 	{

	mov	esi, ecx

; 262  : 		return malloc(nBytes);

	call	DWORD PTR __imp__malloc
	add	esp, 4

; 382  : 		ATLASSERT(m_pData == NULL);
; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	DWORD PTR [esi], eax

; 384  : 		if (m_pData == NULL)

	test	eax, eax
	setne	al
	pop	esi

; 385  : 			return false;
; 386  : 
; 387  : 		return true;
; 388  : 	}

	pop	ebp
	ret	4
?AllocateBytes@?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QBEPAEXZ
_TEXT	SEGMENT
??B?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QBEPAEXZ PROC ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::operator unsigned char *, COMDAT
; _this$ = ecx

; 364  : 		return m_pData;

	mov	eax, DWORD PTR [ecx]

; 365  : 	}

	ret	0
??B?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QBEPAEXZ ENDP ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::operator unsigned char *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::~CHeapPtrBase<unsigned char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

	npad	2
	push	esi
	mov	esi, ecx

; 267  : 		free(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__free
	add	esp, 4

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 350  : 		Free();
; 351  : 	}

	ret	0
??1?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::~CHeapPtrBase<unsigned char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
??0?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0

; 337  : 	}

	mov	eax, ecx
	ret	0
??0?$CHeapPtrBase@EVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>::CHeapPtrBase<unsigned char,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
;	COMDAT ??$min@I@std@@YAABIABI0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$min@I@std@@YAABIABI0@Z PROC				; std::min<unsigned int>, COMDAT

; 3778 : 	{	// return smaller of _Left and _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 3779 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	mov	edx, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	cmovb	eax, edx

; 3780 : 	}

	pop	ebp
	ret	0
??$min@I@std@@YAABIABI0@Z ENDP				; std::min<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_hFile$2 = -44						; size = 4
_buf$3 = -40						; size = 4
_size$1$ = -36						; size = 4
_i64Result$1$ = -32					; size = 4
$T4 = -32						; size = 4
_size$2$ = -28						; size = 4
_qwReadTotal$5 = -24					; size = 8
_qwReadTotal$1$ = -20					; size = 4
_MAX_CHUNK$6 = -20					; size = 4
$T7 = -16						; size = 4
__$EHRec$ = -12						; size = 12
_algorithm$ = 8						; size = 4
_dwReadChunk$8 = 12					; size = 4
_wszFile$ = 12						; size = 4
_callback$ = 16						; size = 4
?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z PROC ; SK_GetFileHash_32

; 1983 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi

; 1984 :   uint32_t _hash32 = 0UL;
; 1985 : 
; 1986 :   uint64_t size =
; 1987 :     SK_GetFileSize (wszFile);

	mov	esi, DWORD PTR _wszFile$[ebp]
	push	esi
	mov	DWORD PTR $T7[ebp], 0
	call	?SK_GetFileSize@@YG_KPB_W@Z		; SK_GetFileSize
	mov	ebx, eax
	mov	eax, edx

; 1988 : 
; 1989 :   // Invalid file
; 1990 :   if (size == 0)

	mov	ecx, ebx
	mov	DWORD PTR _size$1$[ebp], ebx
	or	ecx, eax
	mov	DWORD PTR _size$2$[ebp], eax
	je	$LN16@SK_GetFile

; 1991 :     return _hash32;
; 1992 : 
; 1993 :   switch (algorithm)

	mov	eax, DWORD PTR _algorithm$[ebp]
	dec	eax
	cmp	eax, 1
	ja	$LN16@SK_GetFile

; 1994 :   {
; 1995 :     // Traditional CRC32 (but XOR operands swapped)
; 1996 :     case SK_CRC32_KAL:
; 1997 :     case SK_CRC32C:
; 1998 :     {
; 1999 :       DWORD dwFileAttribs =
; 2000 :         GetFileAttributes (wszFile);

	push	edi
	push	esi
	call	DWORD PTR __imp__GetFileAttributesW@4

; 2002 :       CHandle hFile (

	push	0
	push	eax
	push	3
	push	0
	push	3
	push	-2147483648				; 80000000H
	push	esi
	call	DWORD PTR __imp__CreateFileW@28
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	edi, eax
	mov	DWORD PTR _hFile$2[ebp], edi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2002 :       CHandle hFile (

	mov	DWORD PTR __$EHRec$[ebp+8], 0

; 2003 :         CreateFile ( wszFile,
; 2004 :                        GENERIC_READ,
; 2005 :                          FILE_SHARE_READ |
; 2006 :                          FILE_SHARE_WRITE,
; 2007 :                            nullptr,
; 2008 :                              OPEN_EXISTING,
; 2009 :                                dwFileAttribs,
; 2010 :         nullptr)
; 2011 :       );
; 2012 : 
; 2013 :       if (hFile == INVALID_HANDLE_VALUE)

	cmp	edi, -1
	jne	SHORT $LN11@SK_GetFile
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1258 : 		::CloseHandle( m_h );

	push	edi
	mov	DWORD PTR $T7[ebp], 0
	call	DWORD PTR __imp__CloseHandle@4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2055 :       return _hash32;

	mov	eax, DWORD PTR $T7[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 2056 :     }
; 2057 :     break;
; 2058 : 
; 2059 :     // Invalid Algorithm
; 2060 :     default:
; 2061 :       return _hash32;
; 2062 :   }
; 2063 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN11@SK_GetFile:

; 2021 :         size <= std::numeric_limits <uint32_t>::max () ?

	cmp	DWORD PTR _size$2$[ebp], 0
	mov	DWORD PTR _MAX_CHUNK$6[ebp], 16777216	; 01000000H
	ja	SHORT $LN18@SK_GetFile
	jb	SHORT $LN80@SK_GetFile
	cmp	ebx, -1
	ja	SHORT $LN18@SK_GetFile
$LN80@SK_GetFile:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 3779 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	cmp	ebx, 16777216				; 01000000H
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2021 :         size <= std::numeric_limits <uint32_t>::max () ?

	mov	DWORD PTR $T4[ebp], ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 3779 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	lea	eax, DWORD PTR $T4[ebp]
	lea	ecx, DWORD PTR _MAX_CHUNK$6[ebp]
	cmovae	eax, ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2021 :         size <= std::numeric_limits <uint32_t>::max () ?

	mov	eax, DWORD PTR [eax]
	jmp	SHORT $LN85@SK_GetFile
$LN18@SK_GetFile:
	mov	eax, 16777216				; 01000000H
$LN85@SK_GetFile:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 335  : 		m_pData(NULL)

	xor	esi, esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2021 :         size <= std::numeric_limits <uint32_t>::max () ?

	mov	DWORD PTR _i64Result$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 335  : 		m_pData(NULL)

	mov	DWORD PTR _buf$3[ebp], esi

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

	xor	ecx, ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2025 :       CHeapPtr <uint8_t> buf;

	mov	BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 137  : 	if(i64Result>UINT_MAX)

	ja	SHORT $LN48@SK_GetFile
	jb	SHORT $LN81@SK_GetFile
	cmp	eax, -1
	ja	SHORT $LN48@SK_GetFile
$LN81@SK_GetFile:

; 262  : 		return malloc(nBytes);

	push	eax
	call	DWORD PTR __imp__malloc

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	esi, eax

; 262  : 		return malloc(nBytes);

	add	esp, 4

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	DWORD PTR _buf$3[ebp], esi
$LN48@SK_GetFile:
	xorps	xmm0, xmm0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2028 :       DWORD    dwReadChunk = 0UL;

	mov	DWORD PTR _dwReadChunk$8[ebp], 0

; 2029 :       uint64_t qwReadTotal = 0ULL;

	movlpd	QWORD PTR _qwReadTotal$5[ebp], xmm0
	mov	ebx, DWORD PTR _qwReadTotal$5[ebp+4]
	mov	eax, DWORD PTR _qwReadTotal$5[ebp]
	mov	DWORD PTR _qwReadTotal$1$[ebp], eax
	npad	1
$LL6@SK_GetFile:

; 2030 : 
; 2031 :       do
; 2032 :       {
; 2033 :         ReadFile ( hFile,

	push	0
	lea	eax, DWORD PTR _dwReadChunk$8[ebp]
	push	eax
	push	DWORD PTR _i64Result$1$[ebp]
	push	esi
	push	edi
	call	DWORD PTR __imp__ReadFile@20

; 2034 :                      buf,
; 2035 :                        read_size,
; 2036 :                          &dwReadChunk,
; 2037 :                            nullptr );
; 2038 : 
; 2039 :         switch (algorithm)

	mov	eax, DWORD PTR _algorithm$[ebp]
	sub	eax, 1
	je	SHORT $LN12@SK_GetFile
	sub	eax, 1
	jne	SHORT $LN7@SK_GetFile

; 2043 :             break;
; 2044 : 
; 2045 :           case SK_CRC32C:
; 2046 :             _hash32 = crc32c ( _hash32, buf, dwReadChunk );

	push	DWORD PTR _dwReadChunk$8[ebp]
	push	esi
	push	DWORD PTR $T7[ebp]
	call	_crc32c
	jmp	SHORT $LN86@SK_GetFile
$LN12@SK_GetFile:

; 2040 :         {
; 2041 :           case SK_CRC32_KAL:
; 2042 :             _hash32 = crc32 ( _hash32, buf, dwReadChunk );

	push	DWORD PTR _dwReadChunk$8[ebp]
	push	esi
	push	DWORD PTR $T7[ebp]
	call	_crc32
$LN86@SK_GetFile:
	mov	DWORD PTR $T7[ebp], eax
	add	esp, 12					; 0000000cH
$LN7@SK_GetFile:

; 2047 :             break;
; 2048 :         }
; 2049 :         qwReadTotal += dwReadChunk;

	mov	eax, DWORD PTR _qwReadTotal$1$[ebp]
	add	eax, DWORD PTR _dwReadChunk$8[ebp]

; 2050 : 
; 2051 :         if (callback != nullptr)

	mov	ecx, DWORD PTR _callback$[ebp]
	adc	ebx, 0
	mov	DWORD PTR _qwReadTotal$1$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN4@SK_GetFile

; 2052 :           callback (qwReadTotal, size);

	push	DWORD PTR _size$2$[ebp]
	push	DWORD PTR _size$1$[ebp]
	push	ebx
	push	eax
	call	ecx
	mov	eax, DWORD PTR _qwReadTotal$1$[ebp]
$LN4@SK_GetFile:

; 2053 :       } while ( qwReadTotal < size && dwReadChunk > 0 );

	cmp	ebx, DWORD PTR _size$2$[ebp]
	ja	SHORT $LN15@SK_GetFile
	jb	SHORT $LN82@SK_GetFile
	cmp	eax, DWORD PTR _size$1$[ebp]
	jae	SHORT $LN15@SK_GetFile
$LN82@SK_GetFile:
	cmp	DWORD PTR _dwReadChunk$8[ebp], 0
	ja	SHORT $LL6@SK_GetFile
$LN15@SK_GetFile:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	push	esi
	call	DWORD PTR __imp__free
	add	esp, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	edi, edi
	je	SHORT $LN73@SK_GetFile

; 1258 : 		::CloseHandle( m_h );

	push	edi
	call	DWORD PTR __imp__CloseHandle@4
$LN73@SK_GetFile:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2055 :       return _hash32;

	mov	eax, DWORD PTR $T7[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 2056 :     }
; 2057 :     break;
; 2058 : 
; 2059 :     // Invalid Algorithm
; 2060 :     default:
; 2061 :       return _hash32;
; 2062 :   }
; 2063 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN16@SK_GetFile:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	xor	eax, eax
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z$0:
	lea	ecx, DWORD PTR _hFile$2[ebp]
	jmp	??1CHandle@ATL@@QAE@XZ			; ATL::CHandle::~CHandle
__unwindfunclet$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z$1:
	lea	ecx, DWORD PTR _buf$3[ebp]
	jmp	??1?$CHeapPtr@EVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__ehhandler$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z ENDP ; SK_GetFileHash_32
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
;	COMDAT ??$max@PAE@std@@YAABQAEABQAE0@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$max@PAE@std@@YAABQAEABQAE0@Z PROC			; std::max<unsigned char *>, COMDAT

; 3742 : 	{	// return larger of _Left and _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 3743 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	mov	eax, DWORD PTR __Left$[ebp]
	mov	ecx, DWORD PTR __Right$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx]
	cmovb	eax, ecx

; 3744 : 	}

	pop	ebp
	ret	0
??$max@PAE@std@@YAABQAEABQAE0@Z ENDP			; std::max<unsigned char *>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\utility.h
;	COMDAT ??$static_cast_p2p@XULANGANDCODEPAGE@?1??SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z@@@YAPAPAXPAPAULANGANDCODEPAGE@?1??SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z@@Z
_TEXT	SEGMENT
_p2p$ = 8						; size = 4
??$static_cast_p2p@XULANGANDCODEPAGE@?1??SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z@@@YAPAPAXPAPAULANGANDCODEPAGE@?1??SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z@@Z PROC ; static_cast_p2p<void,`SK_GetDLLVersionStr'::`2'::LANGANDCODEPAGE>, COMDAT

; 53   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 54   :       return static_cast <T **> (

	mov	eax, DWORD PTR _p2p$[ebp]

; 55   :                static_cast <T*>   ( p2p )
; 56   :                                 );
; 57   :     };

	pop	ebp
	ret	0
??$static_cast_p2p@XULANGANDCODEPAGE@?1??SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z@@@YAPAPAXPAPAULANGANDCODEPAGE@?1??SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z@@Z ENDP ; static_cast_p2p<void,`SK_GetDLLVersionStr'::`2'::LANGANDCODEPAGE>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\utility.h
;	COMDAT ??$static_cast_p2p@X_W@@YAPAPAXPAPA_W@Z
_TEXT	SEGMENT
_p2p$ = 8						; size = 4
??$static_cast_p2p@X_W@@YAPAPAXPAPA_W@Z PROC		; static_cast_p2p<void,wchar_t>, COMDAT

; 53   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 54   :       return static_cast <T **> (

	mov	eax, DWORD PTR _p2p$[ebp]

; 55   :                static_cast <T*>   ( p2p )
; 56   :                                 );
; 57   :     };

	pop	ebp
	ret	0
??$static_cast_p2p@X_W@@YAPAPAXPAPA_W@Z ENDP		; static_cast_p2p<void,wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\utility.h
;	COMDAT ??$static_cast_p2p@XULANGANDCODEPAGE@?1??SK_IsDLLSpecialK@@YG_NPB_W@Z@@@YAPAPAXPAPAULANGANDCODEPAGE@?1??SK_IsDLLSpecialK@@YG_NPB_W@Z@@Z
_TEXT	SEGMENT
_p2p$ = 8						; size = 4
??$static_cast_p2p@XULANGANDCODEPAGE@?1??SK_IsDLLSpecialK@@YG_NPB_W@Z@@@YAPAPAXPAPAULANGANDCODEPAGE@?1??SK_IsDLLSpecialK@@YG_NPB_W@Z@@Z PROC ; static_cast_p2p<void,`SK_IsDLLSpecialK'::`2'::LANGANDCODEPAGE>, COMDAT

; 53   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 54   :       return static_cast <T **> (

	mov	eax, DWORD PTR _p2p$[ebp]

; 55   :                static_cast <T*>   ( p2p )
; 56   :                                 );
; 57   :     };

	pop	ebp
	ret	0
??$static_cast_p2p@XULANGANDCODEPAGE@?1??SK_IsDLLSpecialK@@YG_NPB_W@Z@@@YAPAPAXPAPAULANGANDCODEPAGE@?1??SK_IsDLLSpecialK@@YG_NPB_W@Z@@Z ENDP ; static_cast_p2p<void,`SK_IsDLLSpecialK'::`2'::LANGANDCODEPAGE>
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV01@@Z PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	DWORD PTR ___that$[ebp]
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	call	??0?$deque@KV?$allocator@K@std@@@std@@QAE@$$QAV01@@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::~queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx

; 1244 : 		_Tidy();

	call	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 866  : 		_Myproxy() = 0;

	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::~queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
;	COMDAT ?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::pop, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1496 : 		if (--this->_Mysize() == 0)

	add	DWORD PTR [ecx+16], -1
	jne	SHORT $LN4@pop

; 1497 : 			this->_Myoff() = 0;

	mov	DWORD PTR [ecx+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 135  : 		}

	ret	0
$LN4@pop:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1499 : 			++this->_Myoff();

	inc	DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 135  : 		}

	ret	0
?pop@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::pop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
;	COMDAT ?push@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXABK@Z PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::push, COMDAT
; _this$ = ecx

; 128  : 		{	// insert element at beginning

	npad	2
	push	ebp
	mov	ebp, esp

; 130  : 		}

	pop	ebp

; 129  : 		c.push_back(_Val);

	jmp	?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back
?push@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEXABK@Z ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::push
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
;	COMDAT ?front@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEAAKXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?front@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEAAKXZ PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::front, COMDAT
; _this$ = ecx

; 108  : 		{	// return first element of mutable queue

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1446 : 		return (*begin());

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	eax
	call	?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $LN12@front
$LN11@front:
	mov	esi, DWORD PTR [esi]
$LN12@front:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	edx, DWORD PTR [eax+8]
	mov	ecx, edx
	mov	eax, DWORD PTR [esi+8]
	dec	eax
	shr	ecx, 2
	and	ecx, eax

; 340  : 		return (_Mycont->_Map[_Block][_Off]);

	mov	eax, DWORD PTR [esi+4]
	and	edx, 3
	pop	esi
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 110  : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?front@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAEAAKXZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
;	COMDAT ?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::empty, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1397 : 		return (this->_Mysize() == 0);

	cmp	DWORD PTR [ecx+16], 0
	sete	al
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 100  : 		}

	ret	0
?empty@?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QBE_NXZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
;	COMDAT ??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 33   : 		{	// construct with empty container

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 33   : 		{	// construct with empty container

	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [esi+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [esi+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [esi+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN34@queue
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN103@queue:
$LN34@queue:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 34   : 		}

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN102@queue:
??0?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >::queue<unsigned long,std::deque<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ
_TEXT	SEGMENT
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy, COMDAT
; _this$ = ecx

; 1863 : 		{	// free all storage

	npad	2
	push	esi
	mov	esi, ecx

; 1397 : 		return (this->_Mysize() == 0);

	cmp	DWORD PTR [esi+16], 0

; 1864 : 		_Alpty _Almap(this->_Getal());
; 1865 : 		while (!empty())

	je	SHORT $LN3@Tidy
	npad	5
$LL2@Tidy:

; 1535 : 		if (--this->_Mysize() == 0)

	add	DWORD PTR [esi+16], -1
	jne	SHORT $LN29@Tidy

; 1536 : 			this->_Myoff() = 0;

	mov	DWORD PTR [esi+12], 0
$LN29@Tidy:

; 1397 : 		return (this->_Mysize() == 0);

	cmp	DWORD PTR [esi+16], 0

; 1864 : 		_Alpty _Almap(this->_Getal());
; 1865 : 		while (!empty())

	jne	SHORT $LL2@Tidy
$LN3@Tidy:
	push	edi

; 1867 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

	mov	edi, DWORD PTR [esi+8]
	test	edi, edi
	je	SHORT $LN5@Tidy
	npad	5
$LL4@Tidy:

; 1868 : 			{	// free storage for a block and destroy pointer
; 1869 : 			if (this->_Map()[--_Block] != pointer())

	mov	eax, DWORD PTR [esi+4]
	dec	edi
	mov	eax, DWORD PTR [eax+edi*4]
	test	eax, eax
	je	SHORT $LN7@Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 140  : 	::operator delete(_Ptr);

	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN7@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1867 : 		for (size_type _Block = this->_Mapsize(); 0 < _Block; )

	test	edi, edi
	jne	SHORT $LL4@Tidy
$LN5@Tidy:

; 1870 : 				{	// free block and destroy its pointer
; 1871 : 				this->_Getal().deallocate(this->_Map()[_Block], _DEQUESIZ);
; 1872 : 				this->_Getal().destroy(_STD addressof(this->_Map()[_Block]));
; 1873 : 				}
; 1874 : 			}
; 1875 : 
; 1876 : 		if (this->_Map() != _Mapptr())

	mov	ecx, DWORD PTR [esi+4]
	pop	edi
	test	ecx, ecx
	je	SHORT $LN198@Tidy

; 1877 : 			_Almap.deallocate(this->_Map(),

	mov	eax, DWORD PTR [esi+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN192@Tidy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN232@Tidy:
$LN192@Tidy:

; 99   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 2

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN193@Tidy

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	cl, 31					; 0000001fH
	je	SHORT $LN194@Tidy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN233@Tidy:
$LN194@Tidy:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [ecx-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, ecx
	jb	SHORT $LN195@Tidy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN234@Tidy:
$LN195@Tidy:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	ecx, eax
	cmp	ecx, 4
	jae	SHORT $LN196@Tidy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN235@Tidy:
$LN196@Tidy:

; 126  : 			<= _Ptr_user - _Ptr_container);
; 127  :  #endif /* _DEBUG */
; 128  : 
; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	ecx, 35					; 00000023H
	jbe	SHORT $LN197@Tidy
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN236@Tidy:
$LN197@Tidy:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, eax
$LN193@Tidy:

; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN198@Tidy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1879 : 		this->_Mapsize() = 0;

	mov	DWORD PTR [esi+8], 0

; 1880 : 		this->_Map() = _Mapptr();

	mov	DWORD PTR [esi+4], 0
	pop	esi

; 1881 : 		}

	ret	0
$LN231@Tidy:
?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z
_TEXT	SEGMENT
__Myptr$1$ = -12					; size = 4
_this$1$ = -8						; size = 4
__Myboff$1$ = -4					; size = 4
__Newmap$1$ = 8						; size = 4
__Count$ = 8						; size = 4
__Almap$ = 11						; size = 1
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap, COMDAT
; _this$ = ecx

; 1807 : 		{	// grow map by at least _Count pointers, _Mapsize() a power of 2

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1808 : 		static_assert(1 < _DEQUEMAPSIZ,
; 1809 : 			"The _Xlen() test should always be performed.");
; 1810 : 
; 1811 : 		typedef typename _Alpty::pointer _Blockptr;
; 1812 : 		_Alpty _Almap(this->_Getal());
; 1813 : 		size_type _Newsize = 0 < this->_Mapsize() ? this->_Mapsize() : 1;

	mov	edx, DWORD PTR __Count$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx
	mov	esi, 1
	mov	DWORD PTR _this$1$[ebp], edi
	mov	ecx, DWORD PTR [edi+8]
	test	ecx, ecx
	cmovne	esi, ecx
$LL2@Growmap:

; 1814 : 		while (_Newsize - this->_Mapsize() < _Count
; 1815 : 			|| _Newsize < _DEQUEMAPSIZ)

	mov	eax, esi
	sub	eax, ecx
	cmp	eax, edx
	jb	SHORT $LN4@Growmap
	cmp	esi, 8
	jae	SHORT $LN3@Growmap
$LN4@Growmap:

; 1816 : 			{	// scale _Newsize to 2^N >= _Mapsize() + _Count
; 1817 : 			if (max_size() / _DEQUESIZ - _Newsize < _Newsize)

	mov	eax, 268435455				; 0fffffffH
	sub	eax, esi
	cmp	eax, esi
	jb	$LN333@Growmap

; 1819 : 			_Newsize *= 2;

	add	esi, esi

; 1820 : 			}

	jmp	SHORT $LL2@Growmap
$LN3@Growmap:

; 1821 : 		_Count = _Newsize - this->_Mapsize();
; 1822 : 
; 1823 : 		size_type _Myboff = this->_Myoff() / _DEQUESIZ;

	mov	ebx, DWORD PTR [edi+12]
	sub	esi, ecx
	shr	ebx, 2
	mov	DWORD PTR __Myboff$1$[ebp], ebx

; 1824 : 		_Mapptr _Newmap = _Almap.allocate(this->_Mapsize() + _Count);

	lea	eax, DWORD PTR [ecx+esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	eax
	lea	ecx, DWORD PTR __Almap$[ebp]
	call	?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z ; std::allocator<unsigned long *>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1827 : 		_Myptr = _Uninitialized_copy(this->_Map() + _Myboff,

	mov	ecx, DWORD PTR [edi+4]
	mov	edi, DWORD PTR [edi+8]
	shl	ebx, 2
	shl	edi, 2
	mov	DWORD PTR __Newmap$1$[ebp], eax
	lea	edx, DWORD PTR [ecx+ebx]
	add	ebx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	sub	edi, edx
	add	edi, ecx

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	edx
	push	ebx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	lea	edx, DWORD PTR [edi+ebx]
	mov	DWORD PTR __Myptr$1$[ebp], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1830 : 		if (_Myboff <= _Count)

	cmp	DWORD PTR __Myboff$1$[ebp], esi
	ja	SHORT $LN6@Growmap
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2296 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

	mov	ebx, DWORD PTR _this$1$[ebp]
	mov	eax, DWORD PTR [ebx+4]

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edi, eax
	mov	ebx, DWORD PTR __Myboff$1$[ebp]
	sub	edi, eax
	lea	ecx, DWORD PTR [ebx*4]
	add	edi, ecx

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	mov	eax, DWORD PTR __imp__memmove
	push	edx
	call	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 251  : 	_CSTD memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));

	mov	eax, esi
	sub	eax, ebx
	shl	eax, 2
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Myptr$1$[ebp]
	add	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 251  : 	_CSTD memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));

	push	0
	push	eax
	call	_memset
	mov	edi, DWORD PTR __Newmap$1$[ebp]
	mov	ecx, ebx
	lea	eax, DWORD PTR [ecx*4]
	push	eax
	push	0
	push	edi
	call	_memset
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1840 : 		else

	jmp	SHORT $LN332@Growmap
$LN6@Growmap:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2296 : 	const char * const _First_ch = reinterpret_cast<const char *>(_First);

	mov	edi, DWORD PTR _this$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1842 : 			_Uninitialized_copy(this->_Map(),

	lea	ebx, DWORD PTR [esi*4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	mov	eax, DWORD PTR __imp__memmove
	push	ebx
	mov	ecx, DWORD PTR [edi+4]
	push	ecx
	push	edx
	call	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1845 : 			_Myptr = _Uninitialized_copy(this->_Map() + _Count,

	mov	edi, DWORD PTR [edi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	edx, DWORD PTR __Myboff$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1845 : 			_Myptr = _Uninitialized_copy(this->_Map() + _Count,

	lea	eax, DWORD PTR [ebx+edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	sub	edi, eax
	lea	ecx, DWORD PTR [edx*4]
	add	edi, ecx

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	edi
	push	eax
	push	DWORD PTR __Newmap$1$[ebp]
	call	DWORD PTR __imp__memmove

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	mov	eax, DWORD PTR __Newmap$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 251  : 	_CSTD memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));

	push	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2301 : 	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));

	add	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory

; 251  : 	_CSTD memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));

	push	0
	push	eax
	call	_memset
	mov	edi, DWORD PTR __Newmap$1$[ebp]
$LN332@Growmap:
	mov	ebx, DWORD PTR _this$1$[ebp]
	add	esp, 36					; 00000024H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1854 : 		if (this->_Map() != _Mapptr())

	mov	eax, DWORD PTR [ebx+4]
	test	eax, eax
	je	SHORT $LN8@Growmap
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR [ebx+8]
	push	eax
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN8@Growmap:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1858 : 		this->_Map() = _Newmap;	// point at new

	mov	DWORD PTR [ebx+4], edi

; 1859 : 		this->_Mapsize() += _Count;

	add	DWORD PTR [ebx+8], esi
	pop	edi
	pop	esi
	pop	ebx

; 1860 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
$LN333@Growmap:

; 1818 : 				_Xlen();	// result too long

	mov	ecx, edi
	call	?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
$LN334@Growmap:
$LN331@Growmap:
	int	3
?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ
_TEXT	SEGMENT
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen, COMDAT
; _this$ = ecx

; 1798 : 		_Xlength_error("deque<T> too long");

	push	OFFSET ??_C@_0BC@KBDMBKEH@deque?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$deque@KV?$allocator@K@std@@@std@@IBEXXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back, COMDAT
; _this$ = ecx

; 1514 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1515 : 		if (empty())
; 1516 : 			{
; 1517 : 			_DEBUG_ERROR("deque empty before pop");
; 1518 : 			}
; 1519 : 		else
; 1520 : 			{	// something to erase, do it
; 1521 : 			size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;
; 1522 : 			_Orphan_off(_Newoff);
; 1523 : 			size_type _Block = this->_Getblock(_Newoff);
; 1524 : 			this->_Getal().destroy(
; 1525 : 				_Unfancy(this->_Map()[_Block] + _Newoff % _DEQUESIZ));
; 1526 : 			if (--this->_Mysize() == 0)
; 1527 : 				this->_Myoff() = 0;
; 1528 : 			}
; 1529 : 
; 1530 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1531 : 		size_type _Newoff = this->_Myoff() + this->_Mysize() - 1;
; 1532 : 		size_type _Block = this->_Getblock(_Newoff);
; 1533 : 		this->_Getal().destroy(
; 1534 : 			_Unfancy(this->_Map()[_Block] + _Newoff % _DEQUESIZ));
; 1535 : 		if (--this->_Mysize() == 0)

	add	DWORD PTR [ecx+16], -1
	jne	SHORT $LN2@pop_back

; 1536 : 			this->_Myoff() = 0;

	mov	DWORD PTR [ecx+12], 0
$LN2@pop_back:

; 1537 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1538 : 		}

	ret	0
?pop_back@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back, COMDAT
; _this$ = ecx

; 1504 : 		{	// insert element at end

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 1506 : 		_PUSH_BACK_BEGIN;

	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR [esi+16]
	add	eax, ecx
	test	al, 3
	jne	SHORT $LN2@push_back
	lea	eax, DWORD PTR [ecx+4]
	shr	eax, 2
	cmp	DWORD PTR [esi+8], eax
	ja	SHORT $LN2@push_back
	push	1
	mov	ecx, esi
	call	?_Growmap@?$deque@KV?$allocator@K@std@@@std@@IAEXI@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::_Growmap
$LN2@push_back:
	mov	eax, DWORD PTR [esi+8]
	push	ebx
	push	edi
	lea	eax, DWORD PTR [eax*4-1]
	and	DWORD PTR [esi+12], eax
	mov	edi, DWORD PTR [esi+16]
	add	edi, DWORD PTR [esi+12]

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	ecx, DWORD PTR [esi+8]
	mov	eax, edi
	shr	eax, 2
	dec	ecx
	and	ecx, eax

; 1506 : 		_PUSH_BACK_BEGIN;

	mov	eax, DWORD PTR [esi+4]
	lea	ebx, DWORD PTR [ecx*4]
	cmp	DWORD PTR [ebx+eax], 0
	jne	SHORT $LN3@push_back
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	16					; 00000010H
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	ecx, ecx
	jne	SHORT $LN113@push_back
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN174@push_back:
$LN113@push_back:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1506 : 		_PUSH_BACK_BEGIN;

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ebx+eax], ecx
$LN3@push_back:

; 1507 : 		this->_Getal().construct(

	mov	eax, DWORD PTR [esi+4]
	and	edi, 3
	mov	eax, DWORD PTR [ebx+eax]
	lea	ecx, DWORD PTR [eax+edi*4]
	pop	edi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	test	ecx, ecx
	je	SHORT $LN156@push_back
	mov	eax, DWORD PTR __Val$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN156@push_back:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1509 : 		_PUSH_BACK_END;

	inc	DWORD PTR [esi+16]
	pop	esi

; 1510 : 		}

	pop	ebp
	ret	4
$LN173@push_back:
?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_front, COMDAT
; _this$ = ecx

; 1475 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1476 : 		if (empty())
; 1477 : 			{
; 1478 : 			_DEBUG_ERROR("deque empty before pop");
; 1479 : 			}
; 1480 : 		else
; 1481 : 			{	// something to erase, do it
; 1482 : 			_Orphan_off(this->_Myoff());
; 1483 : 			size_type _Block = this->_Getblock(this->_Myoff());
; 1484 : 			this->_Getal().destroy(
; 1485 : 				_Unfancy(this->_Map()[_Block] + this->_Myoff() % _DEQUESIZ));
; 1486 : 			if (--this->_Mysize() == 0)
; 1487 : 				this->_Myoff() = 0;
; 1488 : 			else
; 1489 : 				++this->_Myoff();
; 1490 : 			}
; 1491 : 
; 1492 :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1493 : 		size_type _Block = this->_Getblock(this->_Myoff());
; 1494 : 		this->_Getal().destroy(
; 1495 : 			_Unfancy(this->_Map()[_Block] + this->_Myoff() % _DEQUESIZ));
; 1496 : 		if (--this->_Mysize() == 0)

	add	DWORD PTR [ecx+16], -1
	jne	SHORT $LN2@pop_front

; 1497 : 			this->_Myoff() = 0;

	mov	DWORD PTR [ecx+12], 0

; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		}

	ret	0
$LN2@pop_front:

; 1498 : 		else
; 1499 : 			++this->_Myoff();

	inc	DWORD PTR [ecx+12]

; 1500 :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 1501 : 		}

	ret	0
?pop_front@?$deque@KV?$allocator@K@std@@@std@@QAEXXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::pop_front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?front@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ
_TEXT	SEGMENT
$T1 = -12						; size = 12
?front@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::front, COMDAT
; _this$ = ecx

; 1445 : 		{	// return first element of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH

; 1446 : 		return (*begin());

	lea	eax, DWORD PTR $T1[ebp]
	push	esi
	push	eax
	call	?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $LN10@front
$LN9@front:
	mov	esi, DWORD PTR [esi]
$LN10@front:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	edx, DWORD PTR [eax+8]
	mov	ecx, edx
	mov	eax, DWORD PTR [esi+8]
	dec	eax
	shr	ecx, 2
	and	ecx, eax

; 340  : 		return (_Mycont->_Map[_Block][_Off]);

	mov	eax, DWORD PTR [esi+4]
	and	edx, 3
	pop	esi
	mov	eax, DWORD PTR [eax+ecx*4]
	lea	eax, DWORD PTR [eax+edx*4]

; 1447 : 		}

	mov	esp, ebp
	pop	ebp
	ret	0
?front@?$deque@KV?$allocator@K@std@@@std@@QAEAAKXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::front
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::empty, COMDAT
; _this$ = ecx

; 1396 : 		{	// test if sequence is empty

	cmp	DWORD PTR [ecx+16], 0
	sete	al

; 1397 : 		return (this->_Mysize() == 0);
; 1398 : 		}

	ret	0
?empty@?$deque@KV?$allocator@K@std@@@std@@QBE_NXZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::empty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 1392 : 		return (this->_Getal().max_size());

	mov	eax, 1073741823				; 3fffffffH

; 1393 : 		}

	ret	0
?max_size@?$deque@KV?$allocator@K@std@@@std@@QBEIXZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::begin, COMDAT
; _this$ = ecx

; 1283 : 		{	// return iterator for beginning of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 133  : 		: _Myproxy(0), _Mynextiter(0)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 301  : 		: _Myoff(_Off)

	mov	edx, DWORD PTR [ecx+12]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 192  : 			_Myproxy = _Parent_proxy;

	mov	ecx, DWORD PTR [ecx]

; 133  : 		: _Myproxy(0), _Mynextiter(0)

	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 301  : 		: _Myoff(_Off)

	mov	DWORD PTR [eax+8], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 192  : 			_Myproxy = _Parent_proxy;

	mov	DWORD PTR [eax], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1285 : 		}

	pop	ebp
	ret	4
?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 1243 : 		{	// destroy the deque

	npad	2
	push	esi
	mov	esi, ecx

; 1244 : 		_Tidy();

	call	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 866  : 		_Myproxy() = 0;

	mov	DWORD PTR [esi], 0
	pop	esi

; 1245 : 		}

	ret	0
??1?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::~deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Assign_rv@?$deque@KV?$allocator@K@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv@?$deque@KV?$allocator@K@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::_Assign_rv, COMDAT
; _this$ = ecx

; 1124 : 		{	// move from _Right, stealing its contents

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 258  : 	_Container_proxy *_Temp = _Myproxy;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 259  : 	_Myproxy = _Right._Myproxy;

	mov	esi, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 260  : 	_Right._Myproxy = _Temp;

	mov	DWORD PTR [esi], edx

; 261  : 
; 262  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN18@Assign_rv

; 263  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	DWORD PTR [eax], ecx
$LN18@Assign_rv:

; 264  : 	if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN19@Assign_rv

; 265  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	DWORD PTR [eax], esi
$LN19@Assign_rv:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1126 : 		this->_Map() = _Right._Map();

	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR [ecx+4], eax

; 1127 : 		this->_Mapsize() = _Right._Mapsize();

	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR [ecx+8], eax

; 1128 : 		this->_Myoff() = _Right._Myoff();

	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR [ecx+12], eax

; 1129 : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR [esi+16]
	mov	DWORD PTR [ecx+16], eax

; 1130 : 
; 1131 : 		_Right._Map() = _Mapptr();

	mov	DWORD PTR [esi+4], 0

; 1132 : 		_Right._Mapsize() = 0;

	mov	DWORD PTR [esi+8], 0

; 1133 : 		_Right._Myoff() = 0;

	mov	DWORD PTR [esi+12], 0

; 1134 : 		_Right._Mysize() = 0;

	mov	DWORD PTR [esi+16], 0
	pop	esi

; 1135 : 		}

	pop	ebp
	ret	8
?_Assign_rv@?$deque@KV?$allocator@K@std@@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::_Assign_rv
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??0?$deque@KV?$allocator@K@std@@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
__Right$ = 8						; size = 4
??0?$deque@KV?$allocator@K@std@@@std@@QAE@$$QAV01@@Z PROC ; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 1100 : 		{	// construct by moving _Right

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1100 : 		{	// construct by moving _Right

	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [esi+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [esi+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [esi+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN46@deque
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN245@deque:
$LN46@deque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 259  : 	_Myproxy = _Right._Myproxy;

	mov	edx, DWORD PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 259  : 	_Myproxy = _Right._Myproxy;

	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [esi], eax

; 260  : 	_Right._Myproxy = _Temp;

	mov	DWORD PTR [edx], ecx

; 261  : 
; 262  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN132@deque

; 263  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	DWORD PTR [eax], esi
$LN132@deque:

; 264  : 	if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR [edx]
	test	eax, eax
	je	SHORT $LN133@deque

; 265  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	DWORD PTR [eax], edx
$LN133@deque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1126 : 		this->_Map() = _Right._Map();

	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR [esi+4], eax

; 1127 : 		this->_Mapsize() = _Right._Mapsize();

	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [esi+8], eax

; 1128 : 		this->_Myoff() = _Right._Myoff();

	mov	eax, DWORD PTR [edx+12]
	mov	DWORD PTR [esi+12], eax

; 1129 : 		this->_Mysize() = _Right._Mysize();

	mov	eax, DWORD PTR [edx+16]
	mov	DWORD PTR [esi+16], eax

; 1101 : 		_Assign_rv(_STD move(_Right), true_type());
; 1102 : 		}

	mov	eax, esi

; 1131 : 		_Right._Map() = _Mapptr();

	mov	DWORD PTR [edx+4], 0

; 1132 : 		_Right._Mapsize() = 0;

	mov	DWORD PTR [edx+8], 0

; 1133 : 		_Right._Myoff() = 0;

	mov	DWORD PTR [edx+12], 0

; 1134 : 		_Right._Mysize() = 0;

	mov	DWORD PTR [edx+16], 0
	pop	esi

; 1101 : 		_Assign_rv(_STD move(_Right), true_type());
; 1102 : 		}

	mov	esp, ebp
	pop	ebp
	ret	4
$LN244@deque:
??0?$deque@KV?$allocator@K@std@@@std@@QAE@$$QAV01@@Z ENDP ; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ PROC	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 989  : 		{	// construct empty deque

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 989  : 		{	// construct empty deque

	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [esi+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [esi+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [esi+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN31@deque
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN99@deque:
$LN31@deque:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi

; 990  : 		}

	mov	eax, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN98@deque:
??0?$deque@KV?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::deque<unsigned long,std::allocator<unsigned long> >::deque<unsigned long,std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>, COMDAT
; _this$ = ecx
	ret	0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 343  : 		return (_Myval2);

	mov	eax, ecx

; 344  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 338  : 		return (_Myval2);

	mov	eax, ecx

; 339  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 323  : 		return (*this);

	mov	eax, ecx

; 324  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 318  : 		return (*this);

	mov	eax, ecx

; 319  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@K@std@@@std@@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<unsigned long> >,std::_Deque_val<std::_Deque_simple_types<unsigned long> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::~_Deque_val<std::_Deque_simple_types<unsigned long> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::~_Deque_val<std::_Deque_simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z PROC ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Getblock, COMDAT
; _this$ = ecx

; 760  : 		{	// determine block from offset

	npad	2
	push	ebp
	mov	ebp, esp

; 761  : 			// NB: _Mapsize and _DEQUESIZ are guaranteed to be powers of 2
; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR __Off$[ebp]
	dec	eax
	shr	ecx, 2
	and	eax, ecx

; 763  : 		}

	pop	ebp
	ret	4
?_Getblock@?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QBEII@Z ENDP ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ PROC ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Deque_val<std::_Deque_simple_types<unsigned long> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 757  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	ret	0
??0?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@QAE@XZ ENDP ; std::_Deque_val<std::_Deque_simple_types<unsigned long> >::_Deque_val<std::_Deque_simple_types<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize, COMDAT
; _this$ = ecx

; 951  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 952  : 		}

	ret	0
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize, COMDAT
; _this$ = ecx

; 946  : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 947  : 		}

	ret	0
?_Mysize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Myoff, COMDAT
; _this$ = ecx

; 936  : 		return (_Get_data()._Myoff);

	lea	eax, DWORD PTR [ecx+12]

; 937  : 		}

	ret	0
?_Myoff@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Myoff
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mapsize, COMDAT
; _this$ = ecx

; 926  : 		return (_Get_data()._Mapsize);

	lea	eax, DWORD PTR [ecx+8]

; 927  : 		}

	ret	0
?_Mapsize@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Mapsize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Map@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAPAKXZ
_TEXT	SEGMENT
?_Map@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAPAKXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Map, COMDAT
; _this$ = ecx

; 916  : 		return (_Get_data()._Map);

	lea	eax, DWORD PTR [ecx+4]

; 917  : 		}

	ret	0
?_Map@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAPAKXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Map
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data, COMDAT
; _this$ = ecx

; 911  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 912  : 		}

	ret	0
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data, COMDAT
; _this$ = ecx

; 906  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 907  : 		}

	ret	0
?_Get_data@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAV?$_Deque_val@U?$_Deque_simple_types@K@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 901  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 902  : 		}

	ret	0
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal, COMDAT
; _this$ = ecx

; 896  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 897  : 		}

	ret	0
?_Getal@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@K@std@@@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Swap_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXAAV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXAAV12@@Z PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Swap_all, COMDAT
; _this$ = ecx

; 890  : 		{	// swap all iterators

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 258  : 	_Container_proxy *_Temp = _Myproxy;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 259  : 	_Myproxy = _Right._Myproxy;

	mov	esi, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 260  : 	_Right._Myproxy = _Temp;

	mov	DWORD PTR [esi], edx

; 261  : 
; 262  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN16@Swap_all

; 263  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	DWORD PTR [eax], ecx
$LN16@Swap_all:

; 264  : 	if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN17@Swap_all

; 265  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	DWORD PTR [eax], esi
$LN17@Swap_all:
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 892  : 		}

	pop	ebp
	ret	4
?_Swap_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXAAV12@@Z ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 886  : 		_Get_data()._Orphan_all();
; 887  : 		}

	ret	0
?_Orphan_all@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ
_TEXT	SEGMENT
?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Myproxy, COMDAT
; _this$ = ecx

; 876  : 		return (_Get_data()._Myproxy);

	mov	eax, ecx

; 877  : 		}

	ret	0
?_Myproxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEAAPAU_Container_proxy@2@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Myproxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Free_proxy, COMDAT
; _this$ = ecx

; 860  : 		{	// destroy proxy

	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 866  : 		_Myproxy() = 0;

	mov	DWORD PTR [esi], 0
	pop	esi

; 867  : 		}

	ret	0
?_Free_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Free_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Alloc_proxy, COMDAT
; _this$ = ecx

; 851  : 		{	// construct proxy

	npad	2
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 851  : 		{	// construct proxy

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN20@Alloc_prox
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN86@Alloc_prox:
$LN20@Alloc_prox:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi
	pop	esi

; 857  : 		}

	ret	0
$LN85@Alloc_prox:
?_Alloc_proxy@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAEXXZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Alloc_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??1?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::~_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 812  : 		{	// destroy proxy

	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	1
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 866  : 		_Myproxy() = 0;

	mov	DWORD PTR [esi], 0
	pop	esi

; 813  : 		_Free_proxy();
; 814  : 		}

	ret	0
??1?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::~_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ??0?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >, COMDAT
; _this$ = ecx

; 798  : 		{	// default construct allocator

	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [esi+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [esi+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [esi+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN28@Deque_allo
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN95@Deque_allo:
$LN28@Deque_allo:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi

; 799  : 		_Alloc_proxy();
; 800  : 		}

	mov	eax, esi
	pop	esi
	ret	0
$LN94@Deque_allo:
??0?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QAE@XZ ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
;	COMDAT ?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEII@Z PROC ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getblock, COMDAT
; _this$ = ecx

; 792  : 		{	// determine block from offset

	npad	2
	push	ebp
	mov	ebp, esp

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	eax, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR __Off$[ebp]
	dec	eax
	shr	ecx, 2
	and	eax, ecx

; 793  : 		return (_Get_data()._Getblock(_Off));
; 794  : 		}

	pop	ebp
	ret	4
?_Getblock@?$_Deque_alloc@U?$_Deque_base_types@KV?$allocator@K@std@@@std@@@std@@QBEII@Z ENDP ; std::_Deque_alloc<std::_Deque_base_types<unsigned long,std::allocator<unsigned long> > >::_Getblock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long *> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEXPAPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long *> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long *> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z ; std::allocator<unsigned long *>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@PAK@std@@@std@@QAEPAPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long *> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z PROC		; std::allocator<unsigned long *>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 2

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@PAK@std@@QAEPAPAKI@Z ENDP		; std::allocator<unsigned long *>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z PROC	; std::allocator<unsigned long *>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@PAK@std@@QAEXPAPAKI@Z ENDP	; std::allocator<unsigned long *>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::max_size, COMDAT
; _this$ = ecx

; 1108 : 		return (_Mytraits::max_size(*this));

	mov	eax, 1073741823				; 3fffffffH

; 1109 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEXPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@K@std@@QAEPAKI@Z	; std::allocator<unsigned long>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAEPAKI@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 1048 : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >, COMDAT
; _this$ = ecx

; 1038 : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@K@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<unsigned long> >::_Wrap_alloc<std::allocator<unsigned long> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z PROC ; std::allocator_traits<std::allocator<unsigned long> >::max_size, COMDAT

; 970  : 		return (_Al.max_size());

	mov	eax, 1073741823				; 3fffffffH

; 971  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@K@std@@@std@@SAIABV?$allocator@K@2@@Z ENDP ; std::allocator_traits<std::allocator<unsigned long> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator@K@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@K@std@@QBEIXZ PROC		; std::allocator<unsigned long>::max_size, COMDAT
; _this$ = ecx

; 851  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 1073741823				; 3fffffffH

; 852  : 		}

	ret	0
?max_size@?$allocator@K@std@@QBEIXZ ENDP		; std::allocator<unsigned long>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@K@std@@QAEPAKI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@K@std@@QAEPAKI@Z PROC		; std::allocator<unsigned long>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 1073741823				; 3fffffffH
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 2

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@K@std@@QAEPAKI@Z ENDP		; std::allocator<unsigned long>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@K@std@@QAEXPAKI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@K@std@@QAEXPAKI@Z PROC		; std::allocator<unsigned long>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	4
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@K@std@@QAEXPAKI@Z ENDP		; std::allocator<unsigned long>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@K@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@K@std@@QAE@ABV01@@Z PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 807  : 		{	// construct by copying (do nothing)
; 808  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@K@std@@QAE@ABV01@@Z ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@K@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@K@std@@QAE@XZ PROC			; std::allocator<unsigned long>::allocator<unsigned long>, COMDAT
; _this$ = ecx

; 803  : 		{	// construct default allocator (do nothing)
; 804  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@K@std@@QAE@XZ ENDP			; std::allocator<unsigned long>::allocator<unsigned long>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -1116						; size = 556
$T2 = -1116						; size = 556
$T3 = -1116						; size = 556
_pe32$ = -560						; size = 556
_hProcessSnap$1$ = -4					; size = 4
$T4 = 8							; size = 4
_wszName$ = 12						; size = 4
?FindProcessByName@@YA?AUtagPROCESSENTRY32W@@PB_W@Z PROC ; FindProcessByName

; 1148 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 1116				; 0000045cH
	push	esi
	push	edi

; 1149 :   PROCESSENTRY32 pe32 = { };

	push	556					; 0000022cH
	lea	eax, DWORD PTR _pe32$[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1150 : 
; 1151 :   CHandle hProcessSnap (

	push	0
	push	2
	call	_CreateToolhelp32Snapshot@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
	mov	DWORD PTR _hProcessSnap$1$[ebp], esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1155 :   if (hProcessSnap == INVALID_HANDLE_VALUE)

	cmp	esi, -1
	jne	SHORT $LN5@FindProces

; 1156 :     return pe32;

	mov	ecx, 139				; 0000008bH
	lea	esi, DWORD PTR _pe32$[ebp]
	lea	edi, DWORD PTR $T3[ebp]
	rep movsd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1258 : 		::CloseHandle( m_h );

	push	eax
	call	DWORD PTR __imp__CloseHandle@4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1156 :     return pe32;

	jmp	$LN26@FindProces
$LN5@FindProces:

; 1157 : 
; 1158 :   pe32.dwSize = sizeof (PROCESSENTRY32);
; 1159 : 
; 1160 :   if (! Process32First (hProcessSnap, &pe32))

	lea	eax, DWORD PTR _pe32$[ebp]
	mov	DWORD PTR _pe32$[ebp], 556		; 0000022cH
	push	eax
	push	esi
	call	_Process32FirstW@8
	test	eax, eax
	jne	SHORT $LN56@FindProces
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	mov	eax, DWORD PTR _hProcessSnap$1$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1162 :     return pe32;

	lea	esi, DWORD PTR _pe32$[ebp]
	lea	edi, DWORD PTR $T2[ebp]
	mov	ecx, 139				; 0000008bH
	rep movsd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	eax, eax
	je	SHORT $LN26@FindProces

; 1258 : 		::CloseHandle( m_h );

	push	eax
	call	DWORD PTR __imp__CloseHandle@4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1156 :     return pe32;

	jmp	SHORT $LN26@FindProces
$LN56@FindProces:

; 1162 :     return pe32;

	mov	edi, DWORD PTR _wszName$[ebp]
	push	ebx
	mov	ebx, DWORD PTR __imp__wcsstr
	npad	3
$LL4@FindProces:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	lea	eax, DWORD PTR _pe32$[ebp+36]
	push	edi
	push	eax
	call	ebx
	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1167 :     if (wcsstr (pe32.szExeFile, wszName))

	test	eax, eax
	jne	SHORT $LN45@FindProces

; 1169 :   } while (Process32Next (hProcessSnap, &pe32));

	lea	eax, DWORD PTR _pe32$[ebp]
	push	eax
	push	esi
	call	_Process32NextW@8
	test	eax, eax
	jne	SHORT $LL4@FindProces
$LN45@FindProces:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	mov	eax, DWORD PTR _hProcessSnap$1$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1168 :       return pe32;

	lea	edi, DWORD PTR $T1[ebp]
	lea	esi, DWORD PTR _pe32$[ebp]
	mov	ecx, 139				; 0000008bH
	rep movsd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	eax, eax
	je	SHORT $LN34@FindProces

; 1258 : 		::CloseHandle( m_h );

	push	eax
	call	DWORD PTR __imp__CloseHandle@4
$LN34@FindProces:
	pop	ebx
$LN26@FindProces:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1168 :       return pe32;

	mov	eax, DWORD PTR $T4[ebp]
	lea	esi, DWORD PTR $T1[ebp]
	mov	ecx, 139				; 0000008bH
	mov	edi, eax
	rep movsd
	pop	edi
	pop	esi

; 1170 : 
; 1171 :   return pe32;
; 1172 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?FindProcessByName@@YA?AUtagPROCESSENTRY32W@@PB_W@Z ENDP ; FindProcessByName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_calculate_table_hw PROC

; 1019 : {

	npad	2
	push	esi

; 1020 :   for (int i = 0; i < 256; i++) 

	xor	esi, esi
$LL4@calculate_:

; 1021 :   {
; 1022 :     auto res =
; 1023 :       static_cast <uint32_t> (i);

	mov	eax, esi
	mov	ecx, 2016				; 000007e0H
	npad	4
$LL7@calculate_:

; 1026 :     {
; 1027 :       res = (res & 1) == 1 ? POLY ^ (res >> 1) :

	test	al, 1
	je	SHORT $LN24@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN25@calculate_
$LN24@calculate_:
	shr	eax, 1
$LN25@calculate_:

; 1024 : 
; 1025 :     for (int k = 0; k < 8 * (SHORT_SHIFT - 4); k++)

	sub	ecx, 1
	jne	SHORT $LL7@calculate_

; 1028 :                                     (res >> 1);
; 1029 :     }
; 1030 : 
; 1031 :     for (int t = 0; t < 4; t++)

	lea	ecx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[esi*4+3072]
	mov	edx, 4
$LL10@calculate_:

; 1032 :     {
; 1033 :       for (int k = 0; k < 8; k++)
; 1034 :       {
; 1035 :         res = (res & 1) == 1 ? POLY ^ (res >> 1) :

	test	al, 1
	je	SHORT $LN26@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN27@calculate_
$LN26@calculate_:
	shr	eax, 1
$LN27@calculate_:
	test	al, 1
	je	SHORT $LN58@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN59@calculate_
$LN58@calculate_:
	shr	eax, 1
$LN59@calculate_:
	test	al, 1
	je	SHORT $LN61@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN62@calculate_
$LN61@calculate_:
	shr	eax, 1
$LN62@calculate_:
	test	al, 1
	je	SHORT $LN64@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN65@calculate_
$LN64@calculate_:
	shr	eax, 1
$LN65@calculate_:
	test	al, 1
	je	SHORT $LN67@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN68@calculate_
$LN67@calculate_:
	shr	eax, 1
$LN68@calculate_:
	test	al, 1
	je	SHORT $LN70@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN71@calculate_
$LN70@calculate_:
	shr	eax, 1
$LN71@calculate_:
	test	al, 1
	je	SHORT $LN73@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN74@calculate_
$LN73@calculate_:
	shr	eax, 1
$LN74@calculate_:
	test	al, 1
	je	SHORT $LN76@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN77@calculate_
$LN76@calculate_:
	shr	eax, 1
$LN77@calculate_:

; 1036 :                                       (res >> 1);
; 1037 :       }
; 1038 : 
; 1039 :       short_shifts [3 - t][i] = res;

	mov	DWORD PTR [ecx], eax
	sub	ecx, 1024				; 00000400H
	sub	edx, 1
	jne	$LL10@calculate_

; 1040 :     }
; 1041 : 
; 1042 :     for (int k = 0; k < 8 * (LONG_SHIFT - 4 - SHORT_SHIFT); k++)

	mov	ecx, 63456				; 0000f7e0H
	npad	2
$LL16@calculate_:

; 1043 :     {
; 1044 :       res = (res & 1) == 1 ? POLY ^ (res >> 1) :

	test	al, 1
	je	SHORT $LN28@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN29@calculate_
$LN28@calculate_:
	shr	eax, 1
$LN29@calculate_:

; 1040 :     }
; 1041 : 
; 1042 :     for (int k = 0; k < 8 * (LONG_SHIFT - 4 - SHORT_SHIFT); k++)

	sub	ecx, 1
	jne	SHORT $LL16@calculate_

; 1045 :                                     (res >> 1);
; 1046 :     }
; 1047 : 
; 1048 :     for (int t = 0; t < 4; t++)

	lea	ecx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[esi*4+3072]
	mov	edx, 4
$LL19@calculate_:

; 1049 :     {
; 1050 :       for (int k = 0; k < 8; k++)
; 1051 :       {
; 1052 :         res = (res & 1) == 1 ? POLY ^ (res >> 1) :

	test	al, 1
	je	SHORT $LN30@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN31@calculate_
$LN30@calculate_:
	shr	eax, 1
$LN31@calculate_:
	test	al, 1
	je	SHORT $LN83@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN84@calculate_
$LN83@calculate_:
	shr	eax, 1
$LN84@calculate_:
	test	al, 1
	je	SHORT $LN86@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN87@calculate_
$LN86@calculate_:
	shr	eax, 1
$LN87@calculate_:
	test	al, 1
	je	SHORT $LN89@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN90@calculate_
$LN89@calculate_:
	shr	eax, 1
$LN90@calculate_:
	test	al, 1
	je	SHORT $LN92@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN93@calculate_
$LN92@calculate_:
	shr	eax, 1
$LN93@calculate_:
	test	al, 1
	je	SHORT $LN95@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN96@calculate_
$LN95@calculate_:
	shr	eax, 1
$LN96@calculate_:
	test	al, 1
	je	SHORT $LN98@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN99@calculate_
$LN98@calculate_:
	shr	eax, 1
$LN99@calculate_:
	test	al, 1
	je	SHORT $LN101@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN102@calculate_
$LN101@calculate_:
	shr	eax, 1
$LN102@calculate_:

; 1053 :                                       (res >> 1);
; 1054 :       }
; 1055 : 
; 1056 :       long_shifts [3 - t][i] = res;

	mov	DWORD PTR [ecx], eax
	sub	ecx, 1024				; 00000400H
	sub	edx, 1
	jne	$LL19@calculate_

; 1020 :   for (int i = 0; i < 256; i++) 

	inc	esi
	cmp	esi, 256				; 00000100H
	jl	$LL4@calculate_
	pop	esi

; 1057 :     }
; 1058 :   }
; 1059 : }

	ret	0
_calculate_table_hw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_shift_table$ = 8					; size = 4
_crc$ = 12						; size = 4
?shift_crc@@YAIQAY0BAA@II@Z PROC			; shift_crc

; 818  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	ebx, DWORD PTR _crc$[ebp]
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	movzx	edx, al
	mov	eax, ebx
	shr	eax, 8
	push	esi
	mov	esi, DWORD PTR _shift_table$[ebp]
	movzx	ecx, al
	mov	eax, DWORD PTR [esi+edx*4+2048]
	xor	eax, DWORD PTR [esi+ecx*4+1024]
	mov	ecx, ebx
	shr	ecx, 24					; 00000018H
	xor	eax, DWORD PTR [esi+ecx*4+3072]
	movzx	ecx, bl
	xor	eax, DWORD PTR [esi+ecx*4]
	pop	esi
	pop	ebx

; 820  :        ^ shift_table [1][(crc >> 8)  & 0xff]
; 821  :        ^ shift_table [2][(crc >> 16) & 0xff]
; 822  :        ^ shift_table [3][ crc >> 24];
; 823  : }

	pop	ebp
	ret	0
?shift_crc@@YAIQAY0BAA@II@Z ENDP			; shift_crc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_calculate_table PROC

; 998  :   for (int i = 0; i < 256; i++)

	xor	edx, edx
$LL4@calculate_:

; 999  :   {
; 1000 :     auto res =
; 1001 :       static_cast <uint32_t> (i);

	mov	eax, edx

; 1002 : 
; 1003 :     for (auto& t : table)

	mov	ecx, OFFSET ?table@@3PAY0BAA@IA
	npad	7
$LL7@calculate_:

; 1004 :     {
; 1005 :       for (int k = 0; k < 8; k++)
; 1006 :         res = (res & 1) == 1 ? POLY ^ (res >> 1) :

	test	al, 1
	je	SHORT $LN12@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN13@calculate_
$LN12@calculate_:
	shr	eax, 1
$LN13@calculate_:
	test	al, 1
	je	SHORT $LN28@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN29@calculate_
$LN28@calculate_:
	shr	eax, 1
$LN29@calculate_:
	test	al, 1
	je	SHORT $LN31@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN32@calculate_
$LN31@calculate_:
	shr	eax, 1
$LN32@calculate_:
	test	al, 1
	je	SHORT $LN34@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN35@calculate_
$LN34@calculate_:
	shr	eax, 1
$LN35@calculate_:
	test	al, 1
	je	SHORT $LN37@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN38@calculate_
$LN37@calculate_:
	shr	eax, 1
$LN38@calculate_:
	test	al, 1
	je	SHORT $LN40@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN41@calculate_
$LN40@calculate_:
	shr	eax, 1
$LN41@calculate_:
	test	al, 1
	je	SHORT $LN43@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN44@calculate_
$LN43@calculate_:
	shr	eax, 1
$LN44@calculate_:
	test	al, 1
	je	SHORT $LN46@calculate_
	shr	eax, 1
	xor	eax, -2097792136			; 82f63b78H
	jmp	SHORT $LN47@calculate_
$LN46@calculate_:
	shr	eax, 1
$LN47@calculate_:

; 1007 :                                       (res >> 1);
; 1008 :       t [i] = res;

	mov	DWORD PTR [ecx+edx*4], eax
	add	ecx, 1024				; 00000400H
	cmp	ecx, OFFSET ?table@@3PAY0BAA@IA+16384
	jne	$LL7@calculate_

; 998  :   for (int i = 0; i < 256; i++)

	inc	edx
	cmp	edx, 256				; 00000100H
	jl	$LL4@calculate_

; 1009 :     }
; 1010 :   }
; 1011 : 
; 1012 :   _tableInitialized = true;

	mov	BYTE PTR ?_tableInitialized@@3_NA, 1

; 1013 : }

	ret	0
_calculate_table ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__F?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ
text$yd	SEGMENT
??__F?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ PROC ; `dynamic atexit destructor for 'InstructionSet::CPU_Rep'', COMDAT
	mov	ecx, OFFSET ?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B ; InstructionSet::CPU_Rep
	jmp	??1InstructionSet_Internal@InstructionSet@@QAE@XZ
??__F?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ ENDP ; `dynamic atexit destructor for 'InstructionSet::CPU_Rep''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??__E?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ
text$di	SEGMENT
??__E?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ PROC ; `dynamic initializer for 'InstructionSet::CPU_Rep'', COMDAT

; 661  :       InstructionSet::CPU_Rep;

	mov	ecx, OFFSET ?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B ; InstructionSet::CPU_Rep
	call	??0InstructionSet_Internal@InstructionSet@@QAE@XZ ; InstructionSet::InstructionSet_Internal::InstructionSet_Internal
	push	OFFSET ??__F?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ ; `dynamic atexit destructor for 'InstructionSet::CPU_Rep''
	call	_atexit
	pop	ecx
	ret	0
??__E?CPU_Rep@InstructionSet@@0VInstructionSet_Internal@1@B@@YAXXZ ENDP ; `dynamic initializer for 'InstructionSet::CPU_Rep''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z PROC ; std::operator==<char,std::char_traits<char>,std::allocator<char> >, COMDAT

; 3843 : 	{	// test for string vs. NTCTS equality

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	edx, DWORD PTR __Right$[ebp]
	mov	ecx, edx
	push	esi
	lea	esi, DWORD PTR [ecx+1]
	npad	2
$LL34@operator:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL34@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1844 : 		return (_Get_data()._Mysize);

	mov	eax, DWORD PTR __Left$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	sub	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [eax+20], 16			; 00000010H

; 1844 : 		return (_Get_data()._Mysize);

	lea	esi, DWORD PTR [eax+16]

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN28@operator
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN28@operator:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3421 : 		return (_Traits_equal<_Traits>(this->_Myptr(), this->_Mysize(), _Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	push	DWORD PTR [esi]
	push	eax
	call	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
	add	esp, 16					; 00000010H
	pop	esi

; 3844 : 	return (_Left._Equal(_Right));
; 3845 : 	}

	pop	ebp
	ret	0
??$?8DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YA_NABV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@QBD@Z ENDP ; std::operator==<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\array
;	COMDAT ?data@?$array@H$03@std@@QAEPAHXZ
_TEXT	SEGMENT
?data@?$array@H$03@std@@QAEPAHXZ PROC			; std::array<int,4>::data, COMDAT
; _this$ = ecx

; 207  : 		return (_Elems);

	mov	eax, ecx

; 208  : 		}

	ret	0
?data@?$array@H$03@std@@QAEPAHXZ ENDP			; std::array<int,4>::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\array
;	COMDAT ??A?$array@H$03@std@@QAEAAHI@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$array@H$03@std@@QAEAAHI@Z PROC			; std::array<int,4>::operator[], COMDAT
; _this$ = ecx

; 148  : 		{	// subscript mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 149  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 150  : 		if (_Size <= _Pos)
; 151  : 			{
; 152  : 			_DEBUG_ERROR("array subscript out of range");
; 153  : 			}
; 154  :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 155  : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < _Size);
; 156  :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 157  : 
; 158  : 		return (_Elems[_Pos]);

	mov	eax, DWORD PTR __Pos$[ebp]
	lea	eax, DWORD PTR [ecx+eax*4]

; 159  : 		}

	pop	ebp
	ret	4
??A?$array@H$03@std@@QAEAAHI@Z ENDP			; std::array<int,4>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ??1InstructionSet_Internal@InstructionSet@@QAE@XZ
_TEXT	SEGMENT
??1InstructionSet_Internal@InstructionSet@@QAE@XZ PROC	; InstructionSet::InstructionSet_Internal::~InstructionSet_Internal, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1949 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi+96]
	test	ecx, ecx
	je	SHORT $LN7@Instructio

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [esi+104]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1954 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi+96], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1955 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+100], 0

; 1956 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+104], 0
$LN7@Instructio:

; 1949 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi+84]
	test	ecx, ecx
	je	SHORT $LN104@Instructio

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [esi+92]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1954 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi+84], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1955 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+88], 0

; 1956 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+92], 0
$LN104@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+52]
	cmp	eax, 16					; 00000010H

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN201@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+32]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN201@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+48], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+52], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [esi+32], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+28]
	cmp	eax, 16					; 00000010H

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN231@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi+8]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN231@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+24], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+28], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [esi+8], 0
	pop	esi
	ret	0
??1InstructionSet_Internal@InstructionSet@@QAE@XZ ENDP	; InstructionSet::InstructionSet_Internal::~InstructionSet_Internal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Orphan_range@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEXPAV?$array@H$03@2@0@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?_Orphan_range@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEXPAV?$array@H$03@2@0@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Orphan_range, COMDAT
; _this$ = ecx

; 1996 : 		}

	ret	8
?_Orphan_range@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEXPAV?$array@H$03@2@0@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Orphan_range
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Xlength@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@CAXXZ
_TEXT	SEGMENT
?_Xlength@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@CAXXZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Xlength, COMDAT

; 1962 : 		_Xlength_error("vector<T> too long");

	push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlength:
$LN3@Xlength:
	int	3
?_Xlength@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@CAXXZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Xlength
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Tidy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXXZ
_TEXT	SEGMENT
?_Tidy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXXZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Tidy, COMDAT
; _this$ = ecx

; 1946 : 		{	// free all storage

	npad	2
	push	esi
	mov	esi, ecx

; 1947 : 		this->_Orphan_all();
; 1948 : 
; 1949 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Tidy

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1954 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1955 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+4], 0

; 1956 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+8], 0
$LN2@Tidy:
	pop	esi

; 1957 : 			}
; 1958 : 		}

	ret	0
?_Tidy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXXZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Tidy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Change_array@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXQAV?$array@H$03@2@II@Z
_TEXT	SEGMENT
__Newvec$ = 8						; size = 4
__Newsize$ = 12						; size = 4
__Newcapacity$ = 16					; size = 4
?_Change_array@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXQAV?$array@H$03@2@II@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Change_array, COMDAT
; _this$ = ecx

; 1931 : 		{	// orphan all iterators, discard old array, acquire new array

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx

; 1932 : 		this->_Orphan_all();
; 1933 : 
; 1934 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN2@Change_arr

; 1937 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1937 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN2@Change_arr:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1941 : 		this->_Mylast() = _Newvec + _Newsize;

	mov	eax, DWORD PTR __Newsize$[ebp]
	mov	ecx, DWORD PTR __Newvec$[ebp]
	shl	eax, 4
	add	eax, ecx
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+4], eax

; 1942 : 		this->_Myend() = _Newvec + _Newcapacity;

	mov	eax, DWORD PTR __Newcapacity$[ebp]
	shl	eax, 4
	add	eax, ecx
	mov	DWORD PTR [esi+8], eax
	pop	esi

; 1943 : 		}

	pop	ebp
	ret	12					; 0000000cH
?_Change_array@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXQAV?$array@H$03@2@II@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Change_array
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Calculate_growth@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEII@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Calculate_growth@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEII@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Calculate_growth, COMDAT
; _this$ = ecx

; 1889 : 		{	// given _Oldcapacity and _Newsize, calculate geometric growth

	npad	2
	push	ebp
	mov	ebp, esp

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	mov	edx, DWORD PTR [ecx+8]

; 1890 : 		const size_type _Oldcapacity = capacity();
; 1891 : 
; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	eax, 268435455				; 0fffffffH

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	sub	edx, DWORD PTR [ecx]
	sar	edx, 4

; 1890 : 		const size_type _Oldcapacity = capacity();
; 1891 : 
; 1892 : 		if (_Oldcapacity > max_size() - _Oldcapacity / 2)

	mov	ecx, edx
	shr	ecx, 1
	sub	eax, ecx
	cmp	edx, eax
	jbe	SHORT $LN2@Calculate_

; 1893 : 			{
; 1894 : 			return (_Newsize);	// geometric growth would overflow

	mov	eax, DWORD PTR __Newsize$[ebp]

; 1900 : 			{
; 1901 : 			return (_Newsize);	// geometric growth would be insufficient
; 1902 : 			}
; 1903 : 
; 1904 : 		return (_Geometric);	// geometric growth is sufficient
; 1905 : 		}

	pop	ebp
	ret	4
$LN2@Calculate_:

; 1895 : 			}
; 1896 : 
; 1897 : 		const size_type _Geometric = _Oldcapacity + _Oldcapacity / 2;

	lea	eax, DWORD PTR [ecx+edx]

; 1898 : 
; 1899 : 		if (_Geometric < _Newsize)

	cmp	eax, DWORD PTR __Newsize$[ebp]
	cmovb	eax, DWORD PTR __Newsize$[ebp]

; 1900 : 			{
; 1901 : 			return (_Newsize);	// geometric growth would be insufficient
; 1902 : 			}
; 1903 : 
; 1904 : 		return (_Geometric);	// geometric growth is sufficient
; 1905 : 		}

	pop	ebp
	ret	4
?_Calculate_growth@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABEII@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Calculate_growth
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Destroy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@0@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
?_Destroy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@0@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Destroy, COMDAT
; _this$ = ecx

; 1885 : 		_Destroy_range(_First, _Last, this->_Getal());
; 1886 : 		}

	ret	8
?_Destroy@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@0@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Destroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Umove_if_noexcept@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
?_Umove_if_noexcept@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Umove_if_noexcept, COMDAT
; _this$ = ecx

; 1878 : 		{	// move_if_noexcept [_First, _Last) to raw _Dest, using allocator

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	eax
	push	ecx
	push	DWORD PTR __Dest$[ebp]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1881 : 		}

	pop	ebp
	ret	12					; 0000000cH
?_Umove_if_noexcept@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Umove_if_noexcept
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Umove_if_noexcept1@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Last$ = 12						; size = 4
__Dest$ = 16						; size = 4
___formal$ = 20						; size = 1
?_Umove_if_noexcept1@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00U?$integral_constant@_N$00@2@@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Umove_if_noexcept1, COMDAT
; _this$ = ecx

; 1868 : 		{	// move [_First, _Last) to raw _Dest, using allocator

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 2299 : 	const size_t _Count = _Last_ch - _First_ch;

	mov	ecx, DWORD PTR __First$[ebp]
	mov	eax, DWORD PTR __Last$[ebp]
	sub	eax, ecx

; 2300 : 	_CSTD memmove(_Dest_ch, _First_ch, _Count);

	push	eax
	push	ecx
	push	DWORD PTR __Dest$[ebp]
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1870 : 		}

	pop	ebp
	ret	16					; 00000010H
?_Umove_if_noexcept1@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@AAEXPAV?$array@H$03@2@00U?$integral_constant@_N$00@2@@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Umove_if_noexcept1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??A?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEAAV?$array@H$03@1@I@Z
_TEXT	SEGMENT
__Pos$ = 8						; size = 4
??A?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEAAV?$array@H$03@1@I@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::operator[], COMDAT
; _this$ = ecx

; 1736 : 		{	// subscript mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 1737 :  #if _ITERATOR_DEBUG_LEVEL == 2
; 1738 : 		if (size() <= _Pos)
; 1739 : 			{	// report error
; 1740 : 			_DEBUG_ERROR("vector subscript out of range");
; 1741 : 			}
; 1742 :  #elif _ITERATOR_DEBUG_LEVEL == 1
; 1743 : 		_SCL_SECURE_VALIDATE_RANGE(_Pos < size());
; 1744 :  #endif /* _ITERATOR_DEBUG_LEVEL */
; 1745 : 
; 1746 : 		return (this->_Myfirst()[_Pos]);

	mov	eax, DWORD PTR __Pos$[ebp]
	shl	eax, 4
	add	eax, DWORD PTR [ecx]

; 1747 : 		}

	pop	ebp
	ret	4
??A?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEAAV?$array@H$03@1@I@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Has_unused_capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABE_NXZ
_TEXT	SEGMENT
?_Has_unused_capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABE_NXZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Has_unused_capacity, COMDAT
; _this$ = ecx

; 1730 : 		{	// micro-optimization for capacity() != size()

	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [ecx+4]
	setne	al

; 1731 : 		return (this->_Myend() != this->_Mylast());
; 1732 : 		}

	ret	0
?_Has_unused_capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@ABE_NXZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::_Has_unused_capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::capacity, COMDAT
; _this$ = ecx

; 1720 : 		return (this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [ecx+8]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4

; 1721 : 		}

	ret	0
?capacity@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::capacity
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?max_size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::max_size, COMDAT
; _this$ = ecx

; 1715 : 		return (this->_Getal().max_size());

	mov	eax, 268435455				; 0fffffffH

; 1716 : 		}

	ret	0
?max_size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ
_TEXT	SEGMENT
?size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::size, COMDAT
; _this$ = ecx

; 1710 : 		return (this->_Mylast() - this->_Myfirst());

	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 4

; 1711 : 		}

	ret	0
?size@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QBEIXZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?push_back@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@2@@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?push_back@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@2@@Z PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::push_back, COMDAT
; _this$ = ecx

; 946  : 		{	// insert element at end, provide strong guarantee

	npad	2
	push	ebp
	mov	ebp, esp

; 948  : 		}

	pop	ebp

; 947  : 		emplace_back(_Val);

	jmp	??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::emplace_back<std::array<int,4> const &>
?push_back@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@2@@Z ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::push_back
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??1?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::~vector<std::array<int,4>,std::allocator<std::array<int,4> > >, COMDAT
; _this$ = ecx

; 891  : 		{	// destroy the object

	npad	2
	push	esi
	mov	esi, ecx

; 1949 : 		if (this->_Myfirst() != pointer())

	mov	ecx, DWORD PTR [esi]
	test	ecx, ecx
	je	SHORT $LN4@vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	mov	eax, DWORD PTR [esi+8]
	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1952 : 			this->_Getal().deallocate(this->_Myfirst(), this->_Myend() - this->_Myfirst());

	sar	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	ecx
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1954 : 			this->_Myfirst() = pointer();

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1955 : 			this->_Mylast() = pointer();

	mov	DWORD PTR [esi+4], 0

; 1956 : 			this->_Myend() = pointer();

	mov	DWORD PTR [esi+8], 0
$LN4@vector:
	pop	esi

; 892  : 		_Tidy();
; 893  : 		}

	ret	0
??1?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::~vector<std::array<int,4>,std::allocator<std::array<int,4> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ PROC ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::vector<std::array<int,4>,std::allocator<std::array<int,4> > >, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 723  : 		}

	mov	eax, ecx

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 723  : 		}

	ret	0
??0?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ ENDP ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::vector<std::array<int,4>,std::allocator<std::array<int,4> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 343  : 		return (_Myval2);

	mov	eax, ecx

; 344  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_second, COMDAT
; _this$ = ecx

; 338  : 		return (_Myval2);

	mov	eax, ecx

; 339  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 323  : 		return (*this);

	mov	eax, ecx

; 324  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_first, COMDAT
; _this$ = ecx

; 318  : 		return (*this);

	mov	eax, ecx

; 319  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@V?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<std::array<int,4> > >,std::_Vector_val<std::_Simple_types<std::array<int,4> > >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@std@@QAE@XZ PROC ; std::_Vector_val<std::_Simple_types<std::array<int,4> > >::_Vector_val<std::_Simple_types<std::array<int,4> > >, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 480  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@std@@QAE@XZ ENDP ; std::_Vector_val<std::_Simple_types<std::array<int,4> > >::_Vector_val<std::_Simple_types<std::array<int,4> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myend, COMDAT
; _this$ = ecx

; 676  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 677  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ
_TEXT	SEGMENT
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myend, COMDAT
; _this$ = ecx

; 671  : 		return (_Get_data()._Myend);

	lea	eax, DWORD PTR [ecx+8]

; 672  : 		}

	ret	0
?_Myend@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myend
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Mylast, COMDAT
; _this$ = ecx

; 666  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 667  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ
_TEXT	SEGMENT
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Mylast, COMDAT
; _this$ = ecx

; 661  : 		return (_Get_data()._Mylast);

	lea	eax, DWORD PTR [ecx+4]

; 662  : 		}

	ret	0
?_Mylast@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Mylast
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myfirst, COMDAT
; _this$ = ecx

; 656  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 657  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABQAV?$array@H$03@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ
_TEXT	SEGMENT
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myfirst, COMDAT
; _this$ = ecx

; 651  : 		return (_Get_data()._Myfirst);

	mov	eax, ecx

; 652  : 		}

	ret	0
?_Myfirst@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAPAV?$array@H$03@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Myfirst
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Get_data, COMDAT
; _this$ = ecx

; 646  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 647  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Get_data, COMDAT
; _this$ = ecx

; 641  : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 642  : 		}

	ret	0
?_Get_data@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAV?$_Vector_val@U?$_Simple_types@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Getal, COMDAT
; _this$ = ecx

; 636  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 637  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Getal, COMDAT
; _this$ = ecx

; 631  : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 632  : 		}

	ret	0
?_Getal@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@2@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEXXZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Orphan_all, COMDAT
; _this$ = ecx

; 621  : 		_Get_data()._Orphan_all();
; 622  : 		}

	ret	0
?_Orphan_all@?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAEXXZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
;	COMDAT ??0?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAE@XZ PROC ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >, COMDAT
; _this$ = ecx

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 509  : 		}

	mov	eax, ecx

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 509  : 		}

	ret	0
??0?$_Vector_alloc@U?$_Vec_base_types@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@@std@@QAE@XZ ENDP ; std::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >::_Vector_alloc<std::_Vec_base_types<std::array<int,4>,std::allocator<std::array<int,4> > > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::max_size, COMDAT
; _this$ = ecx

; 1108 : 		return (_Mytraits::max_size(*this));

	mov	eax, 268435455				; 0fffffffH

; 1109 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEXPAV?$array@H$03@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEPAV?$array@H$03@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEPAV?$array@H$03@2@I@Z PROC ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@V?$array@H$03@std@@@std@@QAEPAV?$array@H$03@2@I@Z ; std::allocator<std::array<int,4> >::allocate
?allocate@?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAEPAV?$array@H$03@2@I@Z ENDP ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAE@XZ PROC ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::_Wrap_alloc<std::allocator<std::array<int,4> > >, COMDAT
; _this$ = ecx

; 1038 : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@V?$array@H$03@std@@@std@@@std@@QAE@XZ ENDP ; std::_Wrap_alloc<std::allocator<std::array<int,4> > >::_Wrap_alloc<std::allocator<std::array<int,4> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAIABV?$allocator@V?$array@H$03@std@@@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAIABV?$allocator@V?$array@H$03@std@@@2@@Z PROC ; std::allocator_traits<std::allocator<std::array<int,4> > >::max_size, COMDAT

; 970  : 		return (_Al.max_size());

	mov	eax, 268435455				; 0fffffffH

; 971  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@V?$array@H$03@std@@@std@@@std@@SAIABV?$allocator@V?$array@H$03@std@@@2@@Z ENDP ; std::allocator_traits<std::allocator<std::array<int,4> > >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator@V?$array@H$03@std@@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@V?$array@H$03@std@@@std@@QBEIXZ PROC ; std::allocator<std::array<int,4> >::max_size, COMDAT
; _this$ = ecx

; 851  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 268435455				; 0fffffffH

; 852  : 		}

	ret	0
?max_size@?$allocator@V?$array@H$03@std@@@std@@QBEIXZ ENDP ; std::allocator<std::array<int,4> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@V?$array@H$03@std@@@std@@QAEPAV?$array@H$03@2@I@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@V?$array@H$03@std@@@std@@QAEPAV?$array@H$03@2@I@Z PROC ; std::allocator<std::array<int,4> >::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 268435455				; 0fffffffH
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	shl	eax, 4

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@V?$array@H$03@std@@@std@@QAEPAV?$array@H$03@2@I@Z ENDP ; std::allocator<std::array<int,4> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@2@I@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@2@I@Z PROC ; std::allocator<std::array<int,4> >::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	16					; 00000010H
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@V?$array@H$03@std@@@std@@QAEXPAV?$array@H$03@2@I@Z ENDP ; std::allocator<std::array<int,4> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@V?$array@H$03@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@V?$array@H$03@std@@@std@@QAE@XZ PROC	; std::allocator<std::array<int,4> >::allocator<std::array<int,4> >, COMDAT
; _this$ = ecx

; 803  : 		{	// construct default allocator (do nothing)
; 804  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@V?$array@H$03@std@@@std@@QAE@XZ ENDP	; std::allocator<std::array<int,4> >::allocator<std::array<int,4> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\bitset
;	COMDAT ??0?$bitset@$0CA@@std@@QAE@_K@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 8
??0?$bitset@$0CA@@std@@QAE@_K@Z PROC			; std::bitset<32>::bitset<32>, COMDAT
; _this$ = ecx

; 138  : 		{	// construct from bits in unsigned long long

	npad	2
	push	ebp
	mov	ebp, esp

; 137  : 		: _Array{static_cast<_Ty>(_Need_mask ? _Val & _Mask : _Val)}

	mov	eax, DWORD PTR __Val$[ebp]
	mov	DWORD PTR [ecx], eax

; 139  : 		}

	mov	eax, ecx
	pop	ebp
	ret	8
??0?$bitset@$0CA@@std@@QAE@_K@Z ENDP			; std::bitset<32>::bitset<32>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\bitset
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\array
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\array
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ??0InstructionSet_Internal@InstructionSet@@QAE@XZ
_TEXT	SEGMENT
_brand$ = -140						; size = 64
_vendor$ = -76						; size = 32
_cpui$ = -44						; size = 16
_this$1$ = -28						; size = 4
$T2 = -24						; size = 4
_i$1$ = -24						; size = 4
_i$1$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0InstructionSet_Internal@InstructionSet@@QAE@XZ PROC	; InstructionSet::InstructionSet_Internal::InstructionSet_Internal, COMDAT
; _this$ = ecx

; 560  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0InstructionSet_Internal@InstructionSet@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 128				; 00000080H
	mov	eax, ecx
	push	ebx
	push	esi
	mov	DWORD PTR _this$[ebp], eax
	push	edi
	lea	edi, DWORD PTR [eax+8]
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 560  :     {

	mov	DWORD PTR $T2[ebp], edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+48], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+52], 15			; 0000000fH
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 560  :     {

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+32], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 560  :     {

	mov	WORD PTR [eax+56], 0
	lea	ecx, DWORD PTR [eax+84]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\bitset

; 137  : 		: _Array{static_cast<_Ty>(_Need_mask ? _Val & _Mask : _Val)}

	mov	DWORD PTR [eax+60], 0
	mov	DWORD PTR [eax+64], 0
	mov	DWORD PTR [eax+68], 0
	mov	DWORD PTR [eax+72], 0
	mov	DWORD PTR [eax+76], 0
	mov	DWORD PTR [eax+80], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 559  :                                      data_     {       }, extdata_  {       } 

	mov	DWORD PTR _this$1$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [ecx], 0

; 477  : 		_Mylast(),

	mov	DWORD PTR [ecx+4], 0

; 478  : 		_Myend()

	mov	DWORD PTR [ecx+8], 0

; 476  : 		: _Myfirst(),

	mov	DWORD PTR [eax+96], 0

; 477  : 		_Mylast(),

	mov	DWORD PTR [eax+100], 0

; 478  : 		_Myend()

	mov	DWORD PTR [eax+104], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 567  :       __cpuid (cpui.data (), 0);

	xor	eax, eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	xor	ecx, ecx
	push	ebx
	cpuid
	mov	esi, ebx
	pop	ebx
	lea	edi, DWORD PTR _cpui$[ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, edi

; 570  :       for (int i = 0; i <= nIds_; ++i)

	mov	edi, DWORD PTR $T2[ebp]
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cpui$[ebp]
	mov	DWORD PTR [ecx], eax
	xor	ecx, ecx
	mov	DWORD PTR _i$1$[ebp], ecx
	test	eax, eax
	js	SHORT $LN3@Instructio
$LL4@Instructio:

; 572  :         __cpuidex       (cpui.data (), i, 0);

	mov	eax, ecx
	xor	ecx, ecx
	push	ebx
	cpuid
	mov	esi, ebx
	pop	ebx
	lea	edi, DWORD PTR _cpui$[ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 947  : 		emplace_back(_Val);

	mov	edi, DWORD PTR _this$[ebp]
	push	eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 572  :         __cpuidex       (cpui.data (), i, 0);

	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 947  : 		emplace_back(_Val);

	lea	ecx, DWORD PTR [edi+84]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 572  :         __cpuidex       (cpui.data (), i, 0);

	mov	DWORD PTR [eax+12], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 947  : 		emplace_back(_Val);

	call	??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::emplace_back<std::array<int,4> const &>
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 570  :       for (int i = 0; i <= nIds_; ++i)

	mov	ecx, DWORD PTR _i$1$[ebp]
	inc	ecx
	mov	DWORD PTR _i$1$[ebp], ecx
	cmp	ecx, DWORD PTR [edi]
	jle	SHORT $LL4@Instructio
	mov	edi, DWORD PTR $T2[ebp]
$LN3@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\array

; 158  : 		return (_Elems[_Pos]);

	mov	eax, DWORD PTR _this$1$[ebp]
	xorps	xmm0, xmm0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 578  :       char vendor [0x20] = { };

	movups	XMMWORD PTR _vendor$[ebp], xmm0
	movups	XMMWORD PTR _vendor$[ebp+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\array

; 158  : 		return (_Elems[_Pos]);

	mov	ecx, DWORD PTR [eax]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 580  :       *reinterpret_cast <int *>(vendor    ) = data_ [0][1];

	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _vendor$[ebp], eax

; 581  :       *reinterpret_cast <int *>(vendor + 4) = data_ [0][3];

	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _vendor$[ebp+4], eax

; 582  :       *reinterpret_cast <int *>(vendor + 8) = data_ [0][2];

	mov	eax, DWORD PTR [ecx+8]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	ecx, DWORD PTR _vendor$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 582  :       *reinterpret_cast <int *>(vendor + 8) = data_ [0][2];

	mov	DWORD PTR _vendor$[ebp+8], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	edx, DWORD PTR [ecx+1]
	npad	4
$LL423@Instructio:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL423@Instructio
	sub	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	lea	eax, DWORD PTR _vendor$[ebp]
	push	ecx
	push	eax
	mov	ecx, edi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 16			; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN191@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [edi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN192@Instructio
$LN191@Instructio:
	mov	ecx, edi
$LN192@Instructio:

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	cmp	DWORD PTR [edi+16], 12			; 0000000cH
	jne	SHORT $LN8@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

	mov	edx, OFFSET ??_C@_0N@BDDFKIGD@GenuineIntel?$AA@
	mov	esi, 8
$LL426@Instructio:
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN425@Instructio
	add	ecx, 4
	add	edx, 4
	sub	esi, 4
	jae	SHORT $LL426@Instructio
	xor	eax, eax
	jmp	SHORT $LN428@Instructio
$LN425@Instructio:
	cmp	al, BYTE PTR [edx]
	jne	SHORT $LN427@Instructio
	mov	al, BYTE PTR [ecx+1]
	cmp	al, BYTE PTR [edx+1]
	jne	SHORT $LN427@Instructio
	mov	al, BYTE PTR [ecx+2]
	cmp	al, BYTE PTR [edx+2]
	jne	SHORT $LN427@Instructio
	mov	al, BYTE PTR [ecx+3]
	cmp	al, BYTE PTR [edx+3]
	jne	SHORT $LN427@Instructio
	xor	eax, eax
	jmp	SHORT $LN428@Instructio
$LN427@Instructio:
	sbb	eax, eax
	or	eax, 1
$LN428@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	test	eax, eax
	jne	SHORT $LN8@Instructio
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 586  :            if  (vendor_ == "GenuineIntel")  isIntel_ = true;

	mov	edi, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edi+56], 1
	jmp	SHORT $LN10@Instructio
$LN8@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edi+20], 16			; 00000010H

; 1844 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [edi+16]

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN233@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edi, DWORD PTR [edi]
$LN233@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	cmp	DWORD PTR [eax], 12			; 0000000cH
	jne	SHORT $LN437@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

	mov	ecx, OFFSET ??_C@_0N@FFJGBINN@AuthenticAMD?$AA@
	mov	edx, 8
$LL431@Instructio:
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [ecx]
	jne	SHORT $LN430@Instructio
	add	edi, 4
	add	ecx, 4
	sub	edx, 4
	jae	SHORT $LL431@Instructio
	xor	eax, eax
	jmp	SHORT $LN433@Instructio
$LN430@Instructio:
	cmp	al, BYTE PTR [ecx]
	jne	SHORT $LN432@Instructio
	mov	al, BYTE PTR [edi+1]
	cmp	al, BYTE PTR [ecx+1]
	jne	SHORT $LN432@Instructio
	mov	al, BYTE PTR [edi+2]
	cmp	al, BYTE PTR [ecx+2]
	jne	SHORT $LN432@Instructio
	mov	al, BYTE PTR [edi+3]
	cmp	al, BYTE PTR [ecx+3]
	jne	SHORT $LN432@Instructio
	xor	eax, eax
	jmp	SHORT $LN433@Instructio
$LN432@Instructio:
	sbb	eax, eax
	or	eax, 1
$LN433@Instructio:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 587  :       else if  (vendor_ == "AuthenticAMD")  isAMD_   = true;

	mov	edi, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 25   : 	return (_Left_size == _Right_size && _Traits::compare(_Left, _Right, _Left_size) == 0);

	test	eax, eax
	jne	SHORT $LN10@Instructio
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 587  :       else if  (vendor_ == "AuthenticAMD")  isAMD_   = true;

	mov	BYTE PTR [edi+57], 1
	jmp	SHORT $LN10@Instructio
$LN437@Instructio:
	mov	edi, DWORD PTR _this$[ebp]
$LN10@Instructio:

; 588  : 
; 589  :       // Load Bitset with Flags for Function 0x00000001
; 590  :       //
; 591  :       if (nIds_ >= 1)

	mov	ecx, DWORD PTR [edi]

; 592  :       {
; 593  :         f_1_ECX_ = data_ [1][2];

	lea	edx, DWORD PTR [edi+84]
	cmp	ecx, 1
	jl	SHORT $LN11@Instructio
	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR [edi+60], eax

; 594  :         f_1_EDX_ = data_ [1][3];

	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edi+64], eax
$LN11@Instructio:

; 595  :       }
; 596  : 
; 597  :       // Load Bitset with Flags for Function 0x00000007
; 598  :       //
; 599  :       if (nIds_ >= 7)

	cmp	ecx, 7
	jl	SHORT $LN12@Instructio

; 600  :       {
; 601  :         f_7_EBX_ = data_ [7][1];

	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+116]
	mov	DWORD PTR [edi+68], eax

; 602  :         f_7_ECX_ = data_ [7][2];

	mov	eax, DWORD PTR [edx]
	mov	eax, DWORD PTR [eax+120]
	mov	DWORD PTR [edi+72], eax
$LN12@Instructio:

; 603  :       }
; 604  : 
; 605  :       // Calling __cpuid with 0x80000000 as the function_id argument
; 606  :       // gets the number of the highest valid extended ID.
; 607  :       //
; 608  :        __cpuid (cpui.data ( ), 0x80000000);

	mov	eax, -2147483648			; 80000000H
	xor	ecx, ecx
	push	ebx
	cpuid
	mov	esi, ebx
	pop	ebx
	lea	edi, DWORD PTR _cpui$[ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, edi
	mov	edi, DWORD PTR _this$[ebp]

; 609  :       nExIds_ = cpui      [0];
; 610  : 
; 611  :       char brand [0x40] = { };

	push	64					; 00000040H
	push	0
	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
	mov	eax, DWORD PTR _cpui$[ebp]
	mov	DWORD PTR [edi+4], eax
	lea	eax, DWORD PTR _brand$[ebp]
	push	eax
	call	_memset

; 613  :       for (int i = 0x80000000; i <= nExIds_; ++i)

	mov	eax, -2147483648			; 80000000H
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _i$1$[ebp], eax
	npad	4
$LL7@Instructio:

; 615  :         __cpuidex          (cpui.data (), i, 0);

	xor	ecx, ecx
	push	ebx
	cpuid
	mov	esi, ebx
	pop	ebx
	lea	edi, DWORD PTR _cpui$[ebp]
	mov	DWORD PTR [edi], eax
	mov	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 947  : 		emplace_back(_Val);

	mov	edi, DWORD PTR _this$[ebp]
	push	eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 615  :         __cpuidex          (cpui.data (), i, 0);

	mov	DWORD PTR [eax+4], esi
	mov	DWORD PTR [eax+8], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 947  : 		emplace_back(_Val);

	lea	ecx, DWORD PTR [edi+96]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 615  :         __cpuidex          (cpui.data (), i, 0);

	mov	DWORD PTR [eax+12], edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 947  : 		emplace_back(_Val);

	call	??$emplace_back@ABV?$array@H$03@std@@@?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAEXABV?$array@H$03@1@@Z ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::emplace_back<std::array<int,4> const &>
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 613  :       for (int i = 0x80000000; i <= nExIds_; ++i)

	mov	eax, DWORD PTR _i$1$[ebp]
	inc	eax
	mov	DWORD PTR _i$1$[ebp], eax
	cmp	eax, DWORD PTR [edi+4]
	jle	SHORT $LL7@Instructio

; 616  :         extdata_.push_back (cpui);
; 617  :       }
; 618  : 
; 619  :       // Load Bitset with Flags for Function 0x80000001
; 620  :       //
; 621  :       if (nExIds_ >= 0x80000001)

	cmp	DWORD PTR [edi+4], -2147483647		; 80000001H
	jb	SHORT $LN13@Instructio

; 622  :       {
; 623  :         f_81_ECX_ = extdata_ [1][2];

	mov	eax, DWORD PTR [edi+96]
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR [edi+76], eax

; 624  :         f_81_EDX_ = extdata_ [1][3];

	mov	eax, DWORD PTR [edi+96]
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edi+80], eax
$LN13@Instructio:

; 625  :       }
; 626  : 
; 627  :       // Interpret CPU Brand String if Reported
; 628  :       if (nExIds_ >= 0x80000004)

	cmp	DWORD PTR [edi+4], -2147483644		; 80000004H
	jb	SHORT $LN435@Instructio
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vector

; 1746 : 		return (this->_Myfirst()[_Pos]);

	mov	eax, DWORD PTR [edi+96]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	edx, DWORD PTR _brand$[ebp]
	lea	esi, DWORD PTR [edx+1]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 630  :         memcpy (brand,      extdata_ [2].data (), sizeof cpui);

	movups	xmm0, XMMWORD PTR [eax+32]
	movups	XMMWORD PTR _brand$[ebp], xmm0

; 631  :         memcpy (brand + 16, extdata_ [3].data (), sizeof cpui);

	movups	xmm0, XMMWORD PTR [eax+48]
	movups	XMMWORD PTR _brand$[ebp+16], xmm0

; 632  :         memcpy (brand + 32, extdata_ [4].data (), sizeof cpui);

	movups	xmm0, XMMWORD PTR [eax+64]
	movups	XMMWORD PTR _brand$[ebp+32], xmm0
	npad	5
$LL434@Instructio:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	al, BYTE PTR [edx]
	inc	edx
	test	al, al
	jne	SHORT $LL434@Instructio
	sub	edx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	lea	eax, DWORD PTR _brand$[ebp]
	push	edx
	push	eax
	lea	ecx, DWORD PTR [edi+32]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
$LN435@Instructio:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 636  :     };

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, edi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	jmp	??1?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::~vector<std::array<int,4>,std::allocator<std::array<int,4> > >
__unwindfunclet$??0InstructionSet_Internal@InstructionSet@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	jmp	??1?$vector@V?$array@H$03@std@@V?$allocator@V?$array@H$03@std@@@2@@std@@QAE@XZ ; std::vector<std::array<int,4>,std::allocator<std::array<int,4> > >::~vector<std::array<int,4>,std::allocator<std::array<int,4> > >
__ehhandler$??0InstructionSet_Internal@InstructionSet@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??0InstructionSet_Internal@InstructionSet@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0InstructionSet_Internal@InstructionSet@@QAE@XZ ENDP	; InstructionSet::InstructionSet_Internal::InstructionSet_Internal
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_pe32$ = -556						; size = 556
_wszProcName$ = 8					; size = 4
?SK_IsProcessRunning@@YA_NPB_W@Z PROC			; SK_IsProcessRunning

; 373  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 556				; 0000022cH

; 374  :   PROCESSENTRY32 pe32 = { };

	lea	eax, DWORD PTR _pe32$[ebp]
	push	ebx
	push	esi
	push	edi
	push	556					; 0000022cH
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 375  : 
; 376  :   CHandle hProcSnap (

	push	0
	push	2
	call	_CreateToolhelp32Snapshot@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 381  :   if (hProcSnap == INVALID_HANDLE_VALUE)

	cmp	esi, -1
	je	SHORT $LN10@SK_IsProce

; 382  :     return false;
; 383  : 
; 384  :   pe32.dwSize =
; 385  :     sizeof PROCESSENTRY32;
; 386  : 
; 387  :   if (! Process32First ( hProcSnap,

	lea	eax, DWORD PTR _pe32$[ebp]
	mov	DWORD PTR _pe32$[ebp], 556		; 0000022cH
	push	eax
	push	esi
	call	_Process32FirstW@8
	test	eax, eax
	je	SHORT $LN10@SK_IsProce
	mov	edi, DWORD PTR _wszProcName$[ebp]
$LL4@SK_IsProce:

; 388  :                            &pe32    )
; 389  :      )
; 390  :   {
; 391  :     return false;
; 392  :   }
; 393  : 
; 394  :   do
; 395  :   {
; 396  :     if (! SK_Path_wcsicmp ( wszProcName,

	lea	eax, DWORD PTR _pe32$[ebp+36]
	push	eax
	push	edi
	call	?SK_Path_wcsicmp@@YAHPB_W0@Z		; SK_Path_wcsicmp
	add	esp, 8
	test	eax, eax
	je	SHORT $LN28@SK_IsProce

; 401  :     }
; 402  :   } while ( Process32Next ( hProcSnap,

	lea	eax, DWORD PTR _pe32$[ebp]
	push	eax
	push	esi
	call	_Process32NextW@8
	test	eax, eax
	jne	SHORT $LL4@SK_IsProce
$LN10@SK_IsProce:
	xor	bl, bl
$LN11@SK_IsProce:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN37@SK_IsProce

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN37@SK_IsProce:
	pop	edi
	pop	esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 406  :   return false;

	mov	al, bl
	pop	ebx

; 407  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN28@SK_IsProce:

; 397  :                               pe32.szExeFile )
; 398  :        )
; 399  :     {
; 400  :       return true;

	mov	bl, 1
	jmp	SHORT $LN11@SK_IsProce
?SK_IsProcessRunning@@YA_NPB_W@Z ENDP			; SK_IsProcessRunning
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx

; 267  : 		free(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__free
	add	esp, 4

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::~CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nElements$ = 8						; size = 4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate, COMDAT
; _this$ = ecx

; 455  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

	mov	eax, DWORD PTR _nElements$[ebp]
	push	esi

; 455  : 	{

	mov	esi, ecx

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

	mov	ecx, 2
	mul	ecx

; 137  : 	if(i64Result>UINT_MAX)

	test	edx, edx
	jne	SHORT $LN17@Allocate
	cmp	eax, -1
	ja	SHORT $LN17@Allocate

; 262  : 		return malloc(nBytes);

	push	eax
	call	DWORD PTR __imp__malloc
	add	esp, 4

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	DWORD PTR [esi], eax
	test	eax, eax
	setne	al
	pop	esi

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);
; 462  : 	}

	pop	ebp
	ret	4
$LN17@Allocate:

; 456  : 		size_t nBytes=0;
; 457  : 		if(FAILED(::ATL::AtlMultiply(&nBytes, nElements, sizeof(T))))
; 458  : 		{
; 459  : 			return false;

	xor	al, al
	pop	esi

; 460  : 		}
; 461  : 		return this->AllocateBytes(nBytes);
; 462  : 	}

	pop	ebp
	ret	4
?Allocate@?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@PA_W@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@PA_W@Z PROC ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 443  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 343  : 		m_pData(pData)

	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax

; 444  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@PA_W@Z ENDP ; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0

; 435  : 	{
; 436  : 	}

	mov	eax, ecx
	ret	0
??0?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CCRTAllocator>::CHeapPtr<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

	npad	2
	push	esi
	mov	esi, ecx

; 267  : 		free(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__free
	add	esp, 4

; 408  : 		Allocator::Free(m_pData);
; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 410  : 	}

	ret	0
?Free@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes, COMDAT
; _this$ = ecx

; 381  : 	{

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 262  : 		return malloc(nBytes);

	push	DWORD PTR _nBytes$[ebp]

; 381  : 	{

	mov	esi, ecx

; 262  : 		return malloc(nBytes);

	call	DWORD PTR __imp__malloc
	add	esp, 4

; 382  : 		ATLASSERT(m_pData == NULL);
; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	DWORD PTR [esi], eax

; 384  : 		if (m_pData == NULL)

	test	eax, eax
	setne	al
	pop	esi

; 385  : 			return false;
; 386  : 
; 387  : 		return true;
; 388  : 	}

	pop	ebp
	ret	4
?AllocateBytes@?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE_NI@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::AllocateBytes
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 364  : 		return m_pData;

	mov	eax, DWORD PTR [ecx]

; 365  : 	}

	ret	0
??B?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

	npad	2
	push	esi
	mov	esi, ecx

; 267  : 		free(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__free
	add	esp, 4

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 350  : 		Free();
; 351  : 	}

	ret	0
??1?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::~CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@PA_W@Z
_TEXT	SEGMENT
_pData$ = 8						; size = 4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@PA_W@Z PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 344  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 343  : 		m_pData(pData)

	mov	eax, DWORD PTR _pData$[ebp]
	mov	DWORD PTR [ecx], eax

; 345  : 	}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@PA_W@Z ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>, COMDAT
; _this$ = ecx

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0

; 337  : 	}

	mov	eax, ecx
	ret	0
??0?$CHeapPtrBase@_WVCCRTAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>::CHeapPtrBase<wchar_t,ATL::CCRTAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CComHeapPtr@_W@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CComHeapPtr@_W@ATL@@QAE@XZ PROC			; ATL::CComHeapPtr<wchar_t>::~CComHeapPtr<wchar_t>, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__CoTaskMemFree@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$CComHeapPtr@_W@ATL@@QAE@XZ ENDP			; ATL::CComHeapPtr<wchar_t>::~CComHeapPtr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0?$CComHeapPtr@_W@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CComHeapPtr@_W@ATL@@QAE@XZ PROC			; ATL::CComHeapPtr<wchar_t>::CComHeapPtr<wchar_t>, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1141 : 	}

	mov	eax, ecx
	ret	0
??0?$CComHeapPtr@_W@ATL@@QAE@XZ ENDP			; ATL::CComHeapPtr<wchar_t>::CComHeapPtr<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CComAllocator>::~CHeapPtr<wchar_t,ATL::CComAllocator>, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__CoTaskMemFree@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi
	ret	0
??1?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CComAllocator>::~CHeapPtr<wchar_t,ATL::CComAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ PROC	; ATL::CHeapPtr<wchar_t,ATL::CComAllocator>::CHeapPtr<wchar_t,ATL::CComAllocator>, COMDAT
; _this$ = ecx

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0

; 435  : 	{
; 436  : 	}

	mov	eax, ecx
	ret	0
??0?$CHeapPtr@_WVCComAllocator@ATL@@@ATL@@QAE@XZ ENDP	; ATL::CHeapPtr<wchar_t,ATL::CComAllocator>::CHeapPtr<wchar_t,ATL::CComAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Free@?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
?Free@?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEXXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::Free, COMDAT
; _this$ = ecx

; 407  : 	{

	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__CoTaskMemFree@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 410  : 	}

	ret	0
?Free@?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??I?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEPAPA_WXZ
_TEXT	SEGMENT
??I?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEPAPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::operator&, COMDAT
; _this$ = ecx

; 375  : 		ATLASSUME(m_pData == NULL);
; 376  : 		return &m_pData;

	mov	eax, ecx

; 377  : 	}

	ret	0
??I?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAEPAPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::operator&
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??B?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QBEPA_WXZ
_TEXT	SEGMENT
??B?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QBEPA_WXZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::operator wchar_t *, COMDAT
; _this$ = ecx

; 364  : 		return m_pData;

	mov	eax, DWORD PTR [ecx]

; 365  : 	}

	ret	0
??B?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QBEPA_WXZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::operator wchar_t *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??1?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::~CHeapPtrBase<wchar_t,ATL::CComAllocator>, COMDAT
; _this$ = ecx

; 349  : 	{

	npad	2
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR [esi]
	call	DWORD PTR __imp__CoTaskMemFree@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR [esi], 0
	pop	esi

; 350  : 		Free();
; 351  : 	}

	ret	0
??1?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::~CHeapPtrBase<wchar_t,ATL::CComAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??0?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@IAE@XZ
_TEXT	SEGMENT
??0?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@IAE@XZ PROC ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::CHeapPtrBase<wchar_t,ATL::CComAllocator>, COMDAT
; _this$ = ecx

; 335  : 		m_pData(NULL)

	mov	DWORD PTR [ecx], 0

; 337  : 	}

	mov	eax, ecx
	ret	0
??0?$CHeapPtrBase@_WVCComAllocator@ATL@@@ATL@@IAE@XZ ENDP ; ATL::CHeapPtrBase<wchar_t,ATL::CComAllocator>::CHeapPtrBase<wchar_t,ATL::CComAllocator>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszProcessName$1 = -1044				; size = 1040
_dwProcessSize$2 = -4					; size = 4
?SK_GetFullyQualifiedApp@@YAPB_WXZ PROC			; SK_GetFullyQualifiedApp

; 2334 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 1044				; 00000414H
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 9003 :     return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);

	mov	ecx, 1
	mov	edx, OFFSET ?init@?1??SK_GetFullyQualifiedApp@@YAPB_WXZ@4KC
	xor	eax, eax
	lock	 cmpxchg DWORD PTR [edx], ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2338 :   if (! InterlockedCompareExchange (&init, TRUE, FALSE))

	test	eax, eax
	jne	SHORT $LN6@SK_GetFull

; 2339 :   {
; 2340 :     DWORD   dwProcessSize = MAX_PATH * 2;
; 2341 :     wchar_t wszProcessName [MAX_PATH * 2] = { };

	push	1040					; 00000410H
	push	eax
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	mov	DWORD PTR _dwProcessSize$2[ebp], 520	; 00000208H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2342 : 
; 2343 :     HANDLE hProc =
; 2344 :       GetCurrentProcess ();

	call	DWORD PTR __imp__GetCurrentProcess@0

; 2345 : 
; 2346 :     QueryFullProcessImageName (

	lea	ecx, DWORD PTR _dwProcessSize$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	push	ecx
	push	0
	push	eax
	call	DWORD PTR __imp__QueryFullProcessImageNameW@16

; 2347 :       hProc,
; 2348 :         0,
; 2349 :           wszProcessName,
; 2350 :             &dwProcessSize );
; 2351 : 
; 2352 :     lstrcpynW (

	push	519					; 00000207H
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	push	eax
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+2080
	call	DWORD PTR __imp__lstrcpynW@12
$LN6@SK_GetFull:

; 2353 :       host_proc.wszFullName,
; 2354 :         wszProcessName,
; 2355 :           MAX_PATH * 2 - 1
; 2356 :     );
; 2357 :   }
; 2358 : 
; 2359 :   return host_proc.wszFullName;

	mov	eax, OFFSET ?host_proc@@3Usk_host_process_s@@A+2080

; 2360 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetFullyQualifiedApp@@YAPB_WXZ ENDP			; SK_GetFullyQualifiedApp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??__F_AtlWinModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlWinModule'', COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
	push	OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+32
	test	eax, eax
	je	SHORT $LN29@dynamic

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+32, 0
$LN29@dynamic:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+40, 0
	mov	DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+36, 0
	ret	0
??__F_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlWinModule''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlWinModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlWinModule'', COMDAT

; 2979 : __declspec(selectany) CAtlWinModule _AtlWinModule;

	mov	ecx, OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
	call	??0CAtlWinModule@ATL@@QAE@XZ		; ATL::CAtlWinModule::CAtlWinModule
	push	OFFSET ??__F_AtlWinModule@ATL@@YAXXZ	; ATL::`dynamic atexit destructor for '_AtlWinModule''
	call	_atexit
	pop	ecx
	ret	0
??__E_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlWinModule''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT
?Term@CAtlWinModule@ATL@@QAEXXZ PROC			; ATL::CAtlWinModule::Term, COMDAT
; _this$ = ecx

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
	push	ecx
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm

; 2965 : 	}

	ret	0
?Term@CAtlWinModule@ATL@@QAEXXZ ENDP			; ATL::CAtlWinModule::Term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::~CAtlWinModule, COMDAT
; _this$ = ecx

; 2958 : 	{

	npad	2
	push	esi

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4

; 2958 : 	{

	mov	esi, ecx

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	esi
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN26@CAtlWinMod

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi+32], 0
$LN26@CAtlWinMod:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+36], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2960 : 	}

	ret	0
??1CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::~CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2944 : 	CAtlWinModule()

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	xorps	xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [esi+4], xmm0
	lea	eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2944 : 	CAtlWinModule()

	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movq	QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2946 : 		cbSize = sizeof(_ATL_WIN_MODULE);

	mov	DWORD PTR [esi], 44			; 0000002cH

; 8412 : 	pWinModule->m_pCreateWndList = NULL;

	mov	DWORD PTR [esi+28], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN26@CAtlWinMod

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN27@CAtlWinMod
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2948 : 		if (FAILED(hr))

	test	eax, eax
$LN27@CAtlWinMod:

; 2953 : 			return;
; 2954 : 		}
; 2955 : 	}

	mov	eax, esi

; 2948 : 		if (FAILED(hr))

	jns	SHORT $LN2@CAtlWinMod

; 2949 : 		{
; 2950 : 			ATLASSERT(0);
; 2951 : 			CAtlBaseModule::m_bInitFailed = true;

	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2952 : 			cbSize = 0;

	mov	DWORD PTR [esi], 0
	pop	esi

; 2953 : 			return;
; 2954 : 		}
; 2955 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@CAtlWinMod:
	mov	eax, esi
$LN2@CAtlWinMod:
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??__F_AtlComModule@ATL@@YAXXZ
text$yd	SEGMENT
__$EHRec$ = -12						; size = 12
??__F_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlComModule'', COMDAT
	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??__F_AtlComModule@ATL@@YAXXZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 2615 : 		Term();

	mov	ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?Term@CAtlComModule@ATL@@QAEXXZ		; ATL::CAtlComModule::Term

; 2616 : 	}

	mov	ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
	call	??1_ATL_COM_MODULE70@ATL@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yd	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??__F_AtlComModule@ATL@@YAXXZ:
	mov	eax, OFFSET __ehfuncinfo$??__F_AtlComModule@ATL@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__F_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlComModule''
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlComModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlComModule'', COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	0
	push	OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A+16
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN4@dynamic

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN20@dynamic
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2602 : 		if (FAILED(m_csObjMap.Init()))

	test	eax, eax
$LN20@dynamic:
	jns	SHORT $LN4@dynamic

; 2723 : __declspec(selectany) CAtlComModule _AtlComModule;

	push	OFFSET ??__F_AtlComModule@ATL@@YAXXZ	; ATL::`dynamic atexit destructor for '_AtlComModule''

; 2606 : 			CAtlBaseModule::m_bInitFailed = true;

	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2723 : __declspec(selectany) CAtlComModule _AtlComModule;

	call	_atexit
	pop	ecx
	ret	0
$LN4@dynamic:
	push	OFFSET ??__F_AtlComModule@ATL@@YAXXZ	; ATL::`dynamic atexit destructor for '_AtlComModule''

; 2610 : 		cbSize = sizeof(_ATL_COM_MODULE);

	mov	DWORD PTR ?_AtlComModule@ATL@@3VCAtlComModule@1@A, 40 ; 00000028H

; 2723 : __declspec(selectany) CAtlComModule _AtlComModule;

	call	_atexit
	pop	ecx
	ret	0
??__E_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlComModule''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlComModule@ATL@@QAEXXZ
_TEXT	SEGMENT
?Term@CAtlComModule@ATL@@QAEXXZ PROC			; ATL::CAtlComModule::Term, COMDAT
; _this$ = ecx

; 2620 : 	{

	npad	2
	push	edi
	mov	edi, ecx

; 2621 : 		if (cbSize == 0)

	cmp	DWORD PTR [edi], 0
	je	SHORT $LN1@Term

; 2622 : 			return;
; 2623 : 
; 2624 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

	push	esi
	mov	esi, DWORD PTR [edi+8]
	cmp	esi, DWORD PTR [edi+12]
	jae	SHORT $LN3@Term
	push	ebx
$LL4@Term:

; 2625 : 		{
; 2626 : 			if (*ppEntry != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Term

; 2627 : 			{
; 2628 : 				_ATL_OBJMAP_CACHE* pCache = (**ppEntry).pCache;

	mov	ebx, DWORD PTR [eax+16]

; 2629 : 
; 2630 : 				if (pCache->pCF != NULL)

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN2@Term

; 2631 : 				{
; 2632 : 					// Decode factory pointer if it's not null
; 2633 : 					IUnknown *factory = reinterpret_cast<IUnknown*>(::DecodePointer(pCache->pCF));

	push	eax
	call	DWORD PTR __imp__DecodePointer@4

; 2634 : 					_Analysis_assume_(factory != nullptr);
; 2635 : 					factory->Release();

	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+8]

; 2636 : 					pCache->pCF = NULL;

	mov	DWORD PTR [ebx], 0
$LN2@Term:

; 2622 : 			return;
; 2623 : 
; 2624 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

	add	esi, 4
	cmp	esi, DWORD PTR [edi+12]
	jb	SHORT $LL4@Term
	pop	ebx
$LN3@Term:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	lea	eax, DWORD PTR [edi+16]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2644 : 		cbSize = 0;

	mov	DWORD PTR [edi], 0
	pop	esi
$LN1@Term:
	pop	edi

; 2645 : 	}

	ret	0
?Term@CAtlComModule@ATL@@QAEXXZ ENDP			; ATL::CAtlComModule::Term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??1CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::~CAtlComModule, COMDAT
; _this$ = ecx

; 2614 : 	{

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1CAtlComModule@ATL@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 2615 : 		Term();

	call	?Term@CAtlComModule@ATL@@QAEXXZ		; ATL::CAtlComModule::Term

; 2616 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CAtlComModule@ATL@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CAtlComModule@ATL@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::~CAtlComModule
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::CAtlComModule, COMDAT
; _this$ = ecx

; 2593 : 	CAtlComModule() throw()

	npad	2
	push	esi
	mov	esi, ecx
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [eax], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movq	QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2595 : 		cbSize = 0;

	mov	DWORD PTR [esi], 0

; 2596 : 
; 2597 : 		m_hInstTypeLib = reinterpret_cast<HINSTANCE>(&__ImageBase);

	mov	DWORD PTR [esi+4], OFFSET ___ImageBase

; 2598 : 
; 2599 : 		m_ppAutoObjMapFirst = &__pobjMapEntryFirst + 1;

	mov	DWORD PTR [esi+8], OFFSET ___pobjMapEntryFirst+4

; 2600 : 		m_ppAutoObjMapLast = &__pobjMapEntryLast;

	mov	DWORD PTR [esi+12], OFFSET ___pobjMapEntryLast
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN2@CAtlComMod

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN18@CAtlComMod
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2602 : 		if (FAILED(m_csObjMap.Init()))

	test	eax, eax
$LN18@CAtlComMod:
	jns	SHORT $LN2@CAtlComMod

; 2611 : 	}

	mov	eax, esi
	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed
	pop	esi
	ret	0
$LN2@CAtlComMod:

; 2603 : 		{
; 2604 : 			ATLTRACE(atlTraceCOM, 0, _T("ERROR : Unable to initialize critical section in CAtlComModule\n"));
; 2605 : 			ATLASSERT(0);
; 2606 : 			CAtlBaseModule::m_bInitFailed = true;
; 2607 : 			return;
; 2608 : 		}
; 2609 : 		// Set cbSize on success.
; 2610 : 		cbSize = sizeof(_ATL_COM_MODULE);

	mov	DWORD PTR [esi], 40			; 00000028H

; 2611 : 	}

	mov	eax, esi
	pop	esi
	ret	0
??0CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::CAtlComModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?Close@CHandle@ATL@@QAEXXZ
_TEXT	SEGMENT
?Close@CHandle@ATL@@QAEXXZ PROC				; ATL::CHandle::Close, COMDAT
; _this$ = ecx

; 1255 : {

	npad	2
	push	esi
	mov	esi, ecx

; 1256 : 	if( m_h != NULL )

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Close

; 1257 : 	{
; 1258 : 		::CloseHandle( m_h );

	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 1259 : 		m_h = NULL;

	mov	DWORD PTR [esi], 0
$LN2@Close:
	pop	esi

; 1260 : 	}
; 1261 : }

	ret	0
?Close@CHandle@ATL@@QAEXXZ ENDP				; ATL::CHandle::Close
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??BCHandle@ATL@@QBEPAXXZ
_TEXT	SEGMENT
??BCHandle@ATL@@QBEPAXXZ PROC				; ATL::CHandle::operator void *, COMDAT
; _this$ = ecx

; 1235 : 	return( m_h );

	mov	eax, DWORD PTR [ecx]

; 1236 : }

	ret	0
??BCHandle@ATL@@QBEPAXXZ ENDP				; ATL::CHandle::operator void *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??1CHandle@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CHandle@ATL@@QAE@XZ PROC				; ATL::CHandle::~CHandle, COMDAT
; _this$ = ecx

; 1212 : {

	npad	2
	push	esi
	mov	esi, ecx

; 1213 : 	if( m_h != NULL )

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN5@CHandle

; 1258 : 		::CloseHandle( m_h );

	push	eax
	call	DWORD PTR __imp__CloseHandle@4

; 1259 : 		m_h = NULL;

	mov	DWORD PTR [esi], 0
$LN5@CHandle:
	pop	esi

; 1214 : 	{
; 1215 : 		Close();
; 1216 : 	}
; 1217 : }

	ret	0
??1CHandle@ATL@@QAE@XZ ENDP				; ATL::CHandle::~CHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0CHandle@ATL@@QAE@PAX@Z
_TEXT	SEGMENT
_h$ = 8							; size = 4
??0CHandle@ATL@@QAE@PAX@Z PROC				; ATL::CHandle::CHandle, COMDAT
; _this$ = ecx

; 1208 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1207 : 	m_h( h )

	mov	eax, DWORD PTR _h$[ebp]
	mov	DWORD PTR [ecx], eax

; 1209 : }

	mov	eax, ecx
	pop	ebp
	ret	4
??0CHandle@ATL@@QAE@PAX@Z ENDP				; ATL::CHandle::CHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0CHandle@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CHandle@ATL@@QAE@XZ PROC				; ATL::CHandle::CHandle, COMDAT
; _this$ = ecx

; 1196 : 	m_h( NULL )

	mov	DWORD PTR [ecx], 0

; 1198 : }

	mov	eax, ecx
	ret	0
??0CHandle@ATL@@QAE@XZ ENDP				; ATL::CHandle::CHandle
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?Free@CComAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CComAllocator@ATL@@SAXPAX@Z PROC			; ATL::CComAllocator::Free, COMDAT

; 1129 : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR _p$[ebp]
	call	DWORD PTR __imp__CoTaskMemFree@4

; 1131 : 	}

	pop	ebp
	ret	0
?Free@CComAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CComAllocator::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_pWinModule$ = 8					; size = 4
_hInst$ = 12						; size = 4
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z PROC ; ATL::AtlWinModuleTerm, COMDAT

; 7660 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 7661 : 	if (pWinModule == NULL)

	mov	esi, DWORD PTR _pWinModule$[ebp]
	test	esi, esi
	jne	SHORT $LN5@AtlWinModu
$LN35@AtlWinModu:

; 7662 : 		return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	pop	esi

; 7674 : }

	pop	ebp
	ret	8
$LN5@AtlWinModu:

; 7663 : 	if (pWinModule->cbSize == 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN34@AtlWinModu

; 7664 : 		return S_OK;
; 7665 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN35@AtlWinModu

; 7666 : 		return E_INVALIDARG;
; 7667 : 
; 7668 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

	push	edi
	xor	edi, edi
	cmp	DWORD PTR [esi+36], edi
	jle	SHORT $LN3@AtlWinModu

; 7669 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

	push	ebx
	mov	ebx, DWORD PTR _hInst$[ebp]
	npad	2
$LL4@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

	test	edi, edi
	js	SHORT $LN36@AtlWinModu
	cmp	edi, DWORD PTR [esi+36]
	jge	SHORT $LN36@AtlWinModu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 7669 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

	mov	eax, DWORD PTR [esi+32]
	push	ebx
	movzx	eax, WORD PTR [eax+edi*2]
	push	eax
	call	DWORD PTR __imp__UnregisterClassW@8
	inc	edi
	cmp	edi, DWORD PTR [esi+36]
	jl	SHORT $LL4@AtlWinModu
	pop	ebx
$LN3@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi+32]
	pop	edi
	test	eax, eax
	je	SHORT $LN20@AtlWinModu

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi+32], 0
$LN20@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	lea	eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 223  : 		m_nSize = 0;

	mov	DWORD PTR [esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	call	DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 7672 : 	pWinModule->cbSize = 0;

	mov	DWORD PTR [esi], 0
$LN34@AtlWinModu:

; 7673 : 	return S_OK;

	xor	eax, eax
	pop	esi

; 7674 : }

	pop	ebp
	ret	8
$LN36@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

	push	1
	push	-1073741684				; c000008cH
	call	?_AtlRaiseException@ATL@@YAXKK@Z	; ATL::_AtlRaiseException
$LN37@AtlWinModu:
$LN33@AtlWinModu:
	int	3
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z
_TEXT	SEGMENT
_pWinModule$ = 8					; size = 4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z PROC ; ATL::AtlWinModuleInit, COMDAT

; 8404 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 8405 : 	if (pWinModule == NULL)

	mov	eax, DWORD PTR _pWinModule$[ebp]
	test	eax, eax
	jne	SHORT $LN2@AtlWinModu
$LN15@AtlWinModu:

; 8406 : 		return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H

; 8421 : }

	pop	ebp
	ret	4
$LN2@AtlWinModu:

; 8407 : 
; 8408 : 	// check only in the DLL
; 8409 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

	cmp	DWORD PTR [eax], 44			; 0000002cH
	jne	SHORT $LN15@AtlWinModu
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 170  : 		HRESULT hRes = S_OK;

	xor	esi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 8412 : 	pWinModule->m_pCreateWndList = NULL;

	mov	DWORD PTR [eax+28], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	esi
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	add	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	eax
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN14@AtlWinModu

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
	mov	esi, eax
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	esi, esi
	jle	SHORT $LN14@AtlWinModu
	movzx	esi, si
	or	esi, -2147024896			; 80070000H
$LN14@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 8420 : 	return hr;

	mov	eax, esi
	pop	esi

; 8421 : }

	pop	ebp
	ret	4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ENDP ; ATL::AtlWinModuleInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN19@ATL_WIN_MO

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi+32], 0
$LN19@ATL_WIN_MO:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+36], 0
	pop	esi
	ret	0
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	xorps	xmm0, xmm0
	mov	DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [ecx+4], xmm0
	mov	eax, ecx
	movq	QWORD PTR [ecx+20], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 236  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 237  : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);
; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

	mov	edx, DWORD PTR _nIndex$[ebp]
	test	edx, edx
	js	SHORT $LN6@operator
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN6@operator

; 241  : 		}
; 242  : 		return m_aT[nIndex];

	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*2]

; 243  : 	}

	pop	ebp
	ret	4
$LN6@operator:

; 239  : 		{
; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

	push	1
	push	-1073741684				; c000008cH
	call	?_AtlRaiseException@ATL@@YAXKK@Z	; ATL::_AtlRaiseException
$LN7@operator:
$LN5@operator:
	int	3
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 215  : 	{

	npad	2
	push	esi
	mov	esi, ecx

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN11@RemoveAll

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi], 0
$LN11@RemoveAll:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 225  :     }

	ret	0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize, COMDAT
; _this$ = ecx

; 161  : 		return m_nSize;

	mov	eax, DWORD PTR [ecx+4]

; 162  : 	}

	ret	0
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 310  : {

	npad	2
	push	esi
	mov	esi, ecx

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN13@CSimpleArr

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi], 0
$LN13@CSimpleArr:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 311  : 	RemoveAll();
; 312  : }

	ret	0
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

	mov	DWORD PTR [ecx], 0

; 121  : 	}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
??1_ATL_COM_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70, COMDAT
; _this$ = ecx
	ret	0
??1_ATL_COM_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ??0_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
??0_ATL_COM_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70, COMDAT
; _this$ = ecx
	xorps	xmm0, xmm0
	mov	eax, ecx

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [ecx+16], xmm0
	movq	QWORD PTR [ecx+32], xmm0
	ret	0
??0_ATL_COM_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC ; ATL::CAtlBaseModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 316  : 		return m_hInst;

	mov	eax, DWORD PTR [ecx+4]

; 317  : 	}

	ret	0
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CAtlBaseModule::GetModuleInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
?Term@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Term, COMDAT
; _this$ = ecx

; 180  : 	{

	npad	2

; 181  : 		DeleteCriticalSection(&m_sec);

	push	ecx
	call	DWORD PTR __imp__DeleteCriticalSection@4

; 182  : 		return S_OK;

	xor	eax, eax

; 183  : 	}

	ret	0
?Term@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ?Init@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
?Init@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Init, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	0
	push	ecx
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN10@Init

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN9@Init
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 177  : 	}

	ret	0
$LN10@Init:

; 174  : 		}
; 175  : 
; 176  : 		return hRes;

	xor	eax, eax
$LN9@Init:

; 177  : 	}

	ret	0
?Init@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ??1CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CComCriticalSection@ATL@@QAE@XZ PROC			; ATL::CComCriticalSection::~CComCriticalSection, COMDAT
; _this$ = ecx

; 156  : 	}

	ret	0
??1CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::~CComCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CComCriticalSection@ATL@@QAE@XZ PROC			; ATL::CComCriticalSection::CComCriticalSection, COMDAT
; _this$ = ecx

; 149  : 	CComCriticalSection() throw()

	xorps	xmm0, xmm0

; 150  : 	{
; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));
; 152  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm0
	ret	0
??0CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::CComCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
_lpCriticalSection$ = 8					; size = 4
_dwSpinCount$ = 12					; size = 4
_Flags$ = 16						; size = 4
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 727  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	DWORD PTR _Flags$[ebp]
	push	DWORD PTR _dwSpinCount$[ebp]
	push	DWORD PTR _lpCriticalSection$[ebp]
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12

; 731  : #else
; 732  : 	UNREFERENCED_PARAMETER(Flags);
; 733  : 
; 734  : 	// ...otherwise fall back to using InitializeCriticalSectionAndSpinCount.
; 735  : 	return ::InitializeCriticalSectionAndSpinCount(lpCriticalSection, dwSpinCount);
; 736  : #endif
; 737  : }

	pop	ebp
	ret	0
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
_dwExceptionCode$ = 8					; size = 4
_dwExceptionFlags$ = 12					; size = 4
?_AtlRaiseException@ATL@@YAXKK@Z PROC			; ATL::_AtlRaiseException, COMDAT

; 30   : {

	npad	2
	push	ebp
	mov	ebp, esp

; 31   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

	push	0
	push	0
	push	DWORD PTR _dwExceptionFlags$[ebp]
	push	DWORD PTR _dwExceptionCode$[ebp]
	call	DWORD PTR __imp__RaiseException@16

; 32   : }

	pop	ebp
	ret	0
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Free@CCRTAllocator@ATL@@SAXPAX@Z
_TEXT	SEGMENT
_p$ = 8							; size = 4
?Free@CCRTAllocator@ATL@@SAXPAX@Z PROC			; ATL::CCRTAllocator::Free, COMDAT

; 267  : 		free(p);

	jmp	DWORD PTR __imp__free
?Free@CCRTAllocator@ATL@@SAXPAX@Z ENDP			; ATL::CCRTAllocator::Free
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ?Allocate@CCRTAllocator@ATL@@SAPAXI@Z
_TEXT	SEGMENT
_nBytes$ = 8						; size = 4
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z PROC		; ATL::CCRTAllocator::Allocate, COMDAT

; 261  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 263  : 	}

	pop	ebp

; 262  : 		return malloc(nBytes);

	jmp	DWORD PTR __imp__malloc
?Allocate@CCRTAllocator@ATL@@SAPAXI@Z ENDP		; ATL::CCRTAllocator::Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
;	COMDAT ??$AtlMultiply@I@ATL@@YAJPAIII@Z
_TEXT	SEGMENT
_piResult$ = 8						; size = 4
_iLeft$ = 12						; size = 4
_iRight$ = 16						; size = 4
??$AtlMultiply@I@ATL@@YAJPAIII@Z PROC			; ATL::AtlMultiply<unsigned int>, COMDAT

; 135  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 136  : 	unsigned __int64 i64Result=static_cast<unsigned __int64>(iLeft) * static_cast<unsigned __int64>(iRight);

	mov	eax, DWORD PTR _iLeft$[ebp]
	mul	DWORD PTR _iRight$[ebp]

; 137  : 	if(i64Result>UINT_MAX)

	test	edx, edx
	jne	SHORT $LN8@AtlMultipl
	cmp	eax, -1
	ja	SHORT $LN8@AtlMultipl

; 140  : 	}
; 141  : 	*piResult=static_cast<unsigned int>(i64Result);

	mov	ecx, DWORD PTR _piResult$[ebp]
	mov	DWORD PTR [ecx], eax

; 142  : 	return S_OK;

	xor	eax, eax

; 143  : }

	pop	ebp
	ret	0
$LN8@AtlMultipl:

; 138  : 	{
; 139  : 		return HRESULT_FROM_WIN32(ERROR_ARITHMETIC_OVERFLOW);

	mov	eax, -2147024362			; 80070216H

; 143  : }

	pop	ebp
	ret	0
??$AtlMultiply@I@ATL@@YAJPAIII@Z ENDP			; ATL::AtlMultiply<unsigned int>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
?SK_IsHostAppSKIM@@YA_NXZ PROC				; SK_IsHostAppSKIM

; 2192 :   return (StrStrIW (SK_GetHostApp (), L"SKIM") != nullptr);

	push	OFFSET $SG298974
	call	?SK_GetHostApp@@YAPB_WXZ		; SK_GetHostApp
	push	eax
	call	DWORD PTR __imp__StrStrIW@8
	neg	eax
	sbb	eax, eax
	neg	eax

; 2193 : }

	ret	0
?SK_IsHostAppSKIM@@YA_NXZ ENDP				; SK_IsHostAppSKIM
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_info$ = -16						; size = 16
_crc32c_hw_available PROC

; 986  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
	push	esi
	push	edi

; 987  :   int info [4];
; 988  :   __cpuid (info, 1);

	mov	eax, 1
	lea	edi, DWORD PTR _info$[ebp]
	xor	ecx, ecx
	push	ebx
	cpuid
	mov	esi, ebx
	pop	ebx
	mov	DWORD PTR [edi], eax
	mov	DWORD PTR [edi+4], esi
	mov	DWORD PTR [edi+8], ecx
	mov	DWORD PTR [edi+12], edx

; 989  :   return (info [2] & (1 << 20)) != 0;

	mov	eax, DWORD PTR _info$[ebp+8]
	pop	edi
	shr	eax, 20					; 00000014H
	pop	esi
	and	eax, 1
	pop	ebx

; 990  : 
; 991  : }

	mov	esp, ebp
	pop	ebp
	ret	0
_crc32c_hw_available ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
tv472 = 8						; size = 4
_crc$ = 8						; size = 4
tv483 = 12						; size = 4
tv481 = 12						; size = 4
_buf$ = 12						; size = 4
_len$ = 16						; size = 4
_crc32c_append_hw PROC

; 830  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 831  :   auto next =
; 832  :     static_cast <buffer> (buf);

	mov	ecx, DWORD PTR _buf$[ebp]
	xor	edx, edx

; 833  : 
; 834  :   buffer end;
; 835  : #ifdef _M_X64
; 836  :   uint64_t crc0, crc1, crc2;      /* need to be 64 bits for crc32q */
; 837  : #else
; 838  :   uint32_t crc0, crc1, crc2;
; 839  : #endif
; 840  : 
; 841  :   /* pre-process the crc */
; 842  :   crc0 = crc ^ 0xffffffff;

	mov	edx, DWORD PTR _crc$[ebp]
	push	ebx

; 843  : 
; 844  :   /* compute the crc for up to seven leading bytes to bring the data pointer
; 845  :      to an eight-byte boundary */
; 846  :   while (len && (reinterpret_cast <uintptr_t> (next) & 7) != 0)

	mov	ebx, DWORD PTR _len$[ebp]
	not	edx
	mov	DWORD PTR _crc$[ebp], edx
	push	esi
	push	edi
	test	ebx, ebx
	je	SHORT $LN28@crc32c_app
	npad	4
$LL2@crc32c_app:
	test	cl, 7
	je	SHORT $LN55@crc32c_app

; 847  :   {
; 848  :     crc0 = _mm_crc32_u8 (static_cast <uint32_t> (crc0), *next);

	crc32	edx, BYTE PTR [ecx]

; 849  :     ++next;

	inc	ecx

; 850  :     --len;

	sub	ebx, 1
	jne	SHORT $LL2@crc32c_app
$LN55@crc32c_app:
	mov	DWORD PTR _len$[ebp], ebx
	mov	DWORD PTR _crc$[ebp], edx
$LN28@crc32c_app:

; 851  :   }
; 852  : 
; 853  : #ifdef _M_X64
; 854  :   /* compute the crc on sets of LONG_SHIFT*3 bytes, executing three independent crc
; 855  :      instructions, each on LONG_SHIFT bytes -- this is optimized for the Nehalem,
; 856  :      Westmere, Sandy Bridge, and Ivy Bridge architectures, which have a
; 857  :      throughput of one crc per cycle, but a latency of three cycles */
; 858  :   while (len >= 3 * LONG_SHIFT)
; 859  :   {
; 860  :     crc1 = 0;
; 861  :     crc2 = 0;
; 862  :     end  = next + LONG_SHIFT;
; 863  : 
; 864  :     do
; 865  :     {
; 866  :       crc0 = _mm_crc32_u64 (crc0, *reinterpret_cast <const uint64_t *>(next));
; 867  :       crc1 = _mm_crc32_u64 (crc1, *reinterpret_cast <const uint64_t *>(next     + LONG_SHIFT));
; 868  :       crc2 = _mm_crc32_u64 (crc2, *reinterpret_cast <const uint64_t *>(next + 2 * LONG_SHIFT));
; 869  :       next += 8;
; 870  :     } while (next < end);
; 871  : 
; 872  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;
; 873  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc2;
; 874  : 
; 875  :     next += 2 * LONG_SHIFT;
; 876  :     len  -= 3 * LONG_SHIFT;
; 877  :   }
; 878  : 
; 879  :   /* do the same thing, but now on SHORT_SHIFT*3 blocks for the remaining data less
; 880  :      than a LONG_SHIFT*3 block */
; 881  :   while (len >= 3 * SHORT_SHIFT)
; 882  :   {
; 883  :     crc1 = 0;
; 884  :     crc2 = 0;
; 885  :     end  = next + SHORT_SHIFT;
; 886  : 
; 887  :     do
; 888  :     {
; 889  :       crc0 = _mm_crc32_u64 (crc0, *reinterpret_cast <const uint64_t *>(next));
; 890  :       crc1 = _mm_crc32_u64 (crc1, *reinterpret_cast <const uint64_t *>(next     + SHORT_SHIFT));
; 891  :       crc2 = _mm_crc32_u64 (crc2, *reinterpret_cast <const uint64_t *>(next + 2 * SHORT_SHIFT));
; 892  :       next += 8;
; 893  :     } while (next < end);
; 894  : 
; 895  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;
; 896  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc2;
; 897  : 
; 898  :     next += 2 * SHORT_SHIFT;
; 899  :     len  -= 3 * SHORT_SHIFT;
; 900  :   }
; 901  : 
; 902  :   /* compute the crc on the remaining eight-byte units less than a SHORT_SHIFT*3
; 903  :   block */
; 904  :   end = next + (len - (len & 7));
; 905  :   while (next < end)
; 906  :   {
; 907  :     crc0 = _mm_crc32_u64 (crc0, *reinterpret_cast <const uint64_t *> (next));
; 908  :     next += 8;
; 909  :   }
; 910  : #else
; 911  :   /* compute the crc on sets of LONG_SHIFT*3 bytes, executing three independent crc
; 912  :   instructions, each on LONG_SHIFT bytes -- this is optimized for the Nehalem,
; 913  :   Westmere, Sandy Bridge, and Ivy Bridge architectures, which have a
; 914  :   throughput of one crc per cycle, but a latency of three cycles */
; 915  :   while (len >= 3 * LONG_SHIFT)

	cmp	ebx, 24576				; 00006000H
	jb	$LN30@crc32c_app
	mov	eax, -1431655765			; aaaaaaabH
	mul	ebx
	shr	edx, 14					; 0000000eH
	mov	DWORD PTR tv481[ebp], edx
	mov	edx, DWORD PTR _crc$[ebp]
$LL4@crc32c_app:

; 916  :   {
; 917  :     crc1 = 0;

	xor	esi, esi

; 918  :     crc2 = 0;
; 919  :     end  = next + LONG_SHIFT;

	lea	eax, DWORD PTR [ecx+8192]
	xor	edi, edi
	npad	4
$LL8@crc32c_app:

; 920  : 
; 921  :     do
; 922  :     {
; 923  :       crc0 = _mm_crc32_u32 (crc0, *reinterpret_cast <const uint32_t *>(next));

	crc32	edx, DWORD PTR [ecx]

; 924  :       crc1 = _mm_crc32_u32 (crc1, *reinterpret_cast <const uint32_t *>(next     + LONG_SHIFT));

	crc32	esi, DWORD PTR [ecx+8192]

; 925  :       crc2 = _mm_crc32_u32 (crc2, *reinterpret_cast <const uint32_t *>(next + 2 * LONG_SHIFT));

	crc32	edi, DWORD PTR [ecx+16384]

; 926  :       next += 4;

	add	ecx, 4

; 927  :     } while (next < end);

	cmp	ecx, eax
	jb	SHORT $LL8@crc32c_app

; 928  : 
; 929  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	mov	eax, edx
	mov	DWORD PTR _crc$[ebp], edx
	shr	eax, 16					; 00000010H

; 931  : 
; 932  :     next += 2 * LONG_SHIFT;

	add	ecx, 16384				; 00004000H

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	edx, al

; 928  : 
; 929  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	mov	eax, DWORD PTR _crc$[ebp]
	shr	eax, 8

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, al

; 928  : 
; 929  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	mov	ebx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[edx*4+2048]

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	edx, DWORD PTR _crc$[ebp]

; 928  : 
; 929  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	xor	ebx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[eax*4+1024]

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	eax, edx
	shr	eax, 24					; 00000018H

; 928  : 
; 929  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	xor	ebx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[eax*4+3072]

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, dl

; 928  : 
; 929  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	xor	ebx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[eax*4]
	xor	ebx, esi

; 930  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	mov	eax, ebx
	shr	eax, 16					; 00000010H

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	edx, al

; 930  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	mov	eax, ebx
	shr	eax, 8

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, al

; 930  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	mov	edx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[edx*4+2048]
	xor	edx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[eax*4+1024]

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	eax, ebx
	shr	eax, 24					; 00000018H

; 930  :     crc0 = shift_crc (long_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	xor	edx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[eax*4+3072]

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, bl

; 933  :     len  -= 3 * LONG_SHIFT;

	mov	ebx, DWORD PTR _len$[ebp]
	sub	ebx, 24576				; 00006000H
	mov	DWORD PTR _len$[ebp], ebx
	xor	edx, DWORD PTR ?long_shifts@@3PAY0BAA@IA[eax*4]
	xor	edx, edi
	sub	DWORD PTR tv481[ebp], 1
	mov	DWORD PTR _crc$[ebp], edx
	jne	$LL4@crc32c_app
$LN30@crc32c_app:

; 934  :   }
; 935  : 
; 936  :   /* do the same thing, but now on SHORT_SHIFT*3 blocks for the remaining data less
; 937  :   than a LONG_SHIFT*3 block */
; 938  :   while (len >= 3 * SHORT_SHIFT)

	cmp	ebx, 768				; 00000300H
	jb	$LN10@crc32c_app
	mov	eax, -1431655765			; aaaaaaabH
	mul	ebx
	shr	edx, 9
	mov	DWORD PTR tv483[ebp], edx
	mov	edx, DWORD PTR _crc$[ebp]
	npad	4
$LL9@crc32c_app:

; 939  :   {
; 940  :     crc1 = 0;

	xor	esi, esi

; 941  :     crc2 = 0;
; 942  :     end  = next + SHORT_SHIFT;

	lea	eax, DWORD PTR [ecx+256]
	xor	edi, edi
	npad	6
$LL13@crc32c_app:

; 943  : 
; 944  :     do
; 945  :     {
; 946  :       crc0 = _mm_crc32_u32 (crc0, *reinterpret_cast <const uint32_t *>(next));

	crc32	edx, DWORD PTR [ecx]

; 947  :       crc1 = _mm_crc32_u32 (crc1, *reinterpret_cast <const uint32_t *>(next     + SHORT_SHIFT));

	crc32	esi, DWORD PTR [ecx+256]

; 948  :       crc2 = _mm_crc32_u32 (crc2, *reinterpret_cast <const uint32_t *>(next + 2 * SHORT_SHIFT));

	crc32	edi, DWORD PTR [ecx+512]

; 949  :       next += 4;

	add	ecx, 4

; 950  :     } while (next < end);

	cmp	ecx, eax
	jb	SHORT $LL13@crc32c_app

; 951  : 
; 952  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	mov	eax, edx
	mov	DWORD PTR _crc$[ebp], edx
	shr	eax, 16					; 00000010H

; 954  : 
; 955  :     next += 2 * SHORT_SHIFT;

	add	ecx, 512				; 00000200H

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	edx, al

; 951  : 
; 952  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	mov	eax, DWORD PTR _crc$[ebp]
	shr	eax, 8

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, al

; 951  : 
; 952  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	mov	ebx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[edx*4+2048]

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	edx, DWORD PTR _crc$[ebp]

; 951  : 
; 952  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	xor	ebx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[eax*4+1024]

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	eax, edx
	shr	eax, 24					; 00000018H

; 951  : 
; 952  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	xor	ebx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[eax*4+3072]

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, dl

; 951  : 
; 952  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc1;

	xor	ebx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[eax*4]
	xor	ebx, esi

; 953  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	mov	eax, ebx
	shr	eax, 16					; 00000010H

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	edx, al

; 953  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	mov	eax, ebx
	shr	eax, 8

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, al

; 953  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	mov	edx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[edx*4+2048]
	xor	edx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[eax*4+1024]

; 819  :   return shift_table [0][ crc        & 0xff]

	mov	eax, ebx
	shr	eax, 24					; 00000018H

; 953  :     crc0 = shift_crc (short_shifts, static_cast <uint32_t> (crc0)) ^ crc2;

	xor	edx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[eax*4+3072]

; 819  :   return shift_table [0][ crc        & 0xff]

	movzx	eax, bl

; 956  :     len  -= 3 * SHORT_SHIFT;

	mov	ebx, DWORD PTR _len$[ebp]
	sub	ebx, 768				; 00000300H
	mov	DWORD PTR _len$[ebp], ebx
	xor	edx, DWORD PTR ?short_shifts@@3PAY0BAA@IA[eax*4]
	xor	edx, edi
	sub	DWORD PTR tv483[ebp], 1
	jne	$LL9@crc32c_app
$LN10@crc32c_app:

; 957  :   }
; 958  : 
; 959  :   /* compute the crc on the remaining eight-byte units less than a SHORT_SHIFT*3
; 960  :   block */
; 961  :   end = next + (len - (len & 7));

	mov	esi, ebx
	mov	eax, ecx
	and	esi, 7
	xor	edi, edi
	sub	eax, esi
	add	eax, ebx
	mov	ebx, eax
	sub	ebx, ecx
	add	ebx, 3
	shr	ebx, 2
	cmp	ecx, eax
	cmova	ebx, edi

; 962  :   while (next < end)

	test	ebx, ebx
	je	SHORT $LN15@crc32c_app
	npad	3
$LL14@crc32c_app:

; 963  :   {
; 964  :     crc0 = _mm_crc32_u32(crc0, *reinterpret_cast<const uint32_t *>(next));

	crc32	edx, DWORD PTR [ecx]

; 965  :     next += 4;

	inc	edi
	add	ecx, 4
	cmp	edi, ebx
	jb	SHORT $LL14@crc32c_app
$LN15@crc32c_app:

; 966  :   }
; 967  : #endif
; 968  :   len &= 7;
; 969  : 
; 970  :   /* compute the crc for up to seven trailing bytes */
; 971  :   while (len)

	test	esi, esi
	je	SHORT $LN17@crc32c_app
$LL16@crc32c_app:

; 972  :   {
; 973  :     crc0 = _mm_crc32_u8 (static_cast <uint32_t> (crc0), *next);
; 974  :     ++next;

	lea	ecx, DWORD PTR [ecx+1]
	crc32	edx, BYTE PTR [ecx-1]

; 975  :     --len;

	sub	esi, 1
	jne	SHORT $LL16@crc32c_app
$LN17@crc32c_app:
	pop	edi

; 976  :   }
; 977  : 
; 978  :   /* return a post-processed crc */
; 979  :   return static_cast <uint32_t> (crc0) ^ 0xffffffff;

	not	edx
	pop	esi
	mov	eax, edx
	pop	ebx

; 980  : }

	pop	ebp
	ret	0
_crc32c_append_hw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
tv430 = 8						; size = 4
_crci$ = 8						; size = 4
_input$ = 12						; size = 4
_length$ = 16						; size = 4
_crc32c_append_sw PROC

; 734  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 735  :   auto next =
; 736  :     static_cast <buffer> (input);
; 737  : 
; 738  : #ifdef _M_X64
; 739  :   uint64_t crc;
; 740  : #else
; 741  :   uint32_t crc;
; 742  : #endif
; 743  : 
; 744  :   crc = crci ^ 0xffffffff;

	mov	ecx, DWORD PTR _crci$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _input$[ebp]
	not	ecx
	push	edi

; 745  : #ifdef _M_X64
; 746  :   while (length && ((uintptr_t)next & 7) != 0)
; 747  :   {
; 748  :     crc = table [0][(crc ^ *next++) & 0xff] ^ (crc >> 8);
; 749  :     --length;
; 750  :   }
; 751  :   while (length >= 16)
; 752  :   {
; 753  :              crc ^= *(uint64_t *)next;
; 754  :     uint64_t high = *(uint64_t *)(next + 8);
; 755  : 
; 756  :     crc = table[15][ crc         & 0xff]
; 757  :         ^ table[14][(crc >> 8)   & 0xff]
; 758  :         ^ table[13][(crc >> 16)  & 0xff]
; 759  :         ^ table[12][(crc >> 24)  & 0xff]
; 760  :         ^ table[11][(crc >> 32)  & 0xff]
; 761  :         ^ table[10][(crc >> 40)  & 0xff]
; 762  :         ^ table[ 9][(crc >> 48)  & 0xff]
; 763  :         ^ table[ 8][ crc >> 56         ]
; 764  :         ^ table[ 7][ high        & 0xff]
; 765  :         ^ table[ 6][(high >> 8)  & 0xff]
; 766  :         ^ table[ 5][(high >> 16) & 0xff]
; 767  :         ^ table[ 4][(high >> 24) & 0xff]
; 768  :         ^ table[ 3][(high >> 32) & 0xff]
; 769  :         ^ table[ 2][(high >> 40) & 0xff]
; 770  :         ^ table[ 1][(high >> 48) & 0xff]
; 771  :         ^ table[ 0][ high >> 56        ];
; 772  : 
; 773  :     next   += 16;
; 774  :     length -= 16;
; 775  :   }
; 776  : #else
; 777  :   while (length && ((uintptr_t)next & 3) != 0)

	mov	edi, DWORD PTR _length$[ebp]
	test	edi, edi
	je	SHORT $LN10@crc32c_app
$LL2@crc32c_app:
	test	bl, 3
	je	SHORT $LN21@crc32c_app

; 778  :   {
; 779  :       crc = table[0][(crc ^ *next++) & 0xff] ^ (crc >> 8);

	movzx	eax, BYTE PTR [ebx]
	inc	ebx
	xor	eax, ecx
	shr	ecx, 8
	movzx	eax, al
	xor	ecx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4]

; 780  :       --length;

	sub	edi, 1
	jne	SHORT $LL2@crc32c_app
$LN21@crc32c_app:
	mov	DWORD PTR _input$[ebp], ebx
$LN10@crc32c_app:

; 781  :   }
; 782  :   while (length >= 12)

	cmp	edi, 12					; 0000000cH
	jb	$LN11@crc32c_app
	mov	eax, -1431655765			; aaaaaaabH
	mul	edi
	push	esi
	shr	edx, 3
	mov	DWORD PTR tv430[ebp], edx
	npad	3
$LL4@crc32c_app:

; 783  :   {
; 784  :               crc ^= *(uint32_t *)next;

	xor	ecx, DWORD PTR [ebx]

; 785  :     uint32_t high  = *(uint32_t *)(next + 4);
; 786  :     uint32_t high2 = *(uint32_t *)(next + 8);
; 787  : 
; 788  :     crc = table[11][ crc          & 0xff]
; 789  :         ^ table[10][(crc >>  8)   & 0xff]
; 790  :         ^ table[ 9][(crc >> 16)   & 0xff]
; 791  :         ^ table[ 8][ crc >> 24          ]
; 792  :         ^ table[ 7][ high         & 0xff]
; 793  :         ^ table[ 6][(high >>  8)  & 0xff]
; 794  :         ^ table[ 5][(high >> 16)  & 0xff]
; 795  :         ^ table[ 4][ high >> 24         ]
; 796  :         ^ table[ 3][ high2        & 0xff]
; 797  :         ^ table[ 2][(high2 >>  8) & 0xff]
; 798  :         ^ table[ 1][(high2 >> 16) & 0xff]
; 799  :         ^ table[ 0][ high2 >> 24        ];
; 800  : 
; 801  :     next   += 12;
; 802  :     length -= 12;

	sub	edi, 12					; 0000000cH
	mov	ebx, DWORD PTR [ebx+8]
	mov	eax, ebx
	shr	eax, 16					; 00000010H
	movzx	edx, al
	mov	eax, ebx
	shr	eax, 8
	movzx	eax, al
	mov	edx, DWORD PTR ?table@@3PAY0BAA@IA[edx*4+1024]
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+2048]
	mov	eax, DWORD PTR _input$[ebp]
	mov	esi, DWORD PTR [eax+4]
	mov	eax, esi
	shr	eax, 16					; 00000010H
	movzx	eax, al
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+5120]
	mov	eax, esi
	shr	eax, 8
	movzx	eax, al
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+6144]
	mov	eax, ecx
	shr	eax, 16					; 00000010H
	movzx	eax, al
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+9216]
	mov	eax, ecx
	shr	eax, 8
	movzx	eax, al
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+10240]
	mov	eax, ebx
	shr	eax, 24					; 00000018H
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4]
	mov	eax, esi
	shr	eax, 24					; 00000018H
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+4096]
	mov	eax, ecx
	shr	eax, 24					; 00000018H
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+8192]
	movzx	eax, bl
	mov	ebx, DWORD PTR _input$[ebp]
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+3072]
	mov	eax, DWORD PTR [ebx+4]
	add	ebx, 12					; 0000000cH
	movzx	eax, al
	mov	DWORD PTR _input$[ebp], ebx
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+7168]
	movzx	eax, cl
	xor	edx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4+11264]
	sub	DWORD PTR tv430[ebp], 1
	mov	ecx, edx
	jne	$LL4@crc32c_app
	pop	esi
$LN11@crc32c_app:

; 803  :   }
; 804  : #endif
; 805  :   while (length)

	test	edi, edi
	je	SHORT $LN7@crc32c_app
$LL6@crc32c_app:

; 806  :   {
; 807  :     crc = table [0][(crc ^ *next++) & 0xff] ^ (crc >> 8);

	movzx	eax, BYTE PTR [ebx]
	lea	ebx, DWORD PTR [ebx+1]
	xor	eax, ecx
	shr	ecx, 8
	movzx	eax, al
	xor	ecx, DWORD PTR ?table@@3PAY0BAA@IA[eax*4]

; 808  :     --length;

	sub	edi, 1
	jne	SHORT $LL6@crc32c_app
$LN7@crc32c_app:

; 809  :   }
; 810  :   return (uint32_t)crc ^ 0xffffffff;

	not	ecx
	pop	edi
	mov	eax, ecx
	pop	ebx

; 811  : }

	pop	ebp
	ret	0
_crc32c_append_sw ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
___crc32_init PROC

; 1070 :   // somebody can call sw version directly, so, precalculate table for this version
; 1071 :   calculate_table ();

	call	_calculate_table

; 1072 : 
; 1073 :   if (crc32c_hw_available ())

	call	_crc32c_hw_available
	test	eax, eax
	je	SHORT $LN2@crc32_init

; 1074 :   {
; 1075 :     //dll_log.Log (L"[ Checksum ] Using Hardware (SSE 4.2) CRC32C Algorithm");
; 1076 :     calculate_table_hw ();

	call	_calculate_table_hw

; 1077 :     append_func = crc32c_append_hw;

	mov	DWORD PTR ?append_func@@3P6AIIPBXI@ZA, OFFSET _crc32c_append_hw

; 1083 :   }
; 1084 : }

	ret	0
$LN2@crc32_init:

; 1078 :   }
; 1079 : 
; 1080 :   else {
; 1081 :     //dll_log.Log (L"[ Checksum ] Using Software (Adler Optimized) CRC32C Algorithm");
; 1082 :     append_func = crc32c_append_sw;

	mov	DWORD PTR ?append_func@@3P6AIIPBXI@ZA, OFFSET _crc32c_append_sw

; 1083 :   }
; 1084 : }

	ret	0
___crc32_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_crc$ = 8						; size = 4
_input$ = 12						; size = 4
_length$ = 16						; size = 4
_crc32c	PROC

; 1090 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1091 :   if (append_func == nullptr)

	mov	eax, DWORD PTR ?append_func@@3P6AIIPBXI@ZA
	test	eax, eax
	jne	SHORT $LN2@crc32c

; 1092 :     __crc32_init ();

	call	___crc32_init
	mov	eax, DWORD PTR ?append_func@@3P6AIIPBXI@ZA
$LN2@crc32c:

; 1093 : 
; 1094 :   if (input != nullptr && length > 0 && append_func != nullptr)

	mov	ecx, DWORD PTR _input$[ebp]
	test	ecx, ecx
	je	SHORT $LN3@crc32c
	mov	edx, DWORD PTR _length$[ebp]
	test	edx, edx
	je	SHORT $LN3@crc32c
	test	eax, eax
	je	SHORT $LN3@crc32c

; 1095 :     return append_func (crc, input, length);

	mov	DWORD PTR _length$[ebp], edx
	mov	DWORD PTR _input$[ebp], ecx

; 1098 : }

	pop	ebp

; 1095 :     return append_func (crc, input, length);

	jmp	eax
$LN3@crc32c:

; 1096 : 
; 1097 :   return crc;

	mov	eax, DWORD PTR _crc$[ebp]

; 1098 : }

	pop	ebp
	ret	0
_crc32c	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_crc$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_crc32	PROC

; 667  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 668  :   const auto *p =
; 669  :        reinterpret_cast <const uint8_t *> (buf);
; 670  : 
; 671  :   crc = crc ^ ~0U;

	mov	eax, DWORD PTR _crc$[ebp]

; 672  : 
; 673  :   while (size--)

	mov	edx, DWORD PTR _size$[ebp]
	not	eax
	push	esi
	mov	esi, DWORD PTR _buf$[ebp]
	test	edx, edx
	je	SHORT $LN6@crc32
$LL2@crc32:

; 674  :   {
; 675  :     crc =

	movzx	ecx, BYTE PTR [esi]
	lea	esi, DWORD PTR [esi+1]
	xor	ecx, eax
	shr	eax, 8
	movzx	ecx, cl
	xor	eax, DWORD PTR ?crc32_tab@@3PAIA[ecx*4]
	sub	edx, 1
	jne	SHORT $LL2@crc32
$LN6@crc32:

; 676  :       crc32_tab [ (crc ^ *p++) & 0xFF ] ^ (crc >> 8);
; 677  :   }
; 678  : 
; 679  :   return crc ^ ~0U;

	not	eax
	pop	esi

; 680  : }

	pop	ebp
	ret	0
_crc32	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_dwOld$2 = -28						; size = 4
__$SEHRec$ = -24					; size = 24
_base_addr$ = 8						; size = 4
_new_data$ = 12						; size = 4
_data_size$ = 16					; size = 4
_permissions$ = 20					; size = 4
_old_data$ = 24						; size = 4
?SK_InjectMemory@@YGHPAX0IK0@Z PROC			; SK_InjectMemory

; 1908 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	OFFSET __sehtable$?SK_InjectMemory@@YGHPAX0IK0@Z
	push	OFFSET __except_handler3
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$SEHRec$[ebp], esp

; 1909 :   __try {

	mov	DWORD PTR __$SEHRec$[ebp+20], 0

; 1910 :     DWORD dwOld =
; 1911 :       PAGE_NOACCESS;

	mov	DWORD PTR _dwOld$2[ebp], 1

; 1912 : 
; 1913 :     if ( VirtualProtect ( base_addr,   data_size,

	lea	eax, DWORD PTR _dwOld$2[ebp]
	push	eax
	push	DWORD PTR _permissions$[ebp]
	mov	esi, DWORD PTR _data_size$[ebp]
	push	esi
	mov	edi, DWORD PTR _base_addr$[ebp]
	push	edi
	call	DWORD PTR __imp__VirtualProtect@16
	test	eax, eax
	je	SHORT $LN3@SK_InjectM

; 1914 :                           permissions, &dwOld )   )
; 1915 :     {
; 1916 :       if (old_data != nullptr) memcpy (old_data, base_addr, data_size);

	mov	eax, DWORD PTR _old_data$[ebp]
	test	eax, eax
	je	SHORT $LN4@SK_InjectM
	push	esi
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN4@SK_InjectM:

; 1917 :                                memcpy (base_addr, new_data, data_size);

	push	esi
	push	DWORD PTR _new_data$[ebp]
	push	edi
	call	_memcpy
	add	esp, 12					; 0000000cH

; 1918 : 
; 1919 :       VirtualProtect ( base_addr, data_size,

	lea	eax, DWORD PTR _dwOld$2[ebp]
	push	eax
	push	DWORD PTR _dwOld$2[ebp]
	push	esi
	push	edi
	call	DWORD PTR __imp__VirtualProtect@16

; 1920 :                        dwOld,     &dwOld );
; 1921 : 
; 1922 :       return TRUE;

	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	mov	eax, 1

; 1937 :   }
; 1938 : 
; 1939 :   return FALSE;
; 1940 : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN7@SK_InjectM:
$LN12@SK_InjectM:

; 1923 :     }
; 1924 :   }
; 1925 : 
; 1926 :   __except ( ( GetExceptionCode () == EXCEPTION_ACCESS_VIOLATION ) ? 

	mov	eax, DWORD PTR __$SEHRec$[ebp+4]
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1073741819		; c0000005H
	sete	cl
	mov	eax, ecx
$LN11@SK_InjectM:
$LN9@SK_InjectM:
	ret	0
$LN8@SK_InjectM:
	mov	esp, DWORD PTR __$SEHRec$[ebp]
$LN3@SK_InjectM:

; 1927 :                EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH )
; 1928 :   {
; 1929 :     //assert (false);
; 1930 : 
; 1931 :     // Bad memory address, just discard the write attempt
; 1932 :     //
; 1933 :     //   This isn't atomic; if we fail, it's possible we wrote part
; 1934 :     //     of the data successfully - consider an undo mechanism.
; 1935 :     //
; 1936 :     return FALSE;

	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	xor	eax, eax

; 1937 :   }
; 1938 : 
; 1939 :   return FALSE;
; 1940 : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SK_InjectMemory@@YGHPAX0IK0@Z ENDP			; SK_InjectMemory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_minfo$ = -36						; size = 28
_base_addr$2$ = -8					; size = 4
_end_addr$1$ = -4					; size = 4
_pattern$ = 8						; size = 4
_len$ = 12						; size = 4
_mask$ = 16						; size = 4
_next_rgn$1$ = 20					; size = 4
_after$ = 20						; size = 4
_align$ = 24						; size = 4
?SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z PROC		; SK_ScanAlignedEx

; 1720 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi

; 1721 :   uint8_t* base_addr =
; 1722 :     reinterpret_cast <uint8_t *> (GetModuleHandle (nullptr));

	push	0
	call	DWORD PTR __imp__GetModuleHandleW@4

; 1723 : 
; 1724 :   MEMORY_BASIC_INFORMATION minfo;
; 1725 :   VirtualQuery (base_addr, &minfo, sizeof minfo);

	push	28					; 0000001cH
	lea	ecx, DWORD PTR _minfo$[ebp]
	push	ecx
	push	eax
	call	DWORD PTR __imp__VirtualQuery@12

; 1726 : 
; 1727 :   //
; 1728 :   // VMProtect kills this, so let's do something else...
; 1729 :   //
; 1730 : #ifdef VMPROTECT_IS_NOT_A_FACTOR
; 1731 :   IMAGE_DOS_HEADER* pDOS =
; 1732 :     (IMAGE_DOS_HEADER *)minfo.AllocationBase;
; 1733 :   IMAGE_NT_HEADERS* pNT  =
; 1734 :     (IMAGE_NT_HEADERS *)((uintptr_t)(pDOS + pDOS->e_lfanew));
; 1735 : 
; 1736 :   uint8_t* end_addr = base_addr + pNT->OptionalHeader.SizeOfImage;
; 1737 : #else
; 1738 :            base_addr = static_cast <uint8_t *> (minfo.BaseAddress);//AllocationBase;

	mov	edi, DWORD PTR _minfo$[ebp]

; 1739 :   uint8_t* end_addr  = static_cast <uint8_t *> (minfo.BaseAddress) + minfo.RegionSize;
; 1740 : 
; 1741 :   ///if (base_addr != (uint8_t *)0x400000)
; 1742 :   ///{
; 1743 :   ///  static bool warned = false;
; 1744 :   ///  if (! warned)
; 1745 :   ///  {
; 1746 :   ///    dll_log.Log ( L"[ Sig Scan ] Expected module base addr. 40000h, but got: %ph",
; 1747 :   ///                    base_addr );
; 1748 :   ///    warned = true;
; 1749 :   ///  }
; 1750 :   ///}
; 1751 : 
; 1752 :   size_t pages = 0;
; 1753 : 
; 1754 : #ifndef _WIN64
; 1755 :   // Account for possible overflow in 32-bit address space in very rare (address randomization) cases
; 1756 : uint8_t* const PAGE_WALK_LIMIT = 
; 1757 :   base_addr + static_cast <uintptr_t>(1UL << 27) > base_addr ?

	or	esi, -1
	mov	ebx, DWORD PTR _minfo$[ebp+12]
	add	ebx, edi
	mov	DWORD PTR _base_addr$2$[ebp], edi

; 1758 :                                                    base_addr + static_cast      <uintptr_t>( 1UL << 27) :
; 1759 :                                                                reinterpret_cast <uint8_t *>(~0UL      );
; 1760 : #else
; 1761 :   // Dark Souls 3 needs this, its address space is completely random to the point
; 1762 :   //   where it may be occupying a range well in excess of 36 bits. Probably a stupid
; 1763 :   //     anti-cheat attempt.
; 1764 : uint8_t* const PAGE_WALK_LIMIT = (base_addr + static_cast <uintptr_t>(1ULL << 36));
; 1765 : #endif
; 1766 : 
; 1767 :   //
; 1768 :   // For practical purposes, let's just assume that all valid games have less than 256 MiB of
; 1769 :   //   committed executable image data.
; 1770 :   //
; 1771 :   while (VirtualQuery (end_addr, &minfo, sizeof minfo) && end_addr < PAGE_WALK_LIMIT)

	push	28					; 0000001cH
	lea	eax, DWORD PTR [edi+134217728]
	mov	DWORD PTR _end_addr$1$[ebp], ebx
	cmp	eax, edi
	cmova	esi, eax
	lea	eax, DWORD PTR _minfo$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR __imp__VirtualQuery@12
	test	eax, eax
	je	SHORT $LN34@SK_ScanAli
	npad	3
$LL2@SK_ScanAli:
	cmp	ebx, esi
	jae	SHORT $LN52@SK_ScanAli

; 1772 :   {
; 1773 :     if (minfo.Protect & PAGE_NOACCESS || (! (minfo.Type & MEM_IMAGE)))

	test	BYTE PTR _minfo$[ebp+20], 1
	jne	SHORT $LN52@SK_ScanAli
	test	DWORD PTR _minfo$[ebp+24], 16777216	; 01000000H
	je	SHORT $LN52@SK_ScanAli

; 1774 :       break;
; 1775 : 
; 1776 :     pages += VirtualQuery (end_addr, &minfo, sizeof minfo);

	push	28					; 0000001cH
	lea	eax, DWORD PTR _minfo$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR __imp__VirtualQuery@12

; 1777 : 
; 1778 :     end_addr =

	mov	ebx, DWORD PTR _minfo$[ebp+12]
	lea	eax, DWORD PTR _minfo$[ebp]
	add	ebx, DWORD PTR _minfo$[ebp]
	push	28					; 0000001cH
	push	eax
	push	ebx
	call	DWORD PTR __imp__VirtualQuery@12
	test	eax, eax
	jne	SHORT $LL2@SK_ScanAli
$LN52@SK_ScanAli:
	mov	DWORD PTR _end_addr$1$[ebp], ebx
$LN34@SK_ScanAli:

; 1779 :       static_cast <uint8_t *> (minfo.BaseAddress) + minfo.RegionSize;
; 1780 :   } 
; 1781 : 
; 1782 :   if (end_addr > PAGE_WALK_LIMIT)

	cmp	ebx, esi
	jbe	SHORT $LN10@SK_ScanAli

; 1783 :   {
; 1784 :     static bool warned = false;
; 1785 : 
; 1786 :     if (! warned)

	cmp	BYTE PTR ?warned@?8??SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z@4_NA, 0
	jne	SHORT $LN11@SK_ScanAli

; 1787 :     {
; 1788 :       dll_log.Log ( L"[ Sig Scan ] Module page walk resulted in end addr. out-of-range: %ph",

	push	ebx
	push	OFFSET $SG298781
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log

; 1789 :                       end_addr );
; 1790 :       dll_log.Log ( L"[ Sig Scan ]  >> Restricting to %ph",

	push	esi
	push	OFFSET $SG298782
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log
	add	esp, 24					; 00000018H

; 1791 :                       PAGE_WALK_LIMIT );
; 1792 :       warned = true;

	mov	BYTE PTR ?warned@?8??SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z@4_NA, 1
$LN11@SK_ScanAli:

; 1793 :     }
; 1794 : 
; 1795 :     end_addr =

	mov	ebx, esi
	mov	DWORD PTR _end_addr$1$[ebp], ebx
$LN10@SK_ScanAli:

; 1796 :       static_cast <uint8_t *> (PAGE_WALK_LIMIT);
; 1797 :   }
; 1798 : 
; 1799 : #if 0
; 1800 :   dll_log->Log ( L"[ Sig Scan ] Module image consists of %zu pages, from %ph to %ph",
; 1801 :                   pages,
; 1802 :                     base_addr,
; 1803 :                       end_addr );
; 1804 : #endif
; 1805 : #endif
; 1806 : 
; 1807 :   __SK_base_img_addr = base_addr;

	mov	DWORD PTR ?__SK_base_img_addr@@3PAXA, edi ; __SK_base_img_addr

; 1809 : 
; 1810 :   uint8_t* begin = std::max (static_cast <uint8_t *> (after) + align, base_addr);

	mov	edi, DWORD PTR _after$[ebp]
	add	edi, DWORD PTR _align$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 3743 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	cmp	edi, DWORD PTR _base_addr$2$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1808 :   __SK_end_img_addr  = end_addr;

	mov	DWORD PTR ?__SK_end_img_addr@@3PAXA, ebx ; __SK_end_img_addr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 3743 : 	return (_DEBUG_LT(_Left, _Right) ? _Right : _Left);

	cmovb	edi, DWORD PTR _base_addr$2$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1812 :   size_t   idx   = 0;

	xor	ebx, ebx
	mov	esi, edi

; 1813 : 
; 1814 :   while (it < end_addr)

	cmp	edi, DWORD PTR _end_addr$1$[ebp]
	jae	$LN49@SK_ScanAli
	npad	4
$LL4@SK_ScanAli:

; 1815 :   {
; 1816 :     VirtualQuery (it, &minfo, sizeof minfo);

	push	28					; 0000001cH
	lea	eax, DWORD PTR _minfo$[ebp]
	push	eax
	push	esi
	call	DWORD PTR __imp__VirtualQuery@12

; 1817 : 
; 1818 :     // Bail-out once we walk into an address range that is not resident, because
; 1819 :     //   it does not belong to the original executable.
; 1820 :     if (minfo.RegionSize == 0)

	mov	ecx, DWORD PTR _minfo$[ebp+12]
	test	ecx, ecx
	je	$LN49@SK_ScanAli

; 1821 :       break;
; 1822 : 
; 1823 :     uint8_t* next_rgn =
; 1824 :      (uint8_t *)minfo.BaseAddress + minfo.RegionSize;

	mov	eax, DWORD PTR _minfo$[ebp]
	add	eax, ecx

; 1825 : 
; 1826 :     if ( (! (minfo.Type    & MEM_IMAGE))  ||
; 1827 :          (! (minfo.State   & MEM_COMMIT)) ||

	test	DWORD PTR _minfo$[ebp+24], 16777216	; 01000000H
	mov	DWORD PTR _next_rgn$1$[ebp], eax
	je	$LN14@SK_ScanAli
	test	DWORD PTR _minfo$[ebp+16], 4096		; 00001000H
	je	SHORT $LN14@SK_ScanAli
	test	BYTE PTR _minfo$[ebp+20], 1
	jne	SHORT $LN14@SK_ScanAli

; 1833 : 
; 1834 :       continue;
; 1835 :     }
; 1836 : 
; 1837 :     // Do not search past the end of the module image!
; 1838 :     if (next_rgn >= end_addr)

	cmp	eax, DWORD PTR _end_addr$1$[ebp]
	jae	SHORT $LN49@SK_ScanAli

; 1839 :       break;
; 1840 : 
; 1841 :     while (it < next_rgn)

	cmp	esi, eax
	jae	SHORT $LN40@SK_ScanAli
	mov	edx, DWORD PTR _mask$[ebp]
$LL6@SK_ScanAli:

; 1842 :     {
; 1843 :       uint8_t* scan_addr = it;
; 1844 : 
; 1845 :       bool match = (*scan_addr == static_cast <const uint8_t *> (pattern) [idx]);

	mov	ecx, DWORD PTR _pattern$[ebp]
	mov	al, BYTE PTR [esi]
	cmp	al, BYTE PTR [ebx+ecx]

; 1846 : 
; 1847 :       // For portions we do not care about... treat them
; 1848 :       //   as matching.
; 1849 :       if (mask != nullptr && (! static_cast <const uint8_t *> (mask) [idx]))

	mov	ecx, DWORD PTR _end_addr$1$[ebp]
	sete	al
	test	edx, edx
	je	SHORT $LN16@SK_ScanAli
	cmp	BYTE PTR [ebx+edx], 0
	je	SHORT $LN47@SK_ScanAli
$LN16@SK_ScanAli:

; 1850 :         match = true;
; 1851 : 
; 1852 :       if (match)

	test	al, al
	je	SHORT $LN17@SK_ScanAli
$LN47@SK_ScanAli:

; 1853 :       {
; 1854 :         if (++idx == len)

	inc	ebx
	cmp	ebx, DWORD PTR _len$[ebp]
	jne	SHORT $LN19@SK_ScanAli

; 1855 :         {
; 1856 :           if ((reinterpret_cast <uintptr_t> (begin) % align) == 0)

	mov	ecx, DWORD PTR _align$[ebp]
	xor	edx, edx
	mov	eax, edi
	div	ecx
	test	edx, edx
	je	SHORT $LN35@SK_ScanAli

; 1859 :               static_cast <void *> (begin);
; 1860 :           }
; 1861 : 
; 1862 :           else
; 1863 :           {
; 1864 :             begin += idx;

	add	edi, ebx

; 1865 :             begin += align - (reinterpret_cast <uintptr_t> (begin) % align);

	xor	edx, edx
	mov	eax, edi
	div	ecx
	mov	eax, ecx

; 1866 : 
; 1867 :             it     = begin;
; 1868 :             idx    = 0;
; 1869 :           }
; 1870 :         }
; 1871 : 
; 1872 :         else

	jmp	SHORT $LN53@SK_ScanAli
$LN19@SK_ScanAli:

; 1873 :           ++it;

	inc	esi

; 1874 :       }
; 1875 : 
; 1876 :       else

	jmp	SHORT $LN18@SK_ScanAli
$LN17@SK_ScanAli:

; 1877 :       {
; 1878 :         // No match?!
; 1879 :         if (it > end_addr - len)

	mov	eax, ecx
	sub	eax, DWORD PTR _len$[ebp]
	cmp	esi, eax
	ja	SHORT $LN40@SK_ScanAli

; 1880 :           break;
; 1881 : 
; 1882 :         begin += idx;

	add	edi, ebx

; 1883 :         begin += align - (reinterpret_cast <uintptr_t> (begin) % align);

	xor	edx, edx
	mov	eax, edi
	div	DWORD PTR _align$[ebp]
	mov	eax, DWORD PTR _align$[ebp]
$LN53@SK_ScanAli:
	sub	eax, edx
	mov	edx, DWORD PTR _mask$[ebp]
	add	edi, eax

; 1884 : 
; 1885 :         it  = begin;
; 1886 :         idx = 0;

	xor	ebx, ebx
	mov	esi, edi
$LN18@SK_ScanAli:

; 1839 :       break;
; 1840 : 
; 1841 :     while (it < next_rgn)

	cmp	esi, DWORD PTR _next_rgn$1$[ebp]
	jb	SHORT $LL6@SK_ScanAli

; 1887 :       }
; 1888 :     }
; 1889 :   }

	jmp	SHORT $LN40@SK_ScanAli
$LN14@SK_ScanAli:

; 1828 :              minfo.Protect & PAGE_NOACCESS )
; 1829 :     {
; 1830 :       it    = next_rgn;

	mov	esi, eax

; 1831 :       idx   = 0;

	xor	ebx, ebx

; 1832 :       begin = it;

	mov	edi, eax
$LN40@SK_ScanAli:

; 1813 : 
; 1814 :   while (it < end_addr)

	cmp	esi, DWORD PTR _end_addr$1$[ebp]
	jb	$LL4@SK_ScanAli
$LN49@SK_ScanAli:
	pop	edi
	pop	esi

; 1890 : 
; 1891 :   return nullptr;

	xor	eax, eax
	pop	ebx

; 1892 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
$LN35@SK_ScanAli:

; 1857 :           {
; 1858 :             return

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 1892 : }

	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z ENDP		; SK_ScanAlignedEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_pattern$ = 8						; size = 4
_len$ = 12						; size = 4
_mask$ = 16						; size = 4
_align$ = 20						; size = 4
?SK_ScanAligned@@YGPAXPBXI0H@Z PROC			; SK_ScanAligned

; 1897 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1898 :   return SK_ScanAlignedEx (pattern, len, mask, nullptr, align);

	push	DWORD PTR _align$[ebp]
	push	0
	push	DWORD PTR _mask$[ebp]
	push	DWORD PTR _len$[ebp]
	push	DWORD PTR _pattern$[ebp]
	call	?SK_ScanAlignedEx@@YGPAXPBXI0PAXH@Z	; SK_ScanAlignedEx

; 1899 : }

	pop	ebp
	ret	16					; 00000010H
?SK_ScanAligned@@YGPAXPBXI0H@Z ENDP			; SK_ScanAligned
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_pattern$ = 8						; size = 4
_len$ = 12						; size = 4
_mask$ = 16						; size = 4
?SK_Scan@@YGPAXPBXI0@Z PROC				; SK_Scan

; 1713 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1714 :   return SK_ScanAligned (pattern, len, mask);

	push	1
	push	DWORD PTR _mask$[ebp]
	push	DWORD PTR _len$[ebp]
	push	DWORD PTR _pattern$[ebp]
	call	?SK_ScanAligned@@YGPAXPBXI0H@Z		; SK_ScanAligned

; 1715 : }

	pop	ebp
	ret	12					; 0000000cH
?SK_Scan@@YGPAXPBXI0@Z ENDP				; SK_Scan
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_szNum$ = 8						; size = 4
_bufLen$ = 12						; size = 4
?SK_RemoveTrailingDecimalZeros@@YAIPADI@Z PROC		; SK_RemoveTrailingDecimalZeros

; 2158 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 2159 :   // Remove trailing 0's after the .
; 2160 :   size_t len = bufLen == 0 ?

	mov	edx, DWORD PTR _bufLen$[ebp]
	push	esi
	mov	esi, DWORD PTR _szNum$[ebp]
	mov	eax, esi
	test	edx, edx
	jne	SHORT $LN8@SK_RemoveT
	lea	edx, DWORD PTR [eax+1]
$LL18@SK_RemoveT:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL18@SK_RemoveT
	sub	eax, edx
	jmp	SHORT $LN9@SK_RemoveT
$LN8@SK_RemoveT:
	push	edi
	lea	edi, DWORD PTR [eax+1]
$LL19@SK_RemoveT:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL19@SK_RemoveT
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 3779 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	cmp	edx, eax
	pop	edi
	cmovb	eax, edx
$LN9@SK_RemoveT:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2164 :   for (size_t i = (len - 1); i > 1; i--)

	lea	ecx, DWORD PTR [eax-1]
	cmp	ecx, 1
	jbe	SHORT $LN21@SK_RemoveT
	npad	5
$LL4@SK_RemoveT:

; 2165 :   {
; 2166 :     if (szNum [i] == '0' && szNum [i - 1] != '.')

	mov	dl, BYTE PTR [ecx+esi]
	cmp	dl, 48					; 00000030H
	jne	SHORT $LN24@SK_RemoveT
	cmp	BYTE PTR [ecx+esi-1], 46		; 0000002eH
	je	SHORT $LN5@SK_RemoveT

; 2167 :       len--;

	dec	eax
$LN5@SK_RemoveT:

; 2168 : 
; 2169 :     if (szNum [i] != '0' && szNum [i] != '\0')

	cmp	dl, 48					; 00000030H
	je	SHORT $LN2@SK_RemoveT
$LN24@SK_RemoveT:
	test	dl, dl
	jne	SHORT $LN21@SK_RemoveT
$LN2@SK_RemoveT:

; 2164 :   for (size_t i = (len - 1); i > 1; i--)

	dec	ecx
	cmp	ecx, 1
	ja	SHORT $LL4@SK_RemoveT
$LN21@SK_RemoveT:

; 2170 :       break;
; 2171 :   }
; 2172 : 
; 2173 :   szNum [len] = '\0';

	mov	BYTE PTR [eax+esi], 0
	pop	esi

; 2174 : 
; 2175 :   return len;
; 2176 : }

	pop	ebp
	ret	0
?SK_RemoveTrailingDecimalZeros@@YAIPADI@Z ENDP		; SK_RemoveTrailingDecimalZeros
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszNum$ = 8						; size = 4
_bufLen$ = 12						; size = 4
?SK_RemoveTrailingDecimalZeros@@YAIPA_WI@Z PROC		; SK_RemoveTrailingDecimalZeros

; 2138 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 2139 :   // Remove trailing 0's after the .
; 2140 :   size_t len = bufLen == 0 ?

	mov	edx, DWORD PTR _bufLen$[ebp]
	push	esi
	mov	esi, DWORD PTR _wszNum$[ebp]
	mov	eax, esi
	test	edx, edx
	jne	SHORT $LN8@SK_RemoveT
	lea	edx, DWORD PTR [eax+2]
$LL18@SK_RemoveT:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL18@SK_RemoveT
	sub	eax, edx
	sar	eax, 1
	jmp	SHORT $LN9@SK_RemoveT
$LN8@SK_RemoveT:
	push	edi
	lea	edi, DWORD PTR [eax+2]
	npad	6
$LL19@SK_RemoveT:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL19@SK_RemoveT
	sub	eax, edi
	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 3779 : 	return (_DEBUG_LT(_Right, _Left) ? _Right : _Left);

	cmp	edx, eax
	pop	edi
	cmovb	eax, edx
$LN9@SK_RemoveT:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2144 :   for (size_t i = (len - 1); i > 1; i--) {

	lea	ecx, DWORD PTR [eax-1]
	cmp	ecx, 1
	jbe	SHORT $LN20@SK_RemoveT
	npad	3
$LL4@SK_RemoveT:

; 2145 :     if (wszNum [i] == L'0' && wszNum [i - 1] != L'.')

	movzx	edx, WORD PTR [esi+ecx*2]
	cmp	edx, 48					; 00000030H
	jne	SHORT $LN22@SK_RemoveT
	cmp	WORD PTR [esi+ecx*2-2], 46		; 0000002eH
	je	SHORT $LN5@SK_RemoveT

; 2146 :       len--;

	dec	eax
$LN5@SK_RemoveT:

; 2147 :     if (wszNum [i] != L'0' && wszNum [i] != L'\0')

	cmp	edx, 48					; 00000030H
	je	SHORT $LN2@SK_RemoveT
$LN22@SK_RemoveT:
	test	dx, dx
	jne	SHORT $LN20@SK_RemoveT
$LN2@SK_RemoveT:

; 2144 :   for (size_t i = (len - 1); i > 1; i--) {

	dec	ecx
	cmp	ecx, 1
	ja	SHORT $LL4@SK_RemoveT
$LN20@SK_RemoveT:

; 2148 :       break;
; 2149 :   }
; 2150 : 
; 2151 :   wszNum [len] = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [esi+eax*2], cx
	pop	esi

; 2152 : 
; 2153 :   return len;
; 2154 : }

	pop	ebp
	ret	0
?SK_RemoveTrailingDecimalZeros@@YAIPA_WI@Z ENDP		; SK_RemoveTrailingDecimalZeros
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszStr1$ = 8						; size = 4
_wszStr2$ = 12						; size = 4
?SK_Path_wcsicmp@@YAHPB_W0@Z PROC			; SK_Path_wcsicmp

; 1490 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 1491 :   int ret =
; 1492 :     CompareString ( LOCALE_INVARIANT,

	mov	esi, DWORD PTR _wszStr2$[ebp]
	push	esi
	call	DWORD PTR __imp__lstrlenW@4
	push	eax
	push	esi
	mov	esi, DWORD PTR _wszStr1$[ebp]
	push	esi
	call	DWORD PTR __imp__lstrlenW@4
	push	eax
	push	esi
	push	131075					; 00020003H
	push	127					; 0000007fH
	call	DWORD PTR __imp__CompareStringW@24
	pop	esi

; 1493 :                       NORM_IGNORECASE | NORM_IGNOREWIDTH |
; 1494 :                       NORM_IGNORENONSPACE,
; 1495 :                         wszStr1, lstrlenW (wszStr1),
; 1496 :                           wszStr2, lstrlenW (wszStr2) );
; 1497 : 
; 1498 :   // To make this a drop-in replacement for wcsicmp, subtract
; 1499 :   //   2 from non-zero return values
; 1500 :   return (ret != 0) ?

	test	eax, eax
	je	SHORT $LN3@SK_Path_wc
	add	eax, -2					; fffffffeH

; 1501 :     (ret - 2) : 0;
; 1502 : }

	pop	ebp
	ret	0
$LN3@SK_Path_wc:

; 1493 :                       NORM_IGNORECASE | NORM_IGNOREWIDTH |
; 1494 :                       NORM_IGNORENONSPACE,
; 1495 :                         wszStr1, lstrlenW (wszStr1),
; 1496 :                           wszStr2, lstrlenW (wszStr2) );
; 1497 : 
; 1498 :   // To make this a drop-in replacement for wcsicmp, subtract
; 1499 :   //   2 from non-zero return values
; 1500 :   return (ret != 0) ?

	xor	eax, eax

; 1501 :     (ret - 2) : 0;
; 1502 : }

	pop	ebp
	ret	0
?SK_Path_wcsicmp@@YAHPB_W0@Z ENDP			; SK_Path_wcsicmp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszStr$ = 8						; size = 4
_wszSubStr$ = 12					; size = 4
?SK_Path_wcsstr@@YAPB_WPB_W0@Z PROC			; SK_Path_wcsstr

; 1532 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1533 : #if 0
; 1534 :   int            len     =
; 1535 :     min (lstrlenW (wszSubStr), MAX_PATH);
; 1536 : 
; 1537 :   const wchar_t* it       = wszStr;
; 1538 :   const wchar_t* wszScan  = it;
; 1539 :   const wchar_t* wszBegin = it;
; 1540 : 
; 1541 :   int            idx     = 0;
; 1542 : 
; 1543 :   while (it < (wszStr + MAX_PATH)) {
; 1544 :     bool match = (*wszScan == wszSubStr [idx]);
; 1545 : 
; 1546 :     if (match) {
; 1547 :       if (++idx == len)
; 1548 :         return wszBegin;
; 1549 : 
; 1550 :       ++it;
; 1551 :     }
; 1552 : 
; 1553 :     else {
; 1554 :       if (it > (wszStr + MAX_PATH - len))
; 1555 :         break;
; 1556 : 
; 1557 :       it  = ++wszBegin;
; 1558 :       idx = 0;
; 1559 :     }
; 1560 :   }
; 1561 : 
; 1562 :   return (it <= (wszStr + MAX_PATH - len)) ?
; 1563 :            wszBegin : nullptr;
; 1564 : #else
; 1565 :   return StrStrIW (wszStr, wszSubStr);

	push	DWORD PTR _wszSubStr$[ebp]
	push	DWORD PTR _wszStr$[ebp]
	call	DWORD PTR __imp__StrStrIW@8

; 1566 : #endif
; 1567 : }

	pop	ebp
	ret	0
?SK_Path_wcsstr@@YAPB_WPB_W0@Z ENDP			; SK_Path_wcsstr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszStr$ = 8						; size = 4
_wchr$ = 12						; size = 2
?SK_Path_wcsrchr@@YAPB_WPB_W_W@Z PROC			; SK_Path_wcsrchr

; 1506 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 1507 :              int len     = 0;
; 1508 :   const wchar_t* pwszStr = wszStr;
; 1509 : 
; 1510 :   for (len = 0; len < MAX_PATH; ++len, pwszStr = CharNextW (pwszStr))

	mov	ebx, DWORD PTR __imp__CharNextW@4
	push	esi
	push	edi
	mov	edi, DWORD PTR _wszStr$[ebp]
	xor	esi, esi
	mov	eax, edi
$LL4@SK_Path_wc:

; 1511 :   {
; 1512 :     if (*pwszStr == L'\0')

	cmp	WORD PTR [eax], 0
	je	SHORT $LN12@SK_Path_wc

; 1507 :              int len     = 0;
; 1508 :   const wchar_t* pwszStr = wszStr;
; 1509 : 
; 1510 :   for (len = 0; len < MAX_PATH; ++len, pwszStr = CharNextW (pwszStr))

	push	eax
	inc	esi
	call	ebx
	cmp	esi, 260				; 00000104H
	jl	SHORT $LL4@SK_Path_wc
$LN12@SK_Path_wc:

; 1513 :       break;
; 1514 :   }
; 1515 : 
; 1516 :   const wchar_t* wszSearch = pwszStr;
; 1517 : 
; 1518 :   while (wszSearch >= wszStr)

	cmp	eax, edi
	jb	SHORT $LN20@SK_Path_wc
	mov	si, WORD PTR _wchr$[ebp]
	mov	ebx, DWORD PTR __imp__CharPrevW@8
$LL5@SK_Path_wc:

; 1519 :   {
; 1520 :     if (*wszSearch == wchr)

	cmp	WORD PTR [eax], si
	je	SHORT $LN20@SK_Path_wc

; 1521 :       break;
; 1522 : 
; 1523 :     wszSearch = CharPrevW (wszStr, wszSearch);

	push	eax
	push	edi
	call	ebx
	cmp	eax, edi
	jae	SHORT $LL5@SK_Path_wc
$LN20@SK_Path_wc:

; 1524 :   }
; 1525 : 
; 1526 :   return (wszSearch < wszStr) ?

	xor	ecx, ecx
	cmp	eax, edi
	pop	edi
	pop	esi
	cmovb	eax, ecx
	pop	ebx

; 1527 :            nullptr : wszSearch;
; 1528 : }

	pop	ebp
	ret	0
?SK_Path_wcsrchr@@YAPB_WPB_W_W@Z ENDP			; SK_Path_wcsrchr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszFile$ = 8						; size = 4
_callback$ = 12						; size = 4
?SK_GetFileCRC32C@@YGIPB_WP6GX_K1@Z@Z PROC		; SK_GetFileCRC32C

; 2075 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 2076 :   __crc32_init ();

	call	___crc32_init

; 2077 : 
; 2078 :   return SK_GetFileHash_32 (SK_CRC32C, wszFile, callback);

	push	DWORD PTR _callback$[ebp]
	push	DWORD PTR _wszFile$[ebp]
	push	2
	call	?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z ; SK_GetFileHash_32

; 2079 : }

	pop	ebp
	ret	8
?SK_GetFileCRC32C@@YGIPB_WP6GX_K1@Z@Z ENDP		; SK_GetFileCRC32C
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszFile$ = 8						; size = 4
_callback$ = 12						; size = 4
?SK_GetFileCRC32@@YGIPB_WP6GX_K1@Z@Z PROC		; SK_GetFileCRC32

; 2068 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 2069 :   return SK_GetFileHash_32 (SK_CRC32_KAL, wszFile, callback);

	push	DWORD PTR _callback$[ebp]
	push	DWORD PTR _wszFile$[ebp]
	push	1
	call	?SK_GetFileHash_32@@YGIW4sk_hash_algo@@PB_WP6GX_K2@Z@Z ; SK_GetFileHash_32

; 2070 : }

	pop	ebp
	ret	8
?SK_GetFileCRC32@@YGIPB_WP6GX_K1@Z@Z ENDP		; SK_GetFileCRC32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_file_attrib_data$ = -36				; size = 36
_wszFile$ = 8						; size = 4
?SK_GetFileSize@@YG_KPB_W@Z PROC			; SK_GetFileSize

; 1945 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H

; 1946 :   WIN32_FILE_ATTRIBUTE_DATA
; 1947 :     file_attrib_data = { };
; 1948 : 
; 1949 :   if ( GetFileAttributesEx ( wszFile,

	lea	eax, DWORD PTR _file_attrib_data$[ebp]
	mov	DWORD PTR _file_attrib_data$[ebp+32], 0
	push	eax
	push	0
	push	DWORD PTR _wszFile$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR _file_attrib_data$[ebp], xmm0
	movups	XMMWORD PTR _file_attrib_data$[ebp+16], xmm0
	call	DWORD PTR __imp__GetFileAttributesExW@12
	test	eax, eax
	je	SHORT $LN2@SK_GetFile

; 1950 :                                GetFileExInfoStandard,
; 1951 :                                  &file_attrib_data ) )
; 1952 :   {
; 1953 :     return ULARGE_INTEGER { file_attrib_data.nFileSizeLow,

	mov	eax, DWORD PTR _file_attrib_data$[ebp+32]
	mov	edx, DWORD PTR _file_attrib_data$[ebp+28]

; 1958 : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN2@SK_GetFile:

; 1954 :                             file_attrib_data.nFileSizeHigh }.QuadPart;
; 1955 :   }
; 1956 : 
; 1957 :   return 0ULL;

	xor	eax, eax
	xor	edx, edx

; 1958 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SK_GetFileSize@@YG_KPB_W@Z ENDP			; SK_GetFileSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_hMod$ = 8						; size = 4
_gl$ = 12						; size = 4
_vulkan$ = 16						; size = 4
_d3d9$ = 20						; size = 4
_dxgi$ = 24						; size = 4
_d3d11$ = 28						; size = 4
_d3d8$ = 32						; size = 4
_ddraw$ = 36						; size = 4
_glide$ = 40						; size = 4
?SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z PROC ; SK_TestRenderImports

; 1463 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1464 :   static sk_import_test_s tests [] = { { "OpenGL32.dll", false },
; 1465 :                                        { "vulkan-1.dll", false },
; 1466 :                                        { "d3d9.dll",     false },
; 1467 :                                        //{ "dxgi.dll",     false },
; 1468 :                                        { "d3d11.dll",    false },
; 1469 :                                        { "d3d8.dll",     false },
; 1470 :                                        { "ddraw.dll",    false },
; 1471 : 
; 1472 :                                        // 32-bit only
; 1473 :                                        { "glide.dll",    false } };
; 1474 : 
; 1475 :   SK_TestImports (hMod, tests, sizeof (tests) / sizeof sk_import_test_s);

	push	7
	push	OFFSET ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A
	push	DWORD PTR _hMod$[ebp]
	call	?SK_TestImports@@YGXPAUHINSTANCE__@@PAUsk_import_test_s@@H@Z ; SK_TestImports

; 1476 : 
; 1477 :   *gl     = tests [0].used;

	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+4
	mov	ecx, DWORD PTR _gl$[ebp]
	mov	BYTE PTR [ecx], al

; 1478 :   *vulkan = tests [1].used;

	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+12
	mov	ecx, DWORD PTR _vulkan$[ebp]
	mov	BYTE PTR [ecx], al

; 1479 :   *d3d9   = tests [2].used;

	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+20
	mov	ecx, DWORD PTR _d3d9$[ebp]
	mov	BYTE PTR [ecx], al

; 1480 :   *dxgi   = false;

	mov	eax, DWORD PTR _dxgi$[ebp]

; 1481 : //*dxgi   = tests [3].used;
; 1482 :   *d3d11  = tests [3].used;

	mov	ecx, DWORD PTR _d3d11$[ebp]
	mov	BYTE PTR [eax], 0
	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+28
	mov	BYTE PTR [ecx], al

; 1483 :   *d3d8   = tests [4].used;

	mov	ecx, DWORD PTR _d3d8$[ebp]
	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+36
	mov	BYTE PTR [ecx], al

; 1484 :   *ddraw  = tests [5].used;

	mov	ecx, DWORD PTR _ddraw$[ebp]
	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+44
	mov	BYTE PTR [ecx], al

; 1485 :   *glide  = tests [6].used;

	mov	ecx, DWORD PTR _glide$[ebp]
	movzx	eax, BYTE PTR ?tests@?1??SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z@4PAUsk_import_test_s@@A+52
	mov	BYTE PTR [ecx], al

; 1486 : }

	pop	ebp
	ret	0
?SK_TestRenderImports@@YAXPAUHINSTANCE__@@PA_N1111111@Z ENDP ; SK_TestRenderImports
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_minfo$2 = -76						; size = 28
_i$3 = -48						; size = 4
_end$4 = -44						; size = 4
_szImport$1$ = -40					; size = 4
_hits$ = -36						; size = 4
_pImpDesc$5 = -32					; size = 4
_pImgBase$6 = -28					; size = 4
__$SEHRec$ = -24					; size = 24
_hMod$ = 8						; size = 4
_pTests$ = 12						; size = 4
_nCount$ = 16						; size = 4
?SK_TestImports@@YGXPAUHINSTANCE__@@PAUsk_import_test_s@@H@Z PROC ; SK_TestImports

; 1358 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	OFFSET __sehtable$?SK_TestImports@@YGXPAUHINSTANCE__@@PAUsk_import_test_s@@H@Z
	push	OFFSET __except_handler3
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 60					; 0000003cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR __$SEHRec$[ebp], esp

; 1359 :   DBG_UNREFERENCED_PARAMETER (hMod);
; 1360 : 
; 1361 :   int hits = 0;

	xor	edi, edi
	mov	DWORD PTR _hits$[ebp], edi

; 1362 : 
; 1363 :   __try

	mov	DWORD PTR __$SEHRec$[ebp+20], edi

; 1364 :   {
; 1365 :     uintptr_t                pImgBase =
; 1366 :       (uintptr_t)GetModuleHandle (nullptr);

	push	edi
	call	DWORD PTR __imp__GetModuleHandleW@4
	mov	DWORD PTR _pImgBase$6[ebp], eax

; 1367 : 
; 1368 :              MEMORY_BASIC_INFORMATION minfo;
; 1369 :     VirtualQuery ((LPCVOID)pImgBase, &minfo, sizeof minfo);

	push	28					; 0000001cH
	lea	ecx, DWORD PTR _minfo$2[ebp]
	push	ecx
	push	eax
	call	DWORD PTR __imp__VirtualQuery@12

; 1370 : 
; 1371 :     pImgBase =

	mov	ecx, DWORD PTR _minfo$2[ebp]
	mov	DWORD PTR _pImgBase$6[ebp], ecx

; 1372 :       (uintptr_t)minfo.BaseAddress;
; 1373 : 
; 1374 :     PIMAGE_NT_HEADERS        pNtHdr   =
; 1375 :       PIMAGE_NT_HEADERS ( pImgBase + PIMAGE_DOS_HEADER (pImgBase)->e_lfanew );

	mov	eax, DWORD PTR [ecx+60]

; 1376 : 
; 1377 :     PIMAGE_DATA_DIRECTORY    pImgDir  =
; 1378 :         &pNtHdr->OptionalHeader.DataDirectory [IMAGE_DIRECTORY_ENTRY_IMPORT];
; 1379 : 
; 1380 :     PIMAGE_IMPORT_DESCRIPTOR pImpDesc =
; 1381 :       PIMAGE_IMPORT_DESCRIPTOR (

	mov	ebx, DWORD PTR [eax+ecx+128]
	add	ebx, ecx
	mov	DWORD PTR _pImpDesc$5[ebp], ebx

; 1382 :         pImgBase + pImgDir->VirtualAddress
; 1383 :       );
; 1384 : 
; 1385 :     //dll_log.Log (L"[Import Tbl] Size=%lu", pImgDir->Size);
; 1386 : 
; 1387 :     if (pImgDir->Size < (1024 * 8192))

	mov	eax, DWORD PTR [eax+ecx+132]
	cmp	eax, 8388608				; 00800000H
	jae	SHORT $LN3@SK_TestImp

; 1388 :     {
; 1389 :       uintptr_t end = (uintptr_t)pImpDesc + pImgDir->Size;

	add	eax, ebx
	mov	DWORD PTR _end$4[ebp], eax
	npad	1
$LL2@SK_TestImp:

; 1390 : 
; 1391 :       while (reinterpret_cast <uintptr_t> (pImpDesc) < end)

	cmp	ebx, eax
	jae	SHORT $LN3@SK_TestImp

; 1392 :       {
; 1393 :         __try

	mov	DWORD PTR __$SEHRec$[ebp+20], 1

; 1394 :         {
; 1395 :           if (pImpDesc->Name == 0x00)

	mov	eax, DWORD PTR [ebx+12]

; 1396 :           {
; 1397 :             ++pImpDesc;

	add	ebx, 20					; 00000014H
	mov	DWORD PTR _pImpDesc$5[ebp], ebx

; 1394 :         {
; 1395 :           if (pImpDesc->Name == 0x00)

	test	eax, eax
	jne	SHORT $LN13@SK_TestImp

; 1398 :             continue;

	mov	DWORD PTR __$SEHRec$[ebp+20], eax
	mov	eax, DWORD PTR _end$4[ebp]
	jmp	SHORT $LL2@SK_TestImp
$LN13@SK_TestImp:

; 1399 :           }
; 1400 : 
; 1401 :           const char* szImport =
; 1402 :             reinterpret_cast <const char *> (
; 1403 :               pImgBase + (pImpDesc++)->Name

	lea	edx, DWORD PTR [eax+ecx]
	mov	DWORD PTR _szImport$1$[ebp], edx

; 1404 :             );
; 1405 : 
; 1406 :           //dll_log.Log (L"%hs", szImport);
; 1407 : 
; 1408 :           for (int i = 0; i < nCount; i++)

	xor	esi, esi
	mov	eax, DWORD PTR _nCount$[ebp]
$LN42@SK_TestImp:
	mov	DWORD PTR _i$3[ebp], esi
	cmp	esi, eax
	jge	SHORT $LN5@SK_TestImp

; 1409 :           {
; 1410 :             if ((! pTests [i].used) && StrStrIA (szImport, pTests [i].szModuleName))

	mov	ecx, DWORD PTR _pTests$[ebp]
	cmp	BYTE PTR [ecx+esi*8+4], 0
	jne	SHORT $LN14@SK_TestImp
	push	DWORD PTR [ecx+esi*8]
	push	edx
	call	DWORD PTR __imp__StrStrIA@8
	mov	edx, DWORD PTR _szImport$1$[ebp]
	test	eax, eax
	je	SHORT $LN39@SK_TestImp

; 1411 :             {
; 1412 :               pTests [i].used = true;

	mov	eax, DWORD PTR _pTests$[ebp]
	mov	BYTE PTR [eax+esi*8+4], 1

; 1413 :                        ++hits;

	inc	edi
	mov	DWORD PTR _hits$[ebp], edi
$LN39@SK_TestImp:
	mov	eax, DWORD PTR _nCount$[ebp]
$LN14@SK_TestImp:

; 1404 :             );
; 1405 : 
; 1406 :           //dll_log.Log (L"%hs", szImport);
; 1407 : 
; 1408 :           for (int i = 0; i < nCount; i++)

	inc	esi
	jmp	SHORT $LN42@SK_TestImp
$LN5@SK_TestImp:

; 1414 :             }
; 1415 :           }
; 1416 : 
; 1417 :           if (hits == nCount)

	cmp	edi, eax
	jne	SHORT $LN15@SK_TestImp

; 1418 :             break;

	mov	DWORD PTR __$SEHRec$[ebp+20], 0
$LN3@SK_TestImp:

; 1426 :     }
; 1427 :   }

	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	jmp	SHORT $LN23@SK_TestImp
$LN15@SK_TestImp:

; 1419 :         }

	mov	DWORD PTR __$SEHRec$[ebp+20], 0
	mov	ecx, DWORD PTR _pImgBase$6[ebp]

; 1422 :                      EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH )
; 1423 :         {
; 1424 :         }
; 1425 :       }

	mov	eax, DWORD PTR _end$4[ebp]
	jmp	$LL2@SK_TestImp
$LN24@SK_TestImp:
$LN44@SK_TestImp:

; 1420 : 
; 1421 :         __except ( ( GetExceptionCode () == EXCEPTION_ACCESS_VIOLATION ) ? 

	mov	eax, DWORD PTR __$SEHRec$[ebp+4]
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1073741819		; c0000005H
	sete	cl
	mov	eax, ecx
$LN40@SK_TestImp:
$LN26@SK_TestImp:
	ret	0
$LN25@SK_TestImp:
	mov	esp, DWORD PTR __$SEHRec$[ebp]

; 1419 :         }

	mov	DWORD PTR __$SEHRec$[ebp+20], 0
	mov	edi, DWORD PTR _hits$[ebp]
	mov	ebx, DWORD PTR _pImpDesc$5[ebp]
	mov	ecx, DWORD PTR _pImgBase$6[ebp]

; 1422 :                      EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH )
; 1423 :         {
; 1424 :         }
; 1425 :       }

	mov	eax, DWORD PTR _end$4[ebp]
	jmp	$LL2@SK_TestImp
$LN20@SK_TestImp:
$LN45@SK_TestImp:

; 1428 : 
; 1429 :   __except ( ( GetExceptionCode () == EXCEPTION_ACCESS_VIOLATION ) ? 

	mov	eax, DWORD PTR __$SEHRec$[ebp+4]
	mov	eax, DWORD PTR [eax]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], -1073741819		; c0000005H
	sete	cl
	mov	eax, ecx
$LN41@SK_TestImp:
$LN22@SK_TestImp:
	ret	0
$LN21@SK_TestImp:
	mov	esp, DWORD PTR __$SEHRec$[ebp]

; 1430 :                EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH ) {
; 1431 :     dll_log.Log ( L"[Import Tbl] Access Violation Attempting to "

	push	OFFSET $SG298584
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log
	add	esp, 8

; 1426 :     }
; 1427 :   }

	mov	DWORD PTR __$SEHRec$[ebp+20], -1
	mov	edi, DWORD PTR _hits$[ebp]
$LN23@SK_TestImp:

; 1432 :                   L"Walk Import Table." );
; 1433 :   }
; 1434 : 
; 1435 :   if (hits == 0)

	test	edi, edi
	jne	SHORT $LN8@SK_TestImp

; 1436 :   {
; 1437 :     // Supplement the import table test with a check for residency,
; 1438 :     //   this may catch games that load graphics APIs dynamically.
; 1439 :     for (int i = 0; i < nCount; i++)

	xor	esi, esi
	mov	edi, DWORD PTR _nCount$[ebp]
	test	edi, edi
	jle	SHORT $LN8@SK_TestImp
	mov	ebx, DWORD PTR _pTests$[ebp]
$LL9@SK_TestImp:

; 1440 :     {
; 1441 :       if ( GetModuleHandleExA ( GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,

	lea	eax, DWORD PTR _hMod$[ebp]
	push	eax
	push	DWORD PTR [ebx+esi*8]
	push	2
	call	DWORD PTR __imp__GetModuleHandleExA@12
	test	eax, eax
	je	SHORT $LN7@SK_TestImp

; 1442 :                                   pTests [i].szModuleName,
; 1443 :                                     &hMod ) )
; 1444 :         pTests [i].used = true;

	mov	BYTE PTR [ebx+esi*8+4], 1
$LN7@SK_TestImp:

; 1436 :   {
; 1437 :     // Supplement the import table test with a check for residency,
; 1438 :     //   this may catch games that load graphics APIs dynamically.
; 1439 :     for (int i = 0; i < nCount; i++)

	inc	esi
	cmp	esi, edi
	jl	SHORT $LL9@SK_TestImp
$LN8@SK_TestImp:

; 1445 :     }
; 1446 :   }
; 1447 : }

	mov	ecx, DWORD PTR __$SEHRec$[ebp+8]
	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SK_TestImports@@YGXPAUHINSTANCE__@@PAUsk_import_test_s@@H@Z ENDP ; SK_TestImports
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
?SK_SelfDestruct@@YGXXZ PROC				; SK_SelfDestruct

; 1228 :   if (! InterlockedCompareExchange (&__SK_DLL_Ending, 1, 0))

	mov	ecx, 1
	mov	edx, OFFSET ?__SK_DLL_Ending@@3JC	; __SK_DLL_Ending
	xor	eax, eax
	lock	 cmpxchg DWORD PTR [edx], ecx
	test	eax, eax
	jne	SHORT $LN7@SK_SelfDes

; 1229 :   {
; 1230 :     //FreeLibrary (SK_GetDLL ());
; 1231 :     const wchar_t* wszBackend = SK_GetBackend ();

	push	esi
	push	edi
	call	?SK_GetBackend@@YGPB_WXZ		; SK_GetBackend

; 1232 : 
; 1233 :     if (     ! _wcsicmp (wszBackend, L"d3d9"))

	mov	edi, DWORD PTR __imp___wcsicmp
	mov	esi, eax
	push	OFFSET $SG293134
	push	esi
	call	edi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@SK_SelfDes
	pop	edi
	pop	esi

; 1234 :       SK::D3D9::Shutdown ();

	jmp	?Shutdown@D3D9@SK@@YA_NXZ		; SK::D3D9::Shutdown
$LN3@SK_SelfDes:

; 1235 :     else if (! _wcsicmp (wszBackend, L"dxgi"))

	push	OFFSET $SG293137
	push	esi
	call	edi
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@SK_SelfDes
	pop	edi
	pop	esi

; 1236 :       SK::DXGI::Shutdown ();

	jmp	?Shutdown@DXGI@SK@@YA_NXZ		; SK::DXGI::Shutdown
$LN5@SK_SelfDes:

; 1237 : #ifndef SK_BUILD__INSTALLER
; 1238 :     else if (! _wcsicmp (wszBackend, L"OpenGL32"))

	push	OFFSET $SG293139
	push	esi
	call	edi
	add	esp, 8
	pop	edi
	pop	esi
	test	eax, eax
	je	?Shutdown@OpenGL@SK@@YA_NXZ		; SK::OpenGL::Shutdown
$LN7@SK_SelfDes:

; 1239 :       SK::OpenGL::Shutdown ();
; 1240 : #endif
; 1241 :   }
; 1242 : }

	ret	0
?SK_SelfDestruct@@YGXXZ ENDP				; SK_SelfDestruct
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_cbData$ = -5280					; size = 4096
_wszFullyQualifiedName$ = -1184				; size = 1040
_wszPropName$1 = -144					; size = 128
_wszProduct$ = -16					; size = 4
_cbProductBytes$ = -12					; size = 4
_lpTranslate$ = -8					; size = 4
_cbTranslatedBytes$ = -4				; size = 4
_wszName$ = 8						; size = 4
?SK_IsDLLSpecialK@@YG_NPB_W@Z PROC			; SK_IsDLLSpecialK

; 1577 : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, 5280				; 000014a0H
	call	__chkstk
	push	esi

; 1578 :   UINT     cbTranslatedBytes = 0,
; 1579 :            cbProductBytes    = 0;
; 1580 : 
; 1581 :   uint8_t  cbData     [4096] = { };

	push	4096					; 00001000H
	lea	eax, DWORD PTR _cbData$[ebp]
	mov	DWORD PTR _cbTranslatedBytes$[ebp], 0
	push	0
	push	eax
	mov	DWORD PTR _cbProductBytes$[ebp], 0
	call	_memset

; 1582 : 
; 1583 :   wchar_t* wszProduct        = nullptr; // Will point somewhere in cbData
; 1584 : 
; 1585 :   struct LANGANDCODEPAGE {
; 1586 :     WORD wLanguage;
; 1587 :     WORD wCodePage;
; 1588 :   } *lpTranslate = nullptr;
; 1589 : 
; 1590 :   wchar_t wszFullyQualifiedName [MAX_PATH * 2] = { };

	push	1040					; 00000410H
	lea	eax, DWORD PTR _wszFullyQualifiedName$[ebp]
	mov	DWORD PTR _wszProduct$[ebp], 0
	push	0
	push	eax
	mov	DWORD PTR _lpTranslate$[ebp], 0
	call	_memset
	add	esp, 24					; 00000018H

; 1591 : 
; 1592 :   lstrcatW (wszFullyQualifiedName, SK_GetHostPath ());

	call	?SK_GetHostPath@@YAPB_WXZ		; SK_GetHostPath
	mov	esi, DWORD PTR __imp__lstrcatW@8
	push	eax
	lea	eax, DWORD PTR _wszFullyQualifiedName$[ebp]
	push	eax
	call	esi

; 1593 :   lstrcatW (wszFullyQualifiedName, L"\\");

	push	OFFSET $SG298671
	lea	eax, DWORD PTR _wszFullyQualifiedName$[ebp]
	push	eax
	call	esi

; 1594 :   lstrcatW (wszFullyQualifiedName, wszName);

	push	DWORD PTR _wszName$[ebp]
	lea	eax, DWORD PTR _wszFullyQualifiedName$[ebp]
	push	eax
	call	esi

; 1595 : 
; 1596 :   if (GetFileAttributes (wszFullyQualifiedName) == INVALID_FILE_ATTRIBUTES)

	lea	eax, DWORD PTR _wszFullyQualifiedName$[ebp]
	push	eax
	call	DWORD PTR __imp__GetFileAttributesW@4
	cmp	eax, -1
	je	$LN3@SK_IsDLLSp

; 1597 :     return false;
; 1598 : 
; 1599 :   GetFileVersionInfoEx ( FILE_VER_GET_NEUTRAL |

	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	push	4096					; 00001000H
	push	0
	lea	eax, DWORD PTR _wszFullyQualifiedName$[ebp]
	push	eax
	push	6
	call	_GetFileVersionInfoExW@20

; 1600 :                          FILE_VER_GET_PREFETCHED,
; 1601 :                            wszFullyQualifiedName,
; 1602 :                              0x00,
; 1603 :                                4096,
; 1604 :                                  cbData );
; 1605 : 
; 1606 :   if ( VerQueryValue ( cbData,
; 1607 :                        TEXT ("\\VarFileInfo\\Translation"),
; 1608 :            static_cast_p2p <void> (&lpTranslate),
; 1609 :                                    &cbTranslatedBytes ) && cbTranslatedBytes && lpTranslate )

	lea	eax, DWORD PTR _cbTranslatedBytes$[ebp]
	push	eax
	lea	eax, DWORD PTR _lpTranslate$[ebp]
	push	eax
	push	OFFSET $SG298674
	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	call	_VerQueryValueW@16
	test	eax, eax
	je	$LN3@SK_IsDLLSp
	cmp	DWORD PTR _cbTranslatedBytes$[ebp], 0
	je	$LN3@SK_IsDLLSp
	mov	esi, DWORD PTR _lpTranslate$[ebp]
	test	esi, esi
	je	SHORT $LN3@SK_IsDLLSp

; 1610 :   {
; 1611 :     wchar_t wszPropName [64] = { };

	push	128					; 00000080H
	lea	eax, DWORD PTR _wszPropName$1[ebp]
	push	0
	push	eax
	call	_memset

; 1612 : 
; 1613 :     wsprintfW ( wszPropName,

	movzx	eax, WORD PTR [esi+2]
	push	eax
	movzx	eax, WORD PTR [esi]
	push	eax
	lea	eax, DWORD PTR _wszPropName$1[ebp]
	push	OFFSET $SG298675
	push	eax
	call	DWORD PTR __imp__wsprintfW
	add	esp, 28					; 0000001cH

; 1614 :                   L"\\StringFileInfo\\%04x%04x\\ProductName",
; 1615 :                     lpTranslate   [0].wLanguage,
; 1616 :                       lpTranslate [0].wCodePage );
; 1617 : 
; 1618 :     VerQueryValue ( cbData,

	lea	eax, DWORD PTR _cbProductBytes$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszProduct$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszPropName$1[ebp]
	push	eax
	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	call	_VerQueryValueW@16

; 1619 :                       wszPropName,
; 1620 :           static_cast_p2p <void> (&wszProduct),
; 1621 :                                   &cbProductBytes );
; 1622 : 
; 1623 :     return (cbProductBytes && (StrStrIW (wszProduct, L"Special K")));

	cmp	DWORD PTR _cbProductBytes$[ebp], 0
	je	SHORT $LN5@SK_IsDLLSp
	push	OFFSET $SG298676
	push	DWORD PTR _wszProduct$[ebp]
	call	DWORD PTR __imp__StrStrIW@8
	test	eax, eax
	je	SHORT $LN5@SK_IsDLLSp
	mov	eax, 1
	pop	esi

; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN5@SK_IsDLLSp:

; 1619 :                       wszPropName,
; 1620 :           static_cast_p2p <void> (&wszProduct),
; 1621 :                                   &cbProductBytes );
; 1622 : 
; 1623 :     return (cbProductBytes && (StrStrIW (wszProduct, L"Special K")));

	xor	eax, eax
	pop	esi

; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	4
$LN3@SK_IsDLLSp:

; 1624 :   }
; 1625 : 
; 1626 :   return false;

	xor	al, al
	pop	esi

; 1627 : }

	mov	esp, ebp
	pop	ebp
	ret	4
?SK_IsDLLSpecialK@@YG_NPB_W@Z ENDP			; SK_IsDLLSpecialK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
??0SK_HostAppUtil@@QAE@XZ PROC				; SK_HostAppUtil::SK_HostAppUtil
; _this$ = ecx

; 3030 : {

	npad	2
	push	edi
	mov	edi, ecx

; 3031 :   SKIM     = StrStrIW (SK_GetHostApp (), L"SKIM")     != nullptr;

	push	OFFSET $SG299848
	mov	WORD PTR [edi], 0
	call	?SK_GetHostApp@@YAPB_WXZ		; SK_GetHostApp
	push	eax
	call	DWORD PTR __imp__StrStrIW@8
	test	eax, eax

; 3032 :   RunDll32 = StrStrIW (SK_GetHostApp (), L"RunDLL32") != nullptr;

	push	OFFSET $SG299849
	setne	al
	mov	BYTE PTR [edi], al
	call	?SK_GetHostApp@@YAPB_WXZ		; SK_GetHostApp
	push	eax
	call	DWORD PTR __imp__StrStrIW@8
	test	eax, eax
	setne	al
	mov	BYTE PTR [edi+1], al

; 3033 : }

	mov	eax, edi
	pop	edi
	ret	0
??0SK_HostAppUtil@@QAE@XZ ENDP				; SK_HostAppUtil::SK_HostAppUtil
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
?SK_IsSuperSpecialK@@YA_NXZ PROC			; SK_IsSuperSpecialK

; 2232 :   return (SK_IsRunDLLInvocation () || SK_IsHostAppSKIM ());

	call	?SK_IsRunDLLInvocation@@YA_NXZ		; SK_IsRunDLLInvocation
	test	al, al
	jne	SHORT $LN3@SK_IsSuper
	call	?SK_IsHostAppSKIM@@YA_NXZ		; SK_IsHostAppSKIM
	test	al, al
	jne	SHORT $LN3@SK_IsSuper

; 2233 : }

	ret	0
$LN3@SK_IsSuper:

; 2232 :   return (SK_IsRunDLLInvocation () || SK_IsHostAppSKIM ());

	mov	al, 1

; 2233 : }

	ret	0
?SK_IsSuperSpecialK@@YA_NXZ ENDP			; SK_IsSuperSpecialK
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
?SK_IsRunDLLInvocation@@YA_NXZ PROC			; SK_IsRunDLLInvocation

; 2201 :   // Allow some commands invoked by RunDLL to function as a normal DLL
; 2202 :   if (__SK_RunDLL_Bypass)

	cmp	BYTE PTR ?__SK_RunDLL_Bypass@@3_NA, 0	; __SK_RunDLL_Bypass
	je	SHORT $LN2@SK_IsRunDL

; 2203 :     return false;

	xor	al, al

; 2226 : }

	ret	0
$LN2@SK_IsRunDL:
	push	ebx

; 2204 : 
; 2205 :   bool rundll_invoked =
; 2206 :     (StrStrIW (SK_GetHostApp (), L"Rundll32") != nullptr);

	push	OFFSET $SG298982
	call	?SK_GetHostApp@@YAPB_WXZ		; SK_GetHostApp
	push	eax
	call	DWORD PTR __imp__StrStrIW@8
	test	eax, eax
	setne	bl

; 2207 : 
; 2208 :   if (rundll_invoked)

	test	bl, bl
	je	SHORT $LN3@SK_IsRunDL

; 2209 :   {
; 2210 :     // Not all instances of RunDLL32 that load this DLL are Special K ...
; 2211 :     //
; 2212 :     //  The CBT hook may have been triggered by some other software that used
; 2213 :     //    rundll32 and then launched a Win32 application with it.
; 2214 :     //
; 2215 :     wchar_t* wszArgs =
; 2216 :       _wcsdup (PathGetArgsW (GetCommandLineW ()));

	push	esi
	call	DWORD PTR __imp__GetCommandLineW@0
	push	eax
	call	DWORD PTR __imp__PathGetArgsW@4
	push	eax
	call	DWORD PTR __imp___wcsdup
	add	esp, 4
	mov	esi, eax

; 2217 : 
; 2218 :     // If the command line does not reference our DLL
; 2219 :     if (! StrStrW (wszArgs, L"RunDLL_"))

	push	OFFSET $SG298985
	push	esi
	call	DWORD PTR __imp__StrStrW@8
	neg	eax

; 2220 :       rundll_invoked = false;
; 2221 : 
; 2222 :     free (wszArgs);

	push	esi
	sbb	al, al
	and	bl, al
	call	DWORD PTR __imp__free
	add	esp, 4
	pop	esi
$LN3@SK_IsRunDL:

; 2223 :   }
; 2224 : 
; 2225 :   return rundll_invoked;

	mov	al, bl
	pop	ebx

; 2226 : }

	ret	0
?SK_IsRunDLLInvocation@@YA_NXZ ENDP			; SK_IsRunDLLInvocation
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -12						; size = 12
_threads$ = 8						; size = 20
?SK_ResumeThreads@@YAXV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@@Z PROC ; SK_ResumeThreads

; 1335 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1397 : 		return (this->_Mysize() == 0);

	cmp	DWORD PTR _threads$[ebp+16], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1336 :   while (! threads.empty ())

	je	SHORT $LN3@SK_ResumeT
	push	ebx
	mov	ebx, DWORD PTR __imp__CloseHandle@4
	push	esi
	push	edi
	mov	edi, DWORD PTR __imp__ResumeThread@4
	npad	3
$LL2@SK_ResumeT:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1446 : 		return (*begin());

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	lea	ecx, DWORD PTR _threads$[ebp]
	call	?begin@?$deque@KV?$allocator@K@std@@@std@@QAE?AV?$_Deque_iterator@V?$_Deque_val@U?$_Deque_simple_types@K@std@@@std@@@2@XZ ; std::deque<unsigned long,std::allocator<unsigned long> >::begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	esi, DWORD PTR [eax]
	test	esi, esi
	je	SHORT $LN33@SK_ResumeT
$LN32@SK_ResumeT:
	mov	esi, DWORD PTR [esi]
$LN33@SK_ResumeT:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	mov	edx, DWORD PTR [eax+8]
	mov	ecx, edx
	mov	eax, DWORD PTR [esi+8]

; 339  : 		size_type _Off = _Myoff % _DEQUESIZ;

	and	edx, 3

; 762  : 		return ((_Off / _DEQUESIZ) & (_Mapsize - 1));

	dec	eax
	shr	ecx, 2
	and	ecx, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1338 :     DWORD tid = threads.front ();

	mov	eax, DWORD PTR [esi+4]
	mov	eax, DWORD PTR [eax+ecx*4]

; 1339 : 
; 1340 :     CHandle hThread (

	push	DWORD PTR [eax+edx*4]
	push	0
	push	2
	call	DWORD PTR __imp__OpenThread@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1344 :     if (hThread != nullptr)

	test	esi, esi
	je	SHORT $LN4@SK_ResumeT

; 1345 :     {
; 1346 :       ResumeThread (hThread);

	push	esi
	call	edi
$LN4@SK_ResumeT:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1496 : 		if (--this->_Mysize() == 0)

	mov	eax, DWORD PTR _threads$[ebp+16]
	sub	eax, 1
	mov	DWORD PTR _threads$[ebp+16], eax
	jne	SHORT $LN45@SK_ResumeT

; 1497 : 			this->_Myoff() = 0;

	mov	DWORD PTR _threads$[ebp+12], 0

; 1498 : 		else

	jmp	SHORT $LN46@SK_ResumeT
$LN45@SK_ResumeT:

; 1499 : 			++this->_Myoff();

	inc	DWORD PTR _threads$[ebp+12]
$LN46@SK_ResumeT:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN124@SK_ResumeT

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	ebx
	mov	eax, DWORD PTR _threads$[ebp+16]
$LN124@SK_ResumeT:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1397 : 		return (this->_Mysize() == 0);

	test	eax, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1336 :   while (! threads.empty ())

	jne	SHORT $LL2@SK_ResumeT
	pop	edi
	pop	esi
	pop	ebx
$LN3@SK_ResumeT:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 1244 : 		_Tidy();

	lea	ecx, DWORD PTR _threads$[ebp]
	call	?_Tidy@?$deque@KV?$allocator@K@std@@@std@@IAEXXZ ; std::deque<unsigned long,std::allocator<unsigned long> >::_Tidy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	8
	push	1
	push	DWORD PTR _threads$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1351 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_ResumeThreads@@YAXV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@@Z ENDP ; SK_ResumeThreads
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_tent$2 = -52						; size = 28
_hThread$3 = -24					; size = 4
_hSnap$ = -20						; size = 4
$T4 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ PROC ; SK_SuspendAllOtherThreads

; 1284 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 40					; 00000028H
	mov	DWORD PTR $T4[ebp], 0
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 32   : 		: c()

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	push	8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1284 : {

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 752  : 		: _Map(),

	mov	DWORD PTR [esi+4], 0

; 753  : 		_Mapsize(0),

	mov	DWORD PTR [esi+8], 0

; 754  : 		_Myoff(0),

	mov	DWORD PTR [esi+12], 0

; 755  : 		_Mysize(0)

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 87   : 		_Ptr = ::operator new(_User_size);

	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN48@SK_Suspend
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN149@SK_Suspend:
$LN48@SK_Suspend:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 854  : 		_Myproxy() = _Unfancy(_Alproxy.allocate(1));

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\deque

; 856  : 		_Myproxy()->_Mycont = _STD addressof(_Get_data());

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [eax], esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1330 :   return threads;

	push	0
	push	4
	mov	DWORD PTR $T4[ebp], 1
	call	_CreateToolhelp32Snapshot@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	edi, eax
	mov	DWORD PTR _hSnap$[ebp], edi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1287 :   CHandle hSnap (

	mov	DWORD PTR __$EHRec$[ebp+8], 1

; 1288 :     CreateToolhelp32Snapshot (TH32CS_SNAPTHREAD, 0)
; 1289 :   );
; 1290 : 
; 1291 :   if (hSnap != INVALID_HANDLE_VALUE)

	cmp	edi, -1
	je	$LN3@SK_Suspend

; 1292 :   {
; 1293 :     THREADENTRY32 tent        = {                  };
; 1294 :                   tent.dwSize = sizeof THREADENTRY32;
; 1295 : 
; 1296 :     if (Thread32First (hSnap, &tent))

	lea	eax, DWORD PTR _tent$2[ebp]
	mov	DWORD PTR _tent$2[ebp+24], 0
	xorps	xmm0, xmm0
	push	eax
	movups	XMMWORD PTR _tent$2[ebp], xmm0
	push	edi
	movq	QWORD PTR _tent$2[ebp+16], xmm0
	mov	DWORD PTR _tent$2[ebp], 28		; 0000001cH
	call	_Thread32First@8
	test	eax, eax
	je	SHORT $LN3@SK_Suspend
$LL4@SK_Suspend:

; 1297 :     {
; 1298 :       //bool locked = 
; 1299 :       //  dll_log.lock ();
; 1300 : 
; 1301 :       do
; 1302 :       {
; 1303 :         if ( tent.dwSize >= FIELD_OFFSET (THREADENTRY32, th32OwnerProcessID) +

	cmp	DWORD PTR _tent$2[ebp], 16		; 00000010H
	jb	SHORT $LN134@SK_Suspend

; 1304 :                                   sizeof (tent.th32OwnerProcessID) )
; 1305 :         {
; 1306 :           if ( tent.th32ThreadID       != GetCurrentThreadId  () &&

	call	DWORD PTR __imp__GetCurrentThreadId@0
	cmp	DWORD PTR _tent$2[ebp+8], eax
	je	SHORT $LN134@SK_Suspend
	call	DWORD PTR __imp__GetCurrentProcessId@0
	cmp	DWORD PTR _tent$2[ebp+12], eax
	jne	SHORT $LN134@SK_Suspend

; 1309 :             CHandle hThread (

	push	DWORD PTR _tent$2[ebp+8]
	push	0
	push	2
	call	DWORD PTR __imp__OpenThread@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
	mov	DWORD PTR _hThread$3[ebp], esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1309 :             CHandle hThread (

	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 1310 :               OpenThread (THREAD_SUSPEND_RESUME, FALSE, tent.th32ThreadID)
; 1311 :             );
; 1312 : 
; 1313 :             if (hThread != nullptr)

	test	esi, esi
	je	SHORT $LN9@SK_Suspend
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\queue

; 129  : 		c.push_back(_Val);

	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	lea	eax, DWORD PTR _tent$2[ebp+8]
	push	eax
	call	?push_back@?$deque@KV?$allocator@K@std@@@std@@QAEXABK@Z ; std::deque<unsigned long,std::allocator<unsigned long> >::push_back
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1317 :               SuspendThread (hThread);

	push	esi
	call	DWORD PTR __imp__SuspendThread@4
$LN9@SK_Suspend:

; 1318 :             }
; 1319 :           }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN134@SK_Suspend

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN134@SK_Suspend:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1323 :       } while (Thread32Next (hSnap, &tent));

	lea	eax, DWORD PTR _tent$2[ebp]
	mov	DWORD PTR _tent$2[ebp], 28		; 0000001cH
	push	eax
	push	edi
	call	_Thread32Next@8
	test	eax, eax
	jne	SHORT $LL4@SK_Suspend
	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
$LN3@SK_Suspend:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	edi, edi
	je	SHORT $LN142@SK_Suspend

; 1258 : 		::CloseHandle( m_h );

	push	edi
	call	DWORD PTR __imp__CloseHandle@4
$LN142@SK_Suspend:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1331 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN148@SK_Suspend:
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ$0:
	mov	eax, DWORD PTR $T4[ebp]
	and	eax, 1
	je	$LN12@SK_Suspend
	and	DWORD PTR $T4[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@QAE@XZ
$LN12@SK_Suspend:
	ret	0
__unwindfunclet$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ$1:
	lea	ecx, DWORD PTR _hSnap$[ebp]
	jmp	??1CHandle@ATL@@QAE@XZ			; ATL::CHandle::~CHandle
__unwindfunclet$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ$2:
	lea	ecx, DWORD PTR _hThread$3[ebp]
	jmp	??1CHandle@ATL@@QAE@XZ			; ATL::CHandle::~CHandle
__ehhandler$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_SuspendAllOtherThreads@@YA?AV?$queue@KV?$deque@KV?$allocator@K@std@@@std@@@std@@XZ ENDP ; SK_SuspendAllOtherThreads
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_cbData$ = -4288					; size = 4096
_wszPropName$2 = -192					; size = 128
$T3 = -64						; size = 4
_ret$ = -60						; size = 24
_wszFileVersion$ = -36					; size = 4
_wszFileDescrip$ = -32					; size = 4
_cbVersionBytes$ = -28					; size = 4
_cbProductBytes$ = -24					; size = 4
_cbTranslatedBytes$ = -20				; size = 4
_lpTranslate$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wszName$ = 12						; size = 4
?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z PROC ; SK_GetDLLVersionStr

; 1632 : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	push	eax
	mov	eax, 4276				; 000010b4H
	mov	DWORD PTR fs:0, esp
	call	__chkstk
	push	esi

; 1633 :   UINT     cbTranslatedBytes = 0,
; 1634 :            cbProductBytes    = 0,
; 1635 :            cbVersionBytes    = 0;
; 1636 : 
; 1637 :   uint8_t  cbData     [4096] = { };

	push	4096					; 00001000H
	lea	eax, DWORD PTR _cbData$[ebp]
	mov	DWORD PTR $T3[ebp], 0
	push	0
	push	eax
	mov	DWORD PTR _cbTranslatedBytes$[ebp], 0
	mov	DWORD PTR _cbProductBytes$[ebp], 0
	mov	DWORD PTR _cbVersionBytes$[ebp], 0
	call	_memset

; 1638 : 
; 1639 :   wchar_t* wszFileDescrip = nullptr; // Will point somewhere in cbData
; 1640 :   wchar_t* wszFileVersion = nullptr; // "
; 1641 : 
; 1642 :   struct LANGANDCODEPAGE {
; 1643 :     WORD wLanguage;
; 1644 :     WORD wCodePage;
; 1645 :   } *lpTranslate = nullptr;
; 1646 : 
; 1647 :   if (GetFileAttributes (wszName) == INVALID_FILE_ATTRIBUTES)

	mov	esi, DWORD PTR _wszName$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _wszFileDescrip$[ebp], 0
	mov	DWORD PTR _wszFileVersion$[ebp], 0
	mov	DWORD PTR _lpTranslate$[ebp], 0
	push	esi
	call	DWORD PTR __imp__GetFileAttributesW@4
	cmp	eax, -1
	jne	SHORT $LN2@SK_GetDLLV
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	3
	push	OFFSET $SG298710
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1648 :     return L"N/A";

	jmp	$LN203@SK_GetDLLV
$LN2@SK_GetDLLV:

; 1649 : 
; 1650 :   GetFileVersionInfoEx ( FILE_VER_GET_NEUTRAL |

	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	push	4096					; 00001000H
	push	0
	push	esi
	push	6
	call	_GetFileVersionInfoExW@20

; 1651 :                          FILE_VER_GET_PREFETCHED,
; 1652 :                            wszName,
; 1653 :                              0x00,
; 1654 :                                4096,
; 1655 :                                  cbData );
; 1656 : 
; 1657 :   if ( VerQueryValue ( cbData,
; 1658 :                          TEXT ("\\VarFileInfo\\Translation"),
; 1659 :              static_cast_p2p <void> (&lpTranslate),
; 1660 :                                      &cbTranslatedBytes ) && cbTranslatedBytes && lpTranslate )

	lea	eax, DWORD PTR _cbTranslatedBytes$[ebp]
	push	eax
	lea	eax, DWORD PTR _lpTranslate$[ebp]
	push	eax
	push	OFFSET $SG298712
	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	call	_VerQueryValueW@16
	test	eax, eax
	je	$LN201@SK_GetDLLV
	cmp	DWORD PTR _cbTranslatedBytes$[ebp], 0
	je	$LN5@SK_GetDLLV
	mov	esi, DWORD PTR _lpTranslate$[ebp]
	test	esi, esi
	je	$LN201@SK_GetDLLV

; 1661 :   {
; 1662 :     wchar_t wszPropName [64] = { };

	push	128					; 00000080H
	lea	eax, DWORD PTR _wszPropName$2[ebp]
	push	0
	push	eax
	call	_memset

; 1663 : 
; 1664 :     wsprintfW ( wszPropName,

	movzx	eax, WORD PTR [esi+2]
	push	eax
	movzx	eax, WORD PTR [esi]
	mov	esi, DWORD PTR __imp__wsprintfW
	push	eax
	lea	eax, DWORD PTR _wszPropName$2[ebp]
	push	OFFSET $SG298713
	push	eax
	call	esi
	add	esp, 28					; 0000001cH

; 1665 :                   L"\\StringFileInfo\\%04x%04x\\FileDescription",
; 1666 :                     lpTranslate   [0].wLanguage,
; 1667 :                       lpTranslate [0].wCodePage );
; 1668 : 
; 1669 :     VerQueryValue ( cbData,

	lea	eax, DWORD PTR _cbProductBytes$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszFileDescrip$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszPropName$2[ebp]
	push	eax
	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	call	_VerQueryValueW@16

; 1670 :                       wszPropName,
; 1671 :           static_cast_p2p <void> (&wszFileDescrip),
; 1672 :                                   &cbProductBytes );
; 1673 : 
; 1674 :     wsprintfW ( wszPropName,

	mov	ecx, DWORD PTR _lpTranslate$[ebp]
	movzx	eax, WORD PTR [ecx+2]
	push	eax
	movzx	eax, WORD PTR [ecx]
	push	eax
	lea	eax, DWORD PTR _wszPropName$2[ebp]
	push	OFFSET $SG298714
	push	eax
	call	esi
	add	esp, 16					; 00000010H

; 1675 :                   L"\\StringFileInfo\\%04x%04x\\FileVersion",
; 1676 :                     lpTranslate   [0].wLanguage,
; 1677 :                       lpTranslate [0].wCodePage );
; 1678 : 
; 1679 :     VerQueryValue ( cbData,

	lea	eax, DWORD PTR _cbVersionBytes$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszFileVersion$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszPropName$2[ebp]
	push	eax
	lea	eax, DWORD PTR _cbData$[ebp]
	push	eax
	call	_VerQueryValueW@16
$LN201@SK_GetDLLV:

; 1680 :                       wszPropName,
; 1681 :           static_cast_p2p <void> (&wszFileVersion),
; 1682 :                                   &cbVersionBytes );
; 1683 :   }
; 1684 : 
; 1685 :   if ( cbTranslatedBytes == 0 ||

	cmp	DWORD PTR _cbTranslatedBytes$[ebp], 0
	je	$LN5@SK_GetDLLV
	cmp	DWORD PTR _cbProductBytes$[ebp], 0
	jne	SHORT $LN4@SK_GetDLLV
	cmp	DWORD PTR _cbVersionBytes$[ebp], 0
	je	$LN5@SK_GetDLLV
$LN4@SK_GetDLLV:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _ret$[ebp+16], 0

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	OFFSET $SG298718
	lea	ecx, DWORD PTR _ret$[ebp]

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _ret$[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR _ret$[ebp], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1693 :   if (cbProductBytes)

	cmp	DWORD PTR _cbProductBytes$[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	je	SHORT $LN6@SK_GetDLLV
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR _wszFileDescrip$[ebp]
	mov	ecx, edx
	lea	esi, DWORD PTR [ecx+2]
	npad	6
$LL199@SK_GetDLLV:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL199@SK_GetDLLV
	sub	ecx, esi
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	push	2
	push	OFFSET $SG298720
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN6@SK_GetDLLV:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1699 :   if (cbVersionBytes)

	cmp	DWORD PTR _cbVersionBytes$[ebp], 0
	je	SHORT $LN7@SK_GetDLLV
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR _wszFileVersion$[ebp]
	mov	ecx, edx
	lea	esi, DWORD PTR [ecx+2]
$LL200@SK_GetDLLV:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL200@SK_GetDLLV
	sub	ecx, esi
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	lea	ecx, DWORD PTR _ret$[ebp]
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN7@SK_GetDLLV:

; 1595 : 		_Mysize(0),

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR _ret$[ebp]
	pop	esi

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [eax+16], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [eax+20], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	XMMWORD PTR [eax], xmm0
	movq	xmm0, QWORD PTR _ret$[ebp+16]
	movq	QWORD PTR [eax+16], xmm0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1703 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@SK_GetDLLV:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	2
	push	OFFSET $SG298717
$LN203@SK_GetDLLV:

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1703 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$1:
	lea	ecx, DWORD PTR _ret$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_GetDLLVersionStr@@YG?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ENDP ; SK_GetDLLVersionStr
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszModule$ = 8						; size = 4
_szFunc$ = 12						; size = 4
?SK_GetProcAddress@@YAPAXPB_WPBD@Z PROC			; SK_GetProcAddress

; 1102 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 1103 :   HMODULE hMod = 
; 1104 :     GetModuleHandle (wszModule);

	push	DWORD PTR _wszModule$[ebp]
	call	DWORD PTR __imp__GetModuleHandleW@4

; 1105 : 
; 1106 :   if (hMod != nullptr)

	test	eax, eax
	je	SHORT $LN2@SK_GetProc

; 1107 :    return GetProcAddress (hMod, szFunc);

	push	DWORD PTR _szFunc$[ebp]
	push	eax
	call	DWORD PTR __imp__GetProcAddress@8

; 1110 : }

	pop	ebp
	ret	0
$LN2@SK_GetProc:

; 1108 : 
; 1109 :   return nullptr;

	xor	eax, eax

; 1110 : }

	pop	ebp
	ret	0
?SK_GetProcAddress@@YAPAXPB_WPBD@Z ENDP			; SK_GetProcAddress
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_dwLen$1 = -4						; size = 4
_wszInOut$ = 8						; size = 4
?SK_StripUserNameFromPathW@@YA_NPA_W@Z PROC		; SK_StripUserNameFromPathW

; 2998 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx

; 2999 :   static wchar_t wszUserName [MAX_PATH] = { };
; 3000 : 
; 3001 :   if (*wszUserName == L'\0')

	cmp	WORD PTR ?wszUserName@?1??SK_StripUserNameFromPathW@@YA_NPA_W@Z@4PA_WA, 0
	jne	SHORT $LN5@SK_StripUs

; 3002 :   {
; 3003 :                           DWORD dwLen = MAX_PATH;
; 3004 :     GetUserNameW (wszUserName, &dwLen);

	lea	eax, DWORD PTR _dwLen$1[ebp]
	mov	DWORD PTR _dwLen$1[ebp], 260		; 00000104H
	push	eax
	push	OFFSET ?wszUserName@?1??SK_StripUserNameFromPathW@@YA_NPA_W@Z@4PA_WA
	call	DWORD PTR __imp__GetUserNameW@8
$LN5@SK_StripUs:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	push	OFFSET ?wszUserName@?1??SK_StripUserNameFromPathW@@YA_NPA_W@Z@4PA_WA
	push	DWORD PTR _wszInOut$[ebp]
	call	DWORD PTR __imp__wcsstr
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 3008 :     wcsstr (wszInOut, wszUserName);

	mov	ecx, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 3010 :   if (pwszUserNameSubstr != nullptr)

	test	ecx, ecx
	je	SHORT $LN6@SK_StripUs

; 3011 :   {
; 3012 :     const size_t user_name_len =
; 3013 :       wcslen (wszUserName);

	push	esi
	mov	esi, OFFSET ?wszUserName@?1??SK_StripUserNameFromPathW@@YA_NPA_W@Z@4PA_WA
	lea	edx, DWORD PTR [esi+2]
$LL14@SK_StripUs:
	mov	ax, WORD PTR [esi]
	add	esi, 2
	test	ax, ax
	jne	SHORT $LL14@SK_StripUs
	sub	esi, edx
	sar	esi, 1

; 3014 : 
; 3015 :     for (size_t i = 0; i < user_name_len; i++)

	je	SHORT $LN3@SK_StripUs

; 3011 :   {
; 3012 :     const size_t user_name_len =
; 3013 :       wcslen (wszUserName);

	push	ebx
	push	edi
	mov	edi, DWORD PTR __imp__CharNextW@4
	mov	ebx, 42					; 0000002aH
$LL4@SK_StripUs:

; 3016 :     {
; 3017 :       *pwszUserNameSubstr = L'*';
; 3018 :        pwszUserNameSubstr = CharNextW (pwszUserNameSubstr);

	push	ecx
	mov	WORD PTR [ecx], bx
	call	edi
	mov	ecx, eax
	sub	esi, 1
	jne	SHORT $LL4@SK_StripUs
	pop	edi
	pop	ebx
$LN3@SK_StripUs:

; 3019 :     }
; 3020 : 
; 3021 :     return true;

	mov	al, 1
	pop	esi

; 3025 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SK_StripUs:

; 3022 :   }
; 3023 : 
; 3024 :   return false;

	xor	al, al

; 3025 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_StripUserNameFromPathW@@YA_NPA_W@Z ENDP		; SK_StripUserNameFromPathW
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_dwLen$1 = -4						; size = 4
_szInOut$ = 8						; size = 4
?SK_StripUserNameFromPathA@@YA_NPAD@Z PROC		; SK_StripUserNameFromPathA

; 2967 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx

; 2968 :   static char szUserName [MAX_PATH] = { };
; 2969 : 
; 2970 :   if (*szUserName == '\0')

	cmp	BYTE PTR ?szUserName@?1??SK_StripUserNameFromPathA@@YA_NPAD@Z@4PADA, 0
	jne	SHORT $LN5@SK_StripUs

; 2971 :   {
; 2972 :                          DWORD dwLen = MAX_PATH;
; 2973 :     GetUserNameA (szUserName, &dwLen);

	lea	eax, DWORD PTR _dwLen$1[ebp]
	mov	DWORD PTR _dwLen$1[ebp], 260		; 00000104H
	push	eax
	push	OFFSET ?szUserName@?1??SK_StripUserNameFromPathA@@YA_NPAD@Z@4PADA
	call	DWORD PTR __imp__GetUserNameA@8
$LN5@SK_StripUs:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 537  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

	push	OFFSET ?szUserName@?1??SK_StripUserNameFromPathA@@YA_NPAD@Z@4PADA
	push	DWORD PTR _szInOut$[ebp]
	call	DWORD PTR __imp__strstr
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2977 :     strstr (szInOut, szUserName);

	mov	ecx, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h

; 537  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2979 :   if (pszUserNameSubstr != nullptr)

	test	ecx, ecx
	je	SHORT $LN6@SK_StripUs

; 2980 :   {
; 2981 :     const size_t user_name_len =
; 2982 :       strlen (szUserName);

	push	esi
	mov	esi, OFFSET ?szUserName@?1??SK_StripUserNameFromPathA@@YA_NPAD@Z@4PADA
	lea	edx, DWORD PTR [esi+1]
$LL14@SK_StripUs:
	mov	al, BYTE PTR [esi]
	inc	esi
	test	al, al
	jne	SHORT $LL14@SK_StripUs
	sub	esi, edx

; 2983 : 
; 2984 :     for (size_t i = 0; i < user_name_len; i++)

	je	SHORT $LN3@SK_StripUs

; 2980 :   {
; 2981 :     const size_t user_name_len =
; 2982 :       strlen (szUserName);

	push	edi
	mov	edi, DWORD PTR __imp__CharNextA@4
$LL4@SK_StripUs:

; 2985 :     {
; 2986 :       *pszUserNameSubstr = '*';
; 2987 :        pszUserNameSubstr = CharNextA (pszUserNameSubstr);

	push	ecx
	mov	BYTE PTR [ecx], 42			; 0000002aH
	call	edi
	mov	ecx, eax
	sub	esi, 1
	jne	SHORT $LL4@SK_StripUs
	pop	edi
$LN3@SK_StripUs:

; 2988 :     }
; 2989 : 
; 2990 :     return true;

	mov	al, 1
	pop	esi

; 2994 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SK_StripUs:

; 2991 :   }
; 2992 : 
; 2993 :   return false;

	xor	al, al

; 2994 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_StripUserNameFromPathA@@YA_NPAD@Z ENDP		; SK_StripUserNameFromPathA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszDllFullName$ = -528					; size = 524
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_hDll$ = 12						; size = 4
?SK_GetModuleFullName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z PROC ; SK_GetModuleFullName

; 1114 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	esi

; 1115 :   wchar_t wszDllFullName [MAX_PATH + 2] = { };

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszDllFullName$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1116 :           wszDllFullName [  MAX_PATH  ] = { };

	xor	eax, eax
	mov	WORD PTR _wszDllFullName$[ebp+520], ax

; 1117 : 
; 1118 :   GetModuleFileName ( hDll,

	lea	eax, DWORD PTR _wszDllFullName$[ebp]
	push	259					; 00000103H
	push	eax
	push	DWORD PTR _hDll$[ebp]
	call	DWORD PTR __imp__GetModuleFileNameW@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	ecx, DWORD PTR _wszDllFullName$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
$LL29@SK_GetModu:

; 289  : 		return (_CSTD wcslen(_First));

	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL29@SK_GetModu
	sub	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	lea	eax, DWORD PTR _wszDllFullName$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	eax
	mov	ecx, esi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1122 :   return wszDllFullName;

	mov	eax, esi
	pop	esi

; 1123 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetModuleFullName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ENDP ; SK_GetModuleFullName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszDllFullName$ = -528					; size = 524
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_hDll$ = 12						; size = 4
?SK_GetModuleName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z PROC ; SK_GetModuleName

; 1127 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H

; 1128 :   wchar_t wszDllFullName [MAX_PATH + 2] = { };

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszDllFullName$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 1129 :           wszDllFullName [  MAX_PATH  ] = { };

	xor	eax, eax
	mov	WORD PTR _wszDllFullName$[ebp+520], ax

; 1130 : 
; 1131 :   GetModuleFileName ( hDll,

	lea	eax, DWORD PTR _wszDllFullName$[ebp]
	push	259					; 00000103H
	push	eax
	push	DWORD PTR _hDll$[ebp]
	call	DWORD PTR __imp__GetModuleFileNameW@12
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	lea	eax, DWORD PTR _wszDllFullName$[ebp]
	push	92					; 0000005cH
	push	eax
	call	DWORD PTR __imp__wcsrchr
	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1138 :   if (wszShort == nullptr)

	test	eax, eax
	jne	SHORT $LN2@SK_GetModu

; 1139 :     wszShort = wszDllFullName;

	lea	edx, DWORD PTR _wszDllFullName$[ebp]

; 1140 :   else

	jmp	SHORT $LN3@SK_GetModu
$LN2@SK_GetModu:

; 1141 :     wszShort = CharNextW (wszShort);

	push	eax
	call	DWORD PTR __imp__CharNextW@4
	mov	edx, eax
$LN3@SK_GetModu:
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, edx

; 326  : 		_Left = _Right;

	xor	eax, eax
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	edi, DWORD PTR [ecx+2]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
$LL33@SK_GetModu:

; 289  : 		return (_CSTD wcslen(_First));

	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL33@SK_GetModu
	sub	ecx, edi
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edx
	mov	ecx, esi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1143 :   return wszShort;

	mov	eax, esi
	pop	esi

; 1144 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetModuleName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ENDP ; SK_GetModuleName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_pReturn$ = 12						; size = 4
?SK_GetCallerName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAX@Z PROC ; SK_GetCallerName

; 1271 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx

; 1272 :   return SK_GetModuleName (SK_GetCallingDLL (pReturn));

	push	DWORD PTR _pReturn$[ebp]
	mov	DWORD PTR $T1[ebp], 0
	call	?SK_GetCallingDLL@@YAPAUHINSTANCE__@@PAX@Z ; SK_GetCallingDLL
	push	eax
	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	?SK_GetModuleName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ; SK_GetModuleName
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 12					; 0000000cH

; 1273 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetCallerName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAX@Z ENDP ; SK_GetCallerName
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_hCallingMod$ = -4					; size = 4
_pReturn$ = 8						; size = 4
?SK_GetCallingDLL@@YAPAUHINSTANCE__@@PAX@Z PROC		; SK_GetCallingDLL

; 1251 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi

; 1252 :   HMODULE hCallingMod = nullptr;
; 1253 : 
; 1254 :   if (SK_TLS_Bottom ()->known_modules.contains (pReturn, &hCallingMod))

	mov	esi, DWORD PTR _pReturn$[ebp]
	lea	eax, DWORD PTR _hCallingMod$[ebp]
	push	eax
	push	esi
	mov	DWORD PTR _hCallingMod$[ebp], 0
	call	?SK_TLS_Bottom@@YGPAUSK_TLS@@XZ		; SK_TLS_Bottom
	mov	ecx, eax
	call	?contains@SK_ModuleAddrMap@@QAE_NPAXPAPAUHINSTANCE__@@@Z ; SK_ModuleAddrMap::contains
	test	al, al
	jne	SHORT $LN4@SK_GetCall

; 1255 :   {
; 1256 :     return hCallingMod;
; 1257 :   }
; 1258 : 
; 1259 :   GetModuleHandleEx ( GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT |

	lea	eax, DWORD PTR _hCallingMod$[ebp]
	push	eax
	push	esi
	push	6
	call	DWORD PTR __imp__GetModuleHandleExW@12

; 1260 :                       GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS,
; 1261 :                         static_cast <const wchar_t *> (pReturn),
; 1262 :                           &hCallingMod );
; 1263 : 
; 1264 :   SK_TLS_Bottom ()->known_modules.insert (pReturn, hCallingMod);

	push	DWORD PTR _hCallingMod$[ebp]
	push	esi
	call	?SK_TLS_Bottom@@YGPAUSK_TLS@@XZ		; SK_TLS_Bottom
	mov	ecx, eax
	call	?insert@SK_ModuleAddrMap@@QAEXPAXPAUHINSTANCE__@@@Z ; SK_ModuleAddrMap::insert
$LN4@SK_GetCall:

; 1265 : 
; 1266 :   return hCallingMod;

	mov	eax, DWORD PTR _hCallingMod$[ebp]
	pop	esi

; 1267 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetCallingDLL@@YAPAUHINSTANCE__@@PAX@Z ENDP		; SK_GetCallingDLL
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
?SK_GetDLLConfig@@YAPAUiSK_INI@@XZ PROC			; SK_GetDLLConfig

; 1206 :   extern iSK_INI* dll_ini;
; 1207 :   return dll_ini;

	mov	eax, DWORD PTR ?dll_ini@@3PAUiSK_INI@@A	; dll_ini

; 1208 : }

	ret	0
?SK_GetDLLConfig@@YAPAUiSK_INI@@XZ ENDP			; SK_GetDLLConfig
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_bWOW64$1 = -4						; size = 4
?SK_GetSystemDirectory@@YAPB_WXZ PROC			; SK_GetSystemDirectory

; 2426 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 9003 :     return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);

	mov	ecx, 1
	mov	edx, OFFSET ?init@?1??SK_GetSystemDirectory@@YAPB_WXZ@4KC
	xor	eax, eax
	lock	 cmpxchg DWORD PTR [edx], ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2430 :   if (! InterlockedCompareExchange (&init, TRUE, FALSE))

	test	eax, eax
	jne	SHORT $LN8@SK_GetSyst

; 2431 :   {
; 2432 : #ifdef _WIN64
; 2433 :     GetSystemDirectory (host_proc.wszSystemDir, MAX_PATH);
; 2434 : #else
; 2435 :     HANDLE hProc = GetCurrentProcess ();

	call	DWORD PTR __imp__GetCurrentProcess@0

; 2436 : 
; 2437 :     BOOL   bWOW64;
; 2438 :     ::IsWow64Process (hProc, &bWOW64);

	lea	ecx, DWORD PTR _bWOW64$1[ebp]
	push	ecx
	push	eax
	call	DWORD PTR __imp__IsWow64Process@8

; 2439 : 
; 2440 :     if (bWOW64)

	cmp	DWORD PTR _bWOW64$1[ebp], 0

; 2441 :       GetSystemWow64Directory (host_proc.wszSystemDir, MAX_PATH);

	push	260					; 00000104H
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+4160
	je	SHORT $LN3@SK_GetSyst
	call	DWORD PTR __imp__GetSystemWow64DirectoryW@8

; 2444 : #endif
; 2445 :   }
; 2446 : 
; 2447 :   return host_proc.wszSystemDir;

	mov	eax, OFFSET ?host_proc@@3Usk_host_process_s@@A+4160

; 2448 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@SK_GetSyst:

; 2442 :     else
; 2443 :       GetSystemDirectory      (host_proc.wszSystemDir, MAX_PATH);

	call	DWORD PTR __imp__GetSystemDirectoryW@8
$LN8@SK_GetSyst:

; 2444 : #endif
; 2445 :   }
; 2446 : 
; 2447 :   return host_proc.wszSystemDir;

	mov	eax, OFFSET ?host_proc@@3Usk_host_process_s@@A+4160

; 2448 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetSystemDirectory@@YAPB_WXZ ENDP			; SK_GetSystemDirectory
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_FromFileData$ = -608					; size = 592
__$EHRec$ = -12						; size = 12
_from$ = 8						; size = 24
_to$ = 32						; size = 24
?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z PROC ; SK_FullCopy

; 300  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 596				; 00000254H
	push	ebx
	push	esi
	push	edi

; 302  :   SK_SetNormalFileAttribs (to);

	sub	esp, 24					; 00000018H
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2174 : 		assign(_Right, 0, npos);

	push	-1

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 7

; 2174 : 		assign(_Right, 0, npos);

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2174 : 		assign(_Right, 0, npos);

	lea	eax, DWORD PTR _to$[ebp]
	push	eax
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 302  :   SK_SetNormalFileAttribs (to);

	call	?SK_SetNormalFileAttribs@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; SK_SetNormalFileAttribs
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _to$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _to$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _to$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 304  :   DeleteFile (to.c_str   ());

	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _to$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _to$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 305  :   CopyFile   (from.c_str (), to.c_str (), FALSE);

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	ecx, DWORD PTR _to$[ebp]
	lea	eax, DWORD PTR _from$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _from$[ebp+20], 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 305  :   CopyFile   (from.c_str (), to.c_str (), FALSE);

	push	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _from$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 305  :   CopyFile   (from.c_str (), to.c_str (), FALSE);

	push	eax
	call	DWORD PTR __imp__CopyFileW@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _from$[ebp+20], 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 309  :     FindFirstFile (from.c_str (), &FromFileData);

	lea	ecx, DWORD PTR _FromFileData$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _from$[ebp]
	cmovae	eax, DWORD PTR _from$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 309  :     FindFirstFile (from.c_str (), &FromFileData);

	push	ecx
	push	eax
	call	DWORD PTR __imp__FindFirstFileW@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _to$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	esi, DWORD PTR _to$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 311  :   CHandle hTo (

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	esi, DWORD PTR _to$[ebp]
	lea	edi, DWORD PTR _to$[ebp]
	cmovae	edi, DWORD PTR _to$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 309  :     FindFirstFile (from.c_str (), &FromFileData);

	mov	ebx, eax

; 311  :   CHandle hTo (

	push	esi
	call	DWORD PTR __imp__GetFileAttributesW@4
	push	eax
	push	3
	push	0
	push	3
	push	-1073741824				; c0000000H
	push	edi
	call	DWORD PTR __imp__CreateFileW@28
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 323  :   SetFileTime ( hTo,

	lea	eax, DWORD PTR _FromFileData$[ebp+20]
	push	eax
	lea	eax, DWORD PTR _FromFileData$[ebp+12]
	push	eax
	lea	eax, DWORD PTR _FromFileData$[ebp+4]
	push	eax
	push	esi
	call	DWORD PTR __imp__SetFileTime@16

; 324  :                   &FromFileData.ftCreationTime,
; 325  :                     &FromFileData.ftLastAccessTime,
; 326  :                       &FromFileData.ftLastWriteTime );
; 327  : 
; 328  :   FindClose   (hFrom);

	push	ebx
	call	DWORD PTR __imp__FindClose@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN169@SK_FullCop

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN169@SK_FullCop:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR _from$[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN175@SK_FullCop
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR _from$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN175@SK_FullCop:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _from$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR _from$[ebp], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR _to$[ebp+20]

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _from$[ebp+20], 7

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN205@SK_FullCop
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR _to$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN205@SK_FullCop:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 329  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z$0:
	lea	ecx, DWORD PTR _to$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z$1:
	lea	ecx, DWORD PTR _from$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_FullCopy@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0@Z ENDP ; SK_FullCopy
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszTemp$1 = -1144					; size = 520
_OldFileData$ = -624					; size = 592
$T2 = -32						; size = 24
_hOldFind$1$ = -4					; size = 4
_wszOld$ = 8						; size = 4
_wszNew$ = 12						; size = 4
?SK_MoveFileNoFail@@YAXPB_W0@Z PROC			; SK_MoveFileNoFail

; 258  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 1144				; 00000478H
	push	ebx
	push	esi
	push	edi

; 259  :   WIN32_FIND_DATA OldFileData  = { };

	push	592					; 00000250H
	lea	eax, DWORD PTR _OldFileData$[ebp]
	push	0
	push	eax
	call	_memset

; 260  :   HANDLE          hOldFind     =
; 261  :     FindFirstFile (wszOld, &OldFileData);

	mov	ebx, DWORD PTR _wszOld$[ebp]
	lea	eax, DWORD PTR _OldFileData$[ebp]
	add	esp, 12					; 0000000cH
	push	eax
	push	ebx
	call	DWORD PTR __imp__FindFirstFileW@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edi, DWORD PTR _wszNew$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 264  :   SK_SetNormalFileAttribs (wszNew);

	sub	esp, 24					; 00000018H
	mov	edx, esp
	mov	DWORD PTR _hOldFind$1$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, edi

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edx+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	esi, DWORD PTR [ecx+2]

; 326  : 		_Left = _Right;

	mov	WORD PTR [edx], ax
	npad	8
$LL91@SK_MoveFil:

; 289  : 		return (_CSTD wcslen(_First));

	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL91@SK_MoveFil
	sub	ecx, esi
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edi
	mov	ecx, edx
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 264  :   SK_SetNormalFileAttribs (wszNew);

	call	?SK_SetNormalFileAttribs@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ; SK_SetNormalFileAttribs
	add	esp, 24					; 00000018H

; 265  : 
; 266  :   if (! MoveFileExW ( wszOld,

	push	1
	push	edi
	push	ebx
	mov	ebx, DWORD PTR __imp__MoveFileExW@12
	call	ebx
	test	eax, eax
	jne	SHORT $LN2@SK_MoveFil

; 267  :                         wszNew,
; 268  :                           MOVEFILE_REPLACE_EXISTING ) )
; 269  :   {
; 270  :     wchar_t wszTemp [MAX_PATH] = { };

	push	520					; 00000208H
	push	eax
	lea	eax, DWORD PTR _wszTemp$1[ebp]
	push	eax
	call	_memset

; 271  :     GetTempFileNameW (SK_SYS_GetInstallPath ().c_str (), L"SKI", timeGetTime (), wszTemp);

	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?SK_SYS_GetInstallPath@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_SYS_GetInstallPath
	mov	esi, eax
	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN46@SK_MoveFil
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	esi, DWORD PTR [esi]
$LN46@SK_MoveFil:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 271  :     GetTempFileNameW (SK_SYS_GetInstallPath ().c_str (), L"SKI", timeGetTime (), wszTemp);

	lea	eax, DWORD PTR _wszTemp$1[ebp]
	push	eax
	call	DWORD PTR __imp__timeGetTime@0
	push	eax
	push	OFFSET $SG183322
	push	esi
	call	DWORD PTR __imp__GetTempFileNameW@16
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T2[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN55@SK_MoveFil
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T2[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN55@SK_MoveFil:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 273  :     MoveFileExW ( wszNew, wszTemp, MOVEFILE_REPLACE_EXISTING );

	push	1
	lea	eax, DWORD PTR _wszTemp$1[ebp]
	push	eax
	push	edi
	call	ebx

; 274  :     MoveFileExW ( wszOld, wszNew,  MOVEFILE_REPLACE_EXISTING );

	push	1
	push	edi
	push	DWORD PTR _wszOld$[ebp]
	call	ebx
$LN2@SK_MoveFil:

; 275  :   }
; 276  : 
; 277  :   // Preserve file times
; 278  :   if (hOldFind != INVALID_HANDLE_VALUE)

	mov	ebx, DWORD PTR _hOldFind$1$[ebp]
	cmp	ebx, -1
	je	SHORT $LN89@SK_MoveFil

; 279  :   {
; 280  :     CHandle hNewFile ( CreateFile ( wszNew,

	push	0
	push	edi
	call	DWORD PTR __imp__GetFileAttributesW@4
	push	eax
	push	3
	push	0
	push	3
	push	-1073741824				; c0000000H
	push	edi
	call	DWORD PTR __imp__CreateFileW@28

; 288  :     FindClose         (hOldFind);

	push	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 288  :     FindClose         (hOldFind);

	call	DWORD PTR __imp__FindClose@4

; 289  :     SetFileTime       ( hNewFile,

	lea	eax, DWORD PTR _OldFileData$[ebp+20]
	push	eax
	lea	eax, DWORD PTR _OldFileData$[ebp+12]
	push	eax
	lea	eax, DWORD PTR _OldFileData$[ebp+4]
	push	eax
	push	esi
	call	DWORD PTR __imp__SetFileTime@16

; 290  :                           &OldFileData.ftCreationTime,
; 291  :                             &OldFileData.ftLastAccessTime,
; 292  :                               &OldFileData.ftLastWriteTime );
; 293  :     SetFileAttributes (wszNew, OldFileData.dwFileAttributes);

	push	DWORD PTR _OldFileData$[ebp]
	push	edi
	call	DWORD PTR __imp__SetFileAttributesW@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN89@SK_MoveFil

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN89@SK_MoveFil:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 295  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?SK_MoveFileNoFail@@YAXPB_W0@Z ENDP			; SK_MoveFileNoFail
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_file$ = 8						; size = 24
?SK_SetNormalFileAttribs@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC ; SK_SetNormalFileAttribs

; 335  : {

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _file$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _file$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 336  :   SetFileAttributes (file.c_str (), FILE_ATTRIBUTE_NORMAL);

	push	128					; 00000080H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _file$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 336  :   SetFileAttributes (file.c_str (), FILE_ATTRIBUTE_NORMAL);

	push	eax
	call	DWORD PTR __imp__SetFileAttributesW@8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR _file$[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN27@SK_SetNorm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR _file$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN27@SK_SetNorm:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 337  : }

	pop	ebp
	ret	0
?SK_SetNormalFileAttribs@@YAXV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z ENDP ; SK_SetNormalFileAttribs
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_str$ = -24						; size = 24
_szInOut$ = 8						; size = 4
?SK_FixSlashesA@@YAXPAD@Z PROC				; SK_FixSlashesA

; 2952 : { 

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	esi, DWORD PTR _szInOut$[ebp]
	mov	ecx, esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _str$[ebp+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _str$[ebp+20], 15		; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR _str$[ebp], 0

; 480  : 		return (_CSTD strlen(_First));

	lea	edx, DWORD PTR [ecx+1]
$LL194@SK_FixSlas:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL194@SK_FixSlas
	sub	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	lea	ecx, DWORD PTR _str$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ebx, DWORD PTR _str$[ebp+20]

; 1614 : 		return (_Large_string_engaged()

	lea	edx, DWORD PTR _str$[ebp]
	mov	edi, DWORD PTR _str$[ebp]
	lea	eax, DWORD PTR _str$[ebp]

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	ecx, DWORD PTR _str$[ebp+16]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 16					; 00000010H

; 1614 : 		return (_Large_string_engaged()

	cmovae	edx, edi
	cmovae	eax, edi

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	add	ecx, edx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2955 :   for ( auto&& it : str )

	cmp	eax, ecx
	je	SHORT $LN3@SK_FixSlas
$LL4@SK_FixSlas:

; 2956 :   {
; 2957 :     if (it == '/')

	cmp	BYTE PTR [eax], 47			; 0000002fH
	jne	SHORT $LN2@SK_FixSlas

; 2958 :       it = '\\';

	mov	BYTE PTR [eax], 92			; 0000005cH
$LN2@SK_FixSlas:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1246 : 		++_Ptr;

	inc	eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2955 :   for ( auto&& it : str )

	cmp	eax, ecx
	jne	SHORT $LL4@SK_FixSlas
	mov	ebx, DWORD PTR _str$[ebp+20]
	mov	edi, DWORD PTR _str$[ebp]
$LN3@SK_FixSlas:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 16					; 00000010H

; 1621 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _str$[ebp]
	cmovae	ecx, edi
$LL7@SK_FixSlas:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2961 :   strcpy (szInOut, str.c_str ());

	mov	al, BYTE PTR [ecx]
	lea	ecx, DWORD PTR [ecx+1]
	mov	BYTE PTR [esi], al
	lea	esi, DWORD PTR [esi+1]
	test	al, al
	jne	SHORT $LL7@SK_FixSlas
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 16					; 00000010H

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN178@SK_FixSlas

; 3609 : 			{
; 3610 : 			pointer _Ptr = _My_data._Bx._Ptr;
; 3611 : 			auto& _Al = this->_Getal();
; 3612 : 			_Al.destroy(_STD addressof(_My_data._Bx._Ptr));
; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	lea	eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN173@SK_FixSlas

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	BYTE PTR _str$[ebp], 31			; 0000001fH
	je	SHORT $LN174@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN197@SK_FixSlas:
$LN174@SK_FixSlas:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [edi-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, edi
	jb	SHORT $LN175@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN198@SK_FixSlas:
$LN175@SK_FixSlas:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	edi, eax
	cmp	edi, 4
	jae	SHORT $LN176@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN199@SK_FixSlas:
$LN176@SK_FixSlas:

; 126  : 			<= _Ptr_user - _Ptr_container);
; 127  :  #endif /* _DEBUG */
; 128  : 
; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	edi, 35					; 00000023H
	jbe	SHORT $LN177@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN200@SK_FixSlas:
$LN177@SK_FixSlas:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	edi, eax
$LN173@SK_FixSlas:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN178@SK_FixSlas:
	pop	edi
	pop	esi
	pop	ebx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2962 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN196@SK_FixSlas:
?SK_FixSlashesA@@YAXPAD@Z ENDP				; SK_FixSlashesA
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_str$ = -36						; size = 24
__$EHRec$ = -12						; size = 12
__Pred$ = 8						; size = 1
_szInOut$ = 8						; size = 4
?SK_StripTrailingSlashesA@@YAXPAD@Z PROC		; SK_StripTrailingSlashesA

; 2928 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_StripTrailingSlashesA@@YAXPAD@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	edi, DWORD PTR _szInOut$[ebp]
	mov	ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _str$[ebp+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _str$[ebp+20], 15		; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR _str$[ebp], 0

; 480  : 		return (_CSTD strlen(_First));

	lea	edx, DWORD PTR [ecx+1]
	npad	6
$LL310@SK_StripTr:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL310@SK_StripTr
	sub	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	edi
	lea	ecx, DWORD PTR _str$[ebp]
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ebx, DWORD PTR _str$[ebp+20]

; 1614 : 		return (_Large_string_engaged()

	lea	esi, DWORD PTR _str$[ebp]
	mov	edx, DWORD PTR _str$[ebp]
	lea	eax, DWORD PTR _str$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 16					; 00000010H
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2941 :   std::string str (szInOut);

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _str$[ebp]
	cmovae	esi, edx

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	add	esi, DWORD PTR _str$[ebp+16]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 16					; 00000010H

; 1614 : 		return (_Large_string_engaged()

	cmovae	eax, edx

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	add	eax, DWORD PTR _str$[ebp+16]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 16					; 00000010H

; 1614 : 		return (_Large_string_engaged()

	cmovae	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	lea	edx, DWORD PTR __Pred$[ebp]
	push	edx
	push	eax
	push	ecx
	call	??$_Unique_unchecked@PADUtest_slashes@?1??SK_StripTrailingSlashesA@@YAXPAD@Z@@std@@YAPADPAD0AAUtest_slashes@?1??SK_StripTrailingSlashesA@@YAX0@Z@@Z ; std::_Unique_unchecked<char *,`SK_StripTrailingSlashesA'::`2'::test_slashes>
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _str$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _str$[ebp+20], 16		; 00000010H

; 1614 : 		return (_Large_string_engaged()

	cmovae	ecx, DWORD PTR _str$[ebp]

; 1319 : 		return (_Ptr - _Right._Ptr);

	sub	esi, eax
	sub	eax, ecx

; 2620 : 		erase(_Count, _Last - _First);

	lea	ecx, DWORD PTR _str$[ebp]
	push	esi
	push	eax
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	edx, DWORD PTR _str$[ebp+20]

; 1621 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _str$[ebp]
	mov	esi, DWORD PTR _str$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	edx, 16					; 00000010H

; 1621 : 		return (_Large_string_engaged()

	cmovae	ecx, esi
$LL3@SK_StripTr:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2947 :   strcpy (szInOut, str.c_str ());

	mov	al, BYTE PTR [ecx]
	lea	ecx, DWORD PTR [ecx+1]
	mov	BYTE PTR [edi], al
	lea	edi, DWORD PTR [edi+1]
	test	al, al
	jne	SHORT $LL3@SK_StripTr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	edx, 16					; 00000010H

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN281@SK_StripTr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	lea	eax, DWORD PTR [edx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	esi
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN281@SK_StripTr:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2948 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_StripTrailingSlashesA@@YAXPAD@Z$0:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__ehhandler$?SK_StripTrailingSlashesA@@YAXPAD@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_StripTrailingSlashesA@@YAXPAD@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_StripTrailingSlashesA@@YAXPAD@Z ENDP		; SK_StripTrailingSlashesA
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wstr$ = -24						; size = 24
_wszInOut$ = 8						; size = 4
?SK_FixSlashesW@@YAXPA_W@Z PROC				; SK_FixSlashesW

; 2914 : { 

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	ebx
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	esi, DWORD PTR _wszInOut$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _wstr$[ebp+16], 0
	push	edi

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _wstr$[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR _wstr$[ebp], ax

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
$LL194@SK_FixSlas:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL194@SK_FixSlas
	sub	ecx, edx
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	lea	ecx, DWORD PTR _wstr$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ebx, DWORD PTR _wstr$[ebp+20]

; 1614 : 		return (_Large_string_engaged()

	lea	edx, DWORD PTR _wstr$[ebp]
	mov	edi, DWORD PTR _wstr$[ebp]
	lea	eax, DWORD PTR _wstr$[ebp]

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	ecx, DWORD PTR _wstr$[ebp+16]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 8

; 1614 : 		return (_Large_string_engaged()

	cmovae	edx, edi
	cmovae	eax, edi

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	lea	ecx, DWORD PTR [edx+ecx*2]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2917 :   for ( auto&& it : wstr )

	cmp	eax, ecx
	je	SHORT $LN3@SK_FixSlas
	mov	edx, 92					; 0000005cH
$LL4@SK_FixSlas:

; 2918 :   {
; 2919 :     if (it == L'/')

	cmp	WORD PTR [eax], 47			; 0000002fH
	jne	SHORT $LN2@SK_FixSlas

; 2920 :       it = L'\\';

	mov	WORD PTR [eax], dx
$LN2@SK_FixSlas:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1246 : 		++_Ptr;

	add	eax, 2
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2917 :   for ( auto&& it : wstr )

	cmp	eax, ecx
	jne	SHORT $LL4@SK_FixSlas
	mov	ebx, DWORD PTR _wstr$[ebp+20]
	mov	edi, DWORD PTR _wstr$[ebp]
$LN3@SK_FixSlas:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 8

; 1621 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _wstr$[ebp]
	cmovae	ecx, edi
$LL7@SK_FixSlas:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2923 :   wcscpy (wszInOut, wstr.c_str ());

	movzx	eax, WORD PTR [ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR [esi], ax
	lea	esi, DWORD PTR [esi+2]
	test	ax, ax
	jne	SHORT $LL7@SK_FixSlas
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN178@SK_FixSlas

; 3609 : 			{
; 3610 : 			pointer _Ptr = _My_data._Bx._Ptr;
; 3611 : 			auto& _Al = this->_Getal();
; 3612 : 			_Al.destroy(_STD addressof(_My_data._Bx._Ptr));
; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	lea	eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN172@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN197@SK_FixSlas:
$LN172@SK_FixSlas:

; 99   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN173@SK_FixSlas

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	test	BYTE PTR _wstr$[ebp], 31		; 0000001fH
	je	SHORT $LN174@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN198@SK_FixSlas:
$LN174@SK_FixSlas:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	eax, DWORD PTR [edi-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	eax, edi
	jb	SHORT $LN175@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN199@SK_FixSlas:
$LN175@SK_FixSlas:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	edi, eax
	cmp	edi, 4
	jae	SHORT $LN176@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN200@SK_FixSlas:
$LN176@SK_FixSlas:

; 126  : 			<= _Ptr_user - _Ptr_container);
; 127  :  #endif /* _DEBUG */
; 128  : 
; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	edi, 35					; 00000023H
	jbe	SHORT $LN177@SK_FixSlas
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN201@SK_FixSlas:
$LN177@SK_FixSlas:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	edi, eax
$LN173@SK_FixSlas:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	edi
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN178@SK_FixSlas:
	pop	edi
	pop	esi
	pop	ebx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2924 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN196@SK_FixSlas:
?SK_FixSlashesW@@YAXPA_W@Z ENDP				; SK_FixSlashesW
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wstr$ = -40						; size = 24
__Pred$ = -16						; size = 1
__$EHRec$ = -12						; size = 12
_wszInOut$ = 8						; size = 4
?SK_StripTrailingSlashesW@@YAXPA_W@Z PROC		; SK_StripTrailingSlashesW

; 2890 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_StripTrailingSlashesW@@YAXPA_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 28					; 0000001cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR _wszInOut$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax
	mov	WORD PTR _wstr$[ebp], ax

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _wstr$[ebp+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _wstr$[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	esi, DWORD PTR [eax+2]
	npad	5
$LL310@SK_StripTr:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL310@SK_StripTr
	sub	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	lea	ecx, DWORD PTR _wstr$[ebp]
	push	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ebx, DWORD PTR _wstr$[ebp+20]

; 1614 : 		return (_Large_string_engaged()

	lea	esi, DWORD PTR _wstr$[ebp]

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	eax, DWORD PTR _wstr$[ebp+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	lea	edx, DWORD PTR __Pred$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	mov	edi, DWORD PTR _wstr$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	push	edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	cmovae	esi, edi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2903 :   std::wstring wstr (wszInOut);

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	lea	ecx, DWORD PTR [eax+eax]
	add	esi, ecx

; 1614 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _wstr$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 8

; 1614 : 		return (_Large_string_engaged()

	cmovae	eax, edi

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	add	eax, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ebx, 8

; 1614 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _wstr$[ebp]
	cmovae	ecx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\algorithm

; 1451 : 	return (_Rechecked(_First,

	push	eax
	push	ecx
	call	??$_Unique_unchecked@PA_WUtest_slashes@?1??SK_StripTrailingSlashesW@@YAXPA_W@Z@@std@@YAPA_WPA_W0AAUtest_slashes@?1??SK_StripTrailingSlashesW@@YAX0@Z@@Z ; std::_Unique_unchecked<wchar_t *,`SK_StripTrailingSlashesW'::`2'::test_slashes>
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _wstr$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _wstr$[ebp+20], 8

; 1614 : 		return (_Large_string_engaged()

	cmovae	ecx, DWORD PTR _wstr$[ebp]

; 1319 : 		return (_Ptr - _Right._Ptr);

	sub	esi, eax
	sub	eax, ecx
	sar	esi, 1

; 2620 : 		erase(_Count, _Last - _First);

	push	esi

; 1319 : 		return (_Ptr - _Right._Ptr);

	sar	eax, 1

; 2620 : 		erase(_Count, _Last - _First);

	lea	ecx, DWORD PTR _wstr$[ebp]
	push	eax
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	esi, DWORD PTR _wstr$[ebp+20]

; 1621 : 		return (_Large_string_engaged()

	lea	edx, DWORD PTR _wstr$[ebp]
	mov	edi, DWORD PTR _wstr$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	esi, 8
	mov	ecx, DWORD PTR _wszInOut$[ebp]

; 1621 : 		return (_Large_string_engaged()

	cmovae	edx, edi
	pop	ebx
	npad	6
$LL3@SK_StripTr:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2909 :   wcscpy (wszInOut, wstr.c_str ());

	movzx	eax, WORD PTR [edx]
	lea	edx, DWORD PTR [edx+2]
	mov	WORD PTR [ecx], ax
	lea	ecx, DWORD PTR [ecx+2]
	test	ax, ax
	jne	SHORT $LL3@SK_StripTr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	esi, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN281@SK_StripTr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	lea	eax, DWORD PTR [esi+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	edi
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN281@SK_StripTr:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2910 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_StripTrailingSlashesW@@YAXPA_W@Z$0:
	lea	ecx, DWORD PTR _wstr$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?SK_StripTrailingSlashesW@@YAXPA_W@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_StripTrailingSlashesW@@YAXPA_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_StripTrailingSlashesW@@YAXPA_W@Z ENDP		; SK_StripTrailingSlashesW
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Format$ = 12						; size = 4
?SK_FormatStringW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QB_WZZ PROC ; SK_FormatStringW

; 2862 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi

; 2863 :   int len = 0;
; 2864 : 
; 2865 :   va_list   _ArgList;
; 2866 :   va_start (_ArgList, _Format);
; 2867 :   {
; 2868 :     len = _vsnwprintf (nullptr, 0, _Format, _ArgList);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR $T1[ebp], 0
	push	eax
	push	DWORD PTR __Format$[ebp]
	push	0
	push	0
	call	__vsnwprintf

; 2869 :   }
; 2870 :   va_end (_ArgList);
; 2871 : 
; 2872 :   auto* out = new wchar_t [len + 1] { };

	xor	ebx, ebx
	inc	eax
	mov	ecx, 2
	mul	ecx
	seto	bl
	neg	ebx
	or	ebx, eax
	push	ebx
	call	??_U@YAPAXI@Z				; operator new[]
	mov	esi, eax
	add	esp, 20					; 00000014H
	test	esi, esi
	je	SHORT $LN3@SK_FormatS
	push	ebx
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@SK_FormatS
$LN3@SK_FormatS:
	xor	esi, esi
$LN4@SK_FormatS:

; 2876 :     len = _vswprintf (out, _Format, _ArgList);

	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	DWORD PTR __Format$[ebp]
	push	esi
	call	__vswprintf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2876 :     len = _vswprintf (out, _Format, _ArgList);

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edi], ax
	npad	5
$LL31@SK_FormatS:

; 289  : 		return (_CSTD wcslen(_First));

	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL31@SK_FormatS
	sub	ecx, edx
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	mov	ecx, edi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2882 :   delete [] out;

	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2883 : 
; 2884 :   return wstr_out;

	mov	eax, edi
	pop	edi
	pop	esi
	pop	ebx

; 2885 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_FormatStringW@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QB_WZZ ENDP ; SK_FormatStringW
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
__Format$ = 12						; size = 4
?SK_FormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBDZZ PROC ; SK_FormatString

; 2834 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi

; 2835 :   int len = 0;
; 2836 : 
; 2837 :   va_list   _ArgList;
; 2838 :   va_start (_ArgList, _Format);
; 2839 :   {
; 2840 :     len = vsnprintf (nullptr, 0, _Format, _ArgList);

	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR $T1[ebp], 0
	push	eax
	push	DWORD PTR __Format$[ebp]
	push	0
	push	0
	call	_vsnprintf

; 2841 :   }
; 2842 :   va_end (_ArgList);
; 2843 : 
; 2844 :   auto* out = new char [len + 1] { };

	lea	edi, DWORD PTR [eax+1]
	push	edi
	call	??_U@YAPAXI@Z				; operator new[]
	mov	esi, eax
	add	esp, 20					; 00000014H
	test	esi, esi
	je	SHORT $LN3@SK_FormatS
	push	edi
	push	0
	push	esi
	call	_memset
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN4@SK_FormatS
$LN3@SK_FormatS:
	xor	esi, esi
$LN4@SK_FormatS:

; 2848 :     len = vsprintf (out, _Format, _ArgList);

	lea	eax, DWORD PTR __Format$[ebp+4]
	push	eax
	push	DWORD PTR __Format$[ebp]
	push	esi
	call	_vsprintf
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	ecx, esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2848 :     len = vsprintf (out, _Format, _ArgList);

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [edi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	edx, DWORD PTR [ecx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [edi+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [edi], 0
	npad	6
$LL31@SK_FormatS:

; 480  : 		return (_CSTD strlen(_First));

	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL31@SK_FormatS
	sub	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	mov	ecx, edi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2854 :   delete [] out;

	push	esi
	call	??_V@YAXPAX@Z				; operator delete[]
	add	esp, 4

; 2855 : 
; 2856 :   return str_out;

	mov	eax, edi
	pop	edi
	pop	esi

; 2857 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_FormatString@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBDZZ ENDP ; SK_FormatString
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_in$ = 12						; size = 24
?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z PROC ; SK_UTF8ToWideChar

; 69   : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _in$[ebp+20], 16		; 00000010H

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 70   :   int len = MultiByteToWideChar ( CP_UTF8, 0x00, in.c_str (), -1, nullptr, 0 );

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 70   :   int len = MultiByteToWideChar ( CP_UTF8, 0x00, in.c_str (), -1, nullptr, 0 );

	push	0
	push	-1
	push	eax
	push	0
	push	65001					; 0000fde9H
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	call	DWORD PTR __imp__MultiByteToWideChar@24
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 70   :   int len = MultiByteToWideChar ( CP_UTF8, 0x00, in.c_str (), -1, nullptr, 0 );

	mov	edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3041 : 		if (_Newsize <= this->_Mysize())

	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR $T2[ebp], 1
	cmp	edi, ecx
	ja	SHORT $LN48@SK_UTF8ToW

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN70@SK_UTF8ToW
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3045 : 		else

	jmp	SHORT $LN49@SK_UTF8ToW
$LN70@SK_UTF8ToW:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3045 : 		else

	jmp	SHORT $LN49@SK_UTF8ToW
$LN48@SK_UTF8ToW:

; 3046 : 			{
; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	mov	eax, edi
	sub	eax, ecx
	mov	ecx, esi
	push	0
	push	eax
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
$LN49@SK_UTF8ToW:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN101@SK_UTF8ToW
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN102@SK_UTF8ToW
$LN101@SK_UTF8ToW:
	mov	ecx, esi
$LN102@SK_UTF8ToW:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _in$[ebp+20], 16		; 00000010H

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 75   :   MultiByteToWideChar           ( CP_UTF8, 0x00, in.c_str (), static_cast <int> (in.length ()), const_cast <wchar_t *> (out.data ()), len );

	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 75   :   MultiByteToWideChar           ( CP_UTF8, 0x00, in.c_str (), static_cast <int> (in.length ()), const_cast <wchar_t *> (out.data ()), len );

	push	ecx
	push	DWORD PTR _in$[ebp+16]
	push	eax
	push	0
	push	65001					; 0000fde9H
	call	DWORD PTR __imp__MultiByteToWideChar@24
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ecx, DWORD PTR _in$[ebp+20]
	cmp	ecx, 16					; 00000010H

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN168@SK_UTF8ToW
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	ecx
	push	DWORD PTR _in$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN168@SK_UTF8ToW:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 78   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$0:
	lea	ecx, DWORD PTR _in$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
__unwindfunclet$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@SK_UTF8ToW
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
$LN5@SK_UTF8ToW:
	ret	0
__ehhandler$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_UTF8ToWideChar@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@@Z ENDP ; SK_UTF8ToWideChar
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_in$ = 12						; size = 24
?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC ; SK_WideCharToUTF8

; 56   : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _in$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 57   :   int len = WideCharToMultiByte ( CP_UTF8, 0x00, in.c_str (), -1, nullptr, 0, nullptr, FALSE );

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 57   :   int len = WideCharToMultiByte ( CP_UTF8, 0x00, in.c_str (), -1, nullptr, 0, nullptr, FALSE );

	push	0
	push	0
	push	0
	push	-1
	push	eax
	push	0
	push	65001					; 0000fde9H
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	call	DWORD PTR __imp__WideCharToMultiByte@32
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 57   :   int len = WideCharToMultiByte ( CP_UTF8, 0x00, in.c_str (), -1, nullptr, 0, nullptr, FALSE );

	mov	edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3041 : 		if (_Newsize <= this->_Mysize())

	mov	ecx, DWORD PTR [esi+16]
	mov	DWORD PTR $T2[ebp], 1
	cmp	edi, ecx
	ja	SHORT $LN48@SK_WideCha

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN70@SK_WideCha
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3045 : 		else

	jmp	SHORT $LN49@SK_WideCha
$LN70@SK_WideCha:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3045 : 		else

	jmp	SHORT $LN49@SK_WideCha
$LN48@SK_WideCha:

; 3046 : 			{
; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	mov	eax, edi
	sub	eax, ecx
	mov	ecx, esi
	push	0
	push	eax
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
$LN49@SK_WideCha:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN101@SK_WideCha
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN102@SK_WideCha
$LN101@SK_WideCha:
	mov	ecx, esi
$LN102@SK_WideCha:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _in$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 62   :   WideCharToMultiByte           ( CP_UTF8, 0x00, in.c_str (), static_cast <int> (in.length ()), const_cast <char *> (out.data ()), len, nullptr, FALSE );

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _in$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 62   :   WideCharToMultiByte           ( CP_UTF8, 0x00, in.c_str (), static_cast <int> (in.length ()), const_cast <char *> (out.data ()), len, nullptr, FALSE );

	push	0
	push	edi
	push	ecx
	push	DWORD PTR _in$[ebp+16]
	push	eax
	push	0
	push	65001					; 0000fde9H
	call	DWORD PTR __imp__WideCharToMultiByte@32
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ecx, DWORD PTR _in$[ebp+20]
	cmp	ecx, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN168@SK_WideCha
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	ecx
	push	DWORD PTR _in$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN168@SK_WideCha:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 65   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$0:
	lea	ecx, DWORD PTR _in$[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z$1:
	mov	eax, DWORD PTR $T2[ebp]
	and	eax, 1
	je	$LN5@SK_WideCha
	and	DWORD PTR $T2[ebp], -2			; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
$LN5@SK_WideCha:
	ret	0
__ehhandler$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_WideCharToUTF8@@YA?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z ENDP ; SK_WideCharToUTF8
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_caption$ = 8						; size = 24
_title$ = 32						; size = 24
_flags$ = 56						; size = 4
?SK_MessageBox@@YAHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0I@Z PROC ; SK_MessageBox

; 48   : {

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _title$[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	edx, DWORD PTR _title$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 49   :   return

	mov	eax, DWORD PTR _flags$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	lea	ecx, DWORD PTR _caption$[ebp]
	cmovae	edx, DWORD PTR _title$[ebp]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _caption$[ebp+20], 8
	push	esi

; 1621 : 		return (_Large_string_engaged()

	cmovae	ecx, DWORD PTR _caption$[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 49   :   return

	or	eax, 331776				; 00051000H
	push	eax
	push	edx
	push	ecx
	push	0
	call	DWORD PTR __imp__MessageBoxW@16
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ecx, DWORD PTR _caption$[ebp+20]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 49   :   return

	mov	esi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN47@SK_Message
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	ecx
	push	DWORD PTR _caption$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN47@SK_Message:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _caption$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR _caption$[ebp], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR _title$[ebp+20]

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _caption$[ebp+20], 7

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN103@SK_Message
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR _title$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN103@SK_Message:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 49   :   return

	mov	eax, esi
	pop	esi

; 50   :     MessageBox (nullptr, caption.c_str (), title.c_str (),
; 51   :                 flags | MB_SYSTEMMODAL | MB_TOPMOST | MB_SETFOREGROUND);
; 52   : }

	pop	ebp
	ret	0
?SK_MessageBox@@YAHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0I@Z ENDP ; SK_MessageBox
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszRunDLLCmd$2 = -3276					; size = 2080
_wszShortPath$ = -1196					; size = 524
_wszFullname$ = -672					; size = 524
_sinfo$3 = -148						; size = 68
_pinfo$4 = -80						; size = 16
_global_dll$5 = -64					; size = 24
$T6 = -40						; size = 24
$T7 = -40						; size = 24
$T8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
$T9 = 8							; size = 4
_wszDLL$ = 8						; size = 4
?SK_RestartGame@@YAXPB_W@Z PROC				; SK_RestartGame

; 2701 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_RestartGame@@YAXPB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 3264				; 00000cc0H
	push	esi

; 2702 :   wchar_t wszShortPath [MAX_PATH + 2] = { };

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	mov	DWORD PTR $T8[ebp], 0
	push	0
	push	eax
	call	_memset

; 2703 :   wchar_t wszFullname  [MAX_PATH + 2] = { };

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	0
	push	eax
	call	_memset

; 2705 :   wcsncpy ( wszFullname, wszDLL != nullptr ?

	mov	esi, DWORD PTR _wszDLL$[ebp]
	add	esp, 24					; 00000018H
	test	esi, esi
	je	SHORT $LN10@SK_Restart
	mov	eax, esi
	jmp	SHORT $LN21@SK_Restart
$LN10@SK_Restart:
	call	?SK_GetDLL@@YGPAUHINSTANCE__@@XZ	; SK_GetDLL
	push	eax
	lea	eax, DWORD PTR $T7[ebp]
	push	eax
	call	?SK_GetModuleFullName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ; SK_GetModuleFullName
	add	esp, 8
	mov	DWORD PTR $T8[ebp], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [eax+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN21@SK_Restart
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN21@SK_Restart:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2705 :   wcsncpy ( wszFullname, wszDLL != nullptr ?

	push	259					; 00000103H
	push	eax
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	DWORD PTR __imp__wcsncpy
	add	esp, 12					; 0000000cH
	test	BYTE PTR $T8[ebp], 1
	je	SHORT $LN43@SK_Restart
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T7[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN43@SK_Restart

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
	push	eax
	push	DWORD PTR $T7[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN43@SK_Restart:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2710 :   SK_Generate8Dot3 (wszFullname);

	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	?SK_Generate8Dot3@@YA_NPB_W@Z		; SK_Generate8Dot3
	add	esp, 4

; 2711 :   wcscpy           (wszShortPath, wszFullname);

	xor	ecx, ecx
$LL12@SK_Restart:
	movzx	eax, WORD PTR _wszFullname$[ebp+ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR _wszShortPath$[ebp+ecx-2], ax
	test	ax, ax
	jne	SHORT $LL12@SK_Restart

; 2712 :  
; 2713 :   if (SK_FileHasSpaces (wszFullname))

	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 4
	test	al, al
	je	SHORT $LN2@SK_Restart

; 2714 :     GetShortPathName   (wszFullname, wszShortPath, MAX_PATH - 1);

	push	259					; 00000103H
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	DWORD PTR __imp__GetShortPathNameW@12
$LN2@SK_Restart:

; 2715 :   
; 2716 :   if (SK_FileHasSpaces (wszShortPath))

	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 4
	test	al, al
	je	$LN7@SK_Restart

; 2717 :   {
; 2718 :     if (wszDLL != nullptr)

	test	esi, esi
	je	SHORT $LN4@SK_Restart

; 2720 :       SK_MessageBox ( L"Your computer is misconfigured; please enable DOS 8.3 filename generation."

	push	331840					; 00051040H
	sub	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2720 :       SK_MessageBox ( L"Your computer is misconfigured; please enable DOS 8.3 filename generation."

	mov	ecx, esp
	mov	DWORD PTR $T9[ebp], esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	68					; 00000044H

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 7

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	OFFSET $SG299192
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2720 :       SK_MessageBox ( L"Your computer is misconfigured; please enable DOS 8.3 filename generation."

	sub	esp, 24					; 00000018H
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	244					; 000000f4H

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 7

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	OFFSET $SG299193
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2720 :       SK_MessageBox ( L"Your computer is misconfigured; please enable DOS 8.3 filename generation."

	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	?SK_MessageBox@@YAHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0I@Z ; SK_MessageBox
	add	esp, 52					; 00000034H
	jmp	$LN177@SK_Restart
$LN4@SK_Restart:

; 2721 :                       L"\r\n\r\n\t"
; 2722 :                       L"This is a common problem for non-boot drives, please ensure that the drive your "
; 2723 :                       L"game is installed to has 8.3 filename generation enabled and then re-install "
; 2724 :                       L"the mod.",
; 2725 :                         L"Cannot Automatically Restart Game Because of Bad File system Policy.",
; 2726 :                           MB_OK | MB_SYSTEMMODAL | MB_SETFOREGROUND | MB_ICONASTERISK | MB_TOPMOST );
; 2727 :     }
; 2728 : 
; 2729 :     else if (SK_HasGlobalInjector ())

	call	?SK_HasGlobalInjector@@YG_NXZ		; SK_HasGlobalInjector
	test	al, al
	je	$LN177@SK_Restart

; 2732 :         SK_GetDocumentsDir () + L"\\My Mods\\SpecialK\\SpecialK";

	lea	eax, DWORD PTR $T6[ebp]
	push	eax
	call	?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ; SK_GetDocumentsDir
	push	OFFSET $SG299195
	push	eax
	lea	eax, DWORD PTR _global_dll$5[ebp]
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	push	eax
	call	??$?H_WU?$char_traits@_W@std@@V?$allocator@_W@1@@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@$$QAV10@QB_W@Z ; std::operator+<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	add	esp, 16					; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T6[ebp+20]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2732 :         SK_GetDocumentsDir () + L"\\My Mods\\SpecialK\\SpecialK";

	mov	BYTE PTR __$EHRec$[ebp+8], 3
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN121@SK_Restart
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T6[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN121@SK_Restart:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	6
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR $T6[ebp+16], 0

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	OFFSET $SG299196
	lea	ecx, DWORD PTR _global_dll$5[ebp]

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T6[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR $T6[ebp], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR _global_dll$5[ebp+20], 8

; 1621 : 		return (_Large_string_engaged()

	lea	eax, DWORD PTR _global_dll$5[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2740 :                 wcsncpy ( wszFullname, global_dll.c_str (), MAX_PATH - 1 );

	push	259					; 00000103H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	cmovae	eax, DWORD PTR _global_dll$5[ebp]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2740 :                 wcsncpy ( wszFullname, global_dll.c_str (), MAX_PATH - 1 );

	push	eax
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	DWORD PTR __imp__wcsncpy
	add	esp, 12					; 0000000cH

; 2741 :       GetShortPathName   (wszFullname, wszShortPath, MAX_PATH - 1);

	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	259					; 00000103H
	push	eax
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	DWORD PTR __imp__GetShortPathNameW@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR _global_dll$5[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN177@SK_Restart
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR _global_dll$5[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN177@SK_Restart:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2744 :     if (SK_FileHasSpaces (wszShortPath))

	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 4
	test	al, al
	je	SHORT $LN7@SK_Restart

; 2745 :       ExitProcess (0x00);

	push	0
	call	DWORD PTR __imp__ExitProcess@4
$LN208@SK_Restart:
$LN7@SK_Restart:

; 2746 :   }
; 2747 : 
; 2748 :   if (! SK_IsSuperSpecialK ())

	call	?SK_IsSuperSpecialK@@YA_NXZ		; SK_IsSuperSpecialK
	test	al, al
	jne	$LN8@SK_Restart

; 2749 :   {
; 2750 :     wchar_t wszRunDLLCmd [MAX_PATH * 4] = { };

	push	2080					; 00000820H
	lea	eax, DWORD PTR _wszRunDLLCmd$2[ebp]
	push	0
	push	eax
	call	_memset

; 2751 : 
; 2752 :     _swprintf ( wszRunDLLCmd,

	call	?SK_GetFullyQualifiedApp@@YAPB_WXZ	; SK_GetFullyQualifiedApp
	push	eax
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszRunDLLCmd$2[ebp]
	push	OFFSET $SG299199
	push	eax
	call	__swprintf

; 2753 :                  L"RunDll32.exe %s,RunDLL_RestartGame %s",
; 2754 :                    wszShortPath,
; 2755 :                      SK_GetFullyQualifiedApp () );
; 2756 : 
; 2757 :     STARTUPINFOW        sinfo = { };

	push	68					; 00000044H
	lea	eax, DWORD PTR _sinfo$3[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 40					; 00000028H

; 2758 :     PROCESS_INFORMATION pinfo = { };
; 2759 : 
; 2760 :     sinfo.cb = sizeof STARTUPINFOW;

	mov	DWORD PTR _sinfo$3[ebp], 68		; 00000044H

; 2761 : 
; 2762 :     CreateProcess ( nullptr, wszRunDLLCmd,             nullptr, nullptr,

	lea	eax, DWORD PTR _pinfo$4[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR _pinfo$4[ebp], xmm0
	push	eax
	lea	eax, DWORD PTR _sinfo$3[ebp]
	push	eax
	call	?SK_GetHostPath@@YAPB_WXZ		; SK_GetHostPath
	push	eax
	push	0
	push	512					; 00000200H
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _wszRunDLLCmd$2[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__CreateProcessW@40

; 2763 :                     FALSE,   CREATE_NEW_PROCESS_GROUP, nullptr, SK_GetHostPath (),
; 2764 :                     &sinfo,  &pinfo );
; 2765 : 
; 2766 :     CloseHandle (pinfo.hThread);

	push	DWORD PTR _pinfo$4[ebp+4]
	mov	esi, DWORD PTR __imp__CloseHandle@4
	call	esi

; 2767 :     CloseHandle (pinfo.hProcess);

	push	DWORD PTR _pinfo$4[ebp]
	call	esi
$LN8@SK_Restart:

; 2768 :   }
; 2769 : 
; 2770 :   TerminateProcess (GetCurrentProcess (), 0x00);

	push	0
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__TerminateProcess@8

; 2771 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN207@SK_Restart:
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$1:
	mov	ecx, DWORD PTR $T9[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$3:
	lea	ecx, DWORD PTR $T6[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__unwindfunclet$?SK_RestartGame@@YAXPB_W@Z$4:
	lea	ecx, DWORD PTR _global_dll$5[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?SK_RestartGame@@YAXPB_W@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_RestartGame@@YAXPB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_RestartGame@@YAXPB_W@Z ENDP				; SK_RestartGame
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszRunDLLCmd$ = -3256					; size = 2080
_wszShortPath$ = -1176					; size = 524
_wszFullname$ = -652					; size = 524
_sinfo$ = -128						; size = 68
$T2 = -60						; size = 24
_pinfo$ = -36						; size = 16
$T3 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?SK_ElevateToAdmin@@YAXXZ PROC				; SK_ElevateToAdmin

; 2775 : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?SK_ElevateToAdmin@@YAXXZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 2776 :   extern const wchar_t*
; 2777 :   SK_GetFullyQualifiedApp (void);
; 2778 : 
; 2779 :   extern const wchar_t*
; 2780 :   SK_GetHostPath (void);
; 2781 : 
; 2782 :   extern std::wstring
; 2783 :   SK_GetModuleFullName (HMODULE hDll);
; 2784 : 
; 2785 :   wchar_t wszRunDLLCmd [MAX_PATH * 4] = { };

	lea	eax, DWORD PTR _wszRunDLLCmd$[ebp]
	sub	esp, 3244				; 00000cacH
	push	2080					; 00000820H
	push	0
	push	eax
	call	_memset

; 2786 :   wchar_t wszShortPath [MAX_PATH + 2] = { };

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	0
	push	eax
	call	_memset

; 2787 :   wchar_t wszFullname  [MAX_PATH + 2] = { };

	push	524					; 0000020cH
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 36					; 00000024H

; 2789 :   wcsncpy (wszFullname, SK_GetModuleFullName (SK_GetDLL ()).c_str (), MAX_PATH - 1);

	call	?SK_GetDLL@@YGPAUHINSTANCE__@@XZ	; SK_GetDLL
	push	eax
	lea	eax, DWORD PTR $T2[ebp]
	push	eax
	call	?SK_GetModuleFullName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHINSTANCE__@@@Z ; SK_GetModuleFullName
	add	esp, 8
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [eax+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN23@SK_Elevate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [eax]
$LN23@SK_Elevate:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2789 :   wcsncpy (wszFullname, SK_GetModuleFullName (SK_GetDLL ()).c_str (), MAX_PATH - 1);

	push	259					; 00000103H
	push	eax
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	DWORD PTR __imp__wcsncpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T2[ebp+20]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2789 :   wcsncpy (wszFullname, SK_GetModuleFullName (SK_GetDLL ()).c_str (), MAX_PATH - 1);

	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN32@SK_Elevate

; 3609 : 			{
; 3610 : 			pointer _Ptr = _My_data._Bx._Ptr;
; 3611 : 			auto& _Al = this->_Getal();
; 3612 : 			_Al.destroy(_STD addressof(_My_data._Bx._Ptr));
; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
	push	eax
	push	DWORD PTR $T2[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN32@SK_Elevate:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR $T2[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR $T2[ebp], ax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2791 :   SK_Generate8Dot3 (wszFullname);

	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T2[ebp+20], 7
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2791 :   SK_Generate8Dot3 (wszFullname);

	call	?SK_Generate8Dot3@@YA_NPB_W@Z		; SK_Generate8Dot3
	add	esp, 4

; 2792 :   wcscpy (wszShortPath, wszFullname);

	xor	ecx, ecx
	npad	8
$LL5@SK_Elevate:
	movzx	eax, WORD PTR _wszFullname$[ebp+ecx]
	lea	ecx, DWORD PTR [ecx+2]
	mov	WORD PTR _wszShortPath$[ebp+ecx-2], ax
	test	ax, ax
	jne	SHORT $LL5@SK_Elevate

; 2793 :  
; 2794 :   if (SK_FileHasSpaces (wszFullname))

	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 4
	test	al, al
	je	SHORT $LN2@SK_Elevate

; 2795 :     GetShortPathName   (wszFullname, wszShortPath, MAX_PATH - 1);

	push	259					; 00000103H
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszFullname$[ebp]
	push	eax
	call	DWORD PTR __imp__GetShortPathNameW@12
$LN2@SK_Elevate:

; 2796 :   
; 2797 :   if (SK_FileHasSpaces (wszShortPath))

	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	call	?SK_FileHasSpaces@@YA_NPB_W@Z		; SK_FileHasSpaces
	add	esp, 4
	test	al, al
	je	SHORT $LN3@SK_Elevate

; 2798 :   {
; 2799 :     SK_MessageBox ( L"Your computer is misconfigured; please enable DOS 8.3 filename generation."

	push	331840					; 00051040H
	sub	esp, 24					; 00000018H
	mov	ecx, esp
	mov	DWORD PTR $T3[ebp], esp
	push	OFFSET $SG299222
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	sub	esp, 24					; 00000018H
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, esp
	push	OFFSET $SG299223
	call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	?SK_MessageBox@@YAHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@0I@Z ; SK_MessageBox
	add	esp, 52					; 00000034H

; 2800 :                     L"\r\n\r\n\t"
; 2801 :                     L"This is a common problem for non-boot drives, please ensure that the drive your "
; 2802 :                     L"game is installed to has 8.3 filename generation enabled and then re-install "
; 2803 :                     L"the mod.",
; 2804 :                       L"Cannot Elevate To Admin Because of Bad File system Policy.",
; 2805 :                         MB_OK | MB_SYSTEMMODAL | MB_SETFOREGROUND | MB_ICONASTERISK | MB_TOPMOST );
; 2806 :     ExitProcess   (0x00);

	push	0
	call	DWORD PTR __imp__ExitProcess@4
$LN63@SK_Elevate:
$LN3@SK_Elevate:

; 2807 :   }
; 2808 : 
; 2809 :   _swprintf ( wszRunDLLCmd,

	call	?SK_GetFullyQualifiedApp@@YAPB_WXZ	; SK_GetFullyQualifiedApp
	push	eax
	lea	eax, DWORD PTR _wszShortPath$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszRunDLLCmd$[ebp]
	push	OFFSET $SG299224
	push	eax
	call	__swprintf

; 2810 :                L"RunDll32.exe %s,RunDLL_ElevateMe %s",
; 2811 :                  wszShortPath,
; 2812 :                    SK_GetFullyQualifiedApp () );
; 2813 : 
; 2814 :   STARTUPINFOW        sinfo = { };

	push	68					; 00000044H
	lea	eax, DWORD PTR _sinfo$[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 28					; 0000001cH

; 2815 :   PROCESS_INFORMATION pinfo = { };
; 2816 : 
; 2817 :   sinfo.cb = sizeof STARTUPINFOW;

	mov	DWORD PTR _sinfo$[ebp], 68		; 00000044H

; 2818 : 
; 2819 :   CreateProcess ( nullptr, wszRunDLLCmd,             nullptr, nullptr,

	lea	eax, DWORD PTR _pinfo$[ebp]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR _pinfo$[ebp], xmm0
	push	eax
	lea	eax, DWORD PTR _sinfo$[ebp]
	push	eax
	call	?SK_GetHostPath@@YAPB_WXZ		; SK_GetHostPath
	push	eax
	push	0
	push	512					; 00000200H
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _wszRunDLLCmd$[ebp]
	push	eax
	push	0
	call	DWORD PTR __imp__CreateProcessW@40

; 2820 :                   FALSE,   CREATE_NEW_PROCESS_GROUP, nullptr, SK_GetHostPath (),
; 2821 :                   &sinfo,  &pinfo );
; 2822 : 
; 2823 :   CloseHandle (pinfo.hThread);

	push	DWORD PTR _pinfo$[ebp+4]
	call	DWORD PTR __imp__CloseHandle@4

; 2824 :   CloseHandle (pinfo.hProcess);

	push	DWORD PTR _pinfo$[ebp]
	call	DWORD PTR __imp__CloseHandle@4

; 2825 : 
; 2826 :   TerminateProcess    (GetCurrentProcess (), 0x00);

	push	0
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__TerminateProcess@8

; 2827 : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN62@SK_Elevate:
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_ElevateToAdmin@@YAXXZ$1:
	mov	ecx, DWORD PTR $T3[ebp]
	jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
__ehhandler$?SK_ElevateToAdmin@@YAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?SK_ElevateToAdmin@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_ElevateToAdmin@@YAXXZ ENDP				; SK_ElevateToAdmin
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_cbSize$1 = -12						; size = 4
_Elevation$2 = -8					; size = 4
_hToken$ = -4						; size = 4
?SK_IsAdmin@@YA_NXZ PROC				; SK_IsAdmin

; 342  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx

; 346  :   if ( OpenProcessToken ( GetCurrentProcess (),

	lea	eax, DWORD PTR _hToken$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1196 : 	m_h( NULL )

	mov	DWORD PTR _hToken$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 346  :   if ( OpenProcessToken ( GetCurrentProcess (),

	push	eax
	push	8
	xor	bl, bl
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	je	SHORT $LN3@SK_IsAdmin

; 347  :                             TOKEN_QUERY,
; 348  :                               &hToken.m_h )
; 349  :      )
; 350  :   {
; 351  :     TOKEN_ELEVATION Elevation = { };
; 352  : 
; 353  :     DWORD cbSize =
; 354  :       sizeof TOKEN_ELEVATION;
; 355  : 
; 356  :     if ( GetTokenInformation ( hToken,

	lea	eax, DWORD PTR _cbSize$1[ebp]
	mov	DWORD PTR _Elevation$2[ebp], 0
	push	eax
	push	4
	lea	eax, DWORD PTR _Elevation$2[ebp]
	mov	DWORD PTR _cbSize$1[ebp], 4
	push	eax
	push	20					; 00000014H
	push	DWORD PTR _hToken$[ebp]
	call	DWORD PTR __imp__GetTokenInformation@20
	test	eax, eax
	je	SHORT $LN3@SK_IsAdmin

; 357  :                                  TokenElevation,
; 358  :                                    &Elevation,
; 359  :                                      sizeof (Elevation),
; 360  :                                        &cbSize )
; 361  :        )
; 362  :     {
; 363  :       bRet =

	cmp	DWORD PTR _Elevation$2[ebp], 0
	setne	bl
$LN3@SK_IsAdmin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	mov	ecx, DWORD PTR _hToken$[ebp]
	test	ecx, ecx
	je	SHORT $LN17@SK_IsAdmin

; 1258 : 		::CloseHandle( m_h );

	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
$LN17@SK_IsAdmin:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 368  :   return bRet;

	mov	al, bl
	pop	ebx

; 369  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_IsAdmin@@YA_NXZ ENDP				; SK_IsAdmin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -28						; size = 24
$T2 = -28						; size = 24
$T3 = -4						; size = 4
_string$ = 8						; size = 4
?SK_IsTrue@@YA_NPB_W@Z PROC				; SK_IsTrue

; 223  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	esi, DWORD PTR _string$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, esi
	mov	DWORD PTR $T3[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR $T2[ebp+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T2[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR $T2[ebp], ax

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
	npad	3
$LL147@SK_IsTrue:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL147@SK_IsTrue
	sub	ecx, edx
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	lea	ecx, DWORD PTR $T2[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 226  :   if ( std::wstring (string).length () == 1 &&

	cmp	DWORD PTR $T2[ebp+16], 1
	jne	SHORT $LN9@SK_IsTrue
	cmp	WORD PTR [esi], 49			; 00000031H
	jne	SHORT $LN9@SK_IsTrue
	mov	bl, 1
	jmp	SHORT $LN10@SK_IsTrue
$LN9@SK_IsTrue:
	xor	bl, bl
$LN10@SK_IsTrue:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T2[ebp+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN55@SK_IsTrue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T2[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN55@SK_IsTrue:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 226  :   if ( std::wstring (string).length () == 1 &&

	test	bl, bl
	je	SHORT $LN2@SK_IsTrue

; 227  :                                  *pstr == L'1' )
; 228  :     return true;

	pop	esi
	mov	al, 1
	pop	ebx

; 249  :     return false;
; 250  : 
; 251  :   return true;
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@SK_IsTrue:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR $T1[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR $T1[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR $T1[ebp], ax

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
$LL148@SK_IsTrue:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL148@SK_IsTrue
	sub	ecx, edx
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	lea	ecx, DWORD PTR $T1[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 230  :   if (std::wstring (string).length () != 4)

	cmp	DWORD PTR $T1[ebp+16], 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR $T1[ebp+20]
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 230  :   if (std::wstring (string).length () != 4)

	setne	bl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN121@SK_IsTrue
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR $T1[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN121@SK_IsTrue:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 230  :   if (std::wstring (string).length () != 4)

	test	bl, bl
	je	SHORT $LN3@SK_IsTrue

; 231  :     return false;

	pop	esi
	xor	al, al
	pop	ebx

; 249  :     return false;
; 250  : 
; 251  :   return true;
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@SK_IsTrue:

; 232  : 
; 233  :   if (towlower (*pstr) != L't')

	movzx	eax, WORD PTR [esi]
	push	edi
	mov	edi, DWORD PTR __imp__towlower
	push	eax
	call	edi
	add	esp, 4
	cmp	ax, 116					; 00000074H
	jne	SHORT $LN150@SK_IsTrue

; 234  :     return false;
; 235  : 
; 236  :   pstr = CharNextW (pstr);

	push	esi
	mov	esi, DWORD PTR __imp__CharNextW@4
	call	esi
	mov	ebx, eax

; 237  : 
; 238  :   if (towlower (*pstr) != L'r')

	movzx	ecx, WORD PTR [ebx]
	push	ecx
	call	edi
	add	esp, 4
	cmp	ax, 114					; 00000072H
	jne	SHORT $LN150@SK_IsTrue

; 239  :     return false;
; 240  : 
; 241  :   pstr = CharNextW (pstr);

	push	ebx
	call	esi
	mov	ebx, eax

; 242  : 
; 243  :   if (towlower (*pstr) != L'u')

	movzx	ecx, WORD PTR [ebx]
	push	ecx
	call	edi
	add	esp, 4
	cmp	ax, 117					; 00000075H
	je	SHORT $LN6@SK_IsTrue
$LN150@SK_IsTrue:
	pop	edi
	pop	esi

; 244  :     return false;

	xor	al, al
	pop	ebx

; 249  :     return false;
; 250  : 
; 251  :   return true;
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SK_IsTrue:

; 245  : 
; 246  :   pstr = CharNextW (pstr);

	push	ebx
	call	esi

; 247  : 
; 248  :   if (towlower (*pstr) != L'e')

	movzx	eax, WORD PTR [eax]
	push	eax
	call	edi
	add	esp, 4
	cmp	ax, 101					; 00000065H
	sete	al
	pop	edi
	pop	esi
	pop	ebx

; 249  :     return false;
; 250  : 
; 251  :   return true;
; 252  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_IsTrue@@YA_NPB_W@Z ENDP				; SK_IsTrue
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_hToken$ = -4						; size = 4
_buf$ = 8						; size = 4
_pdwLen$ = 12						; size = 4
?SK_GetUserProfileDir@@YA_NPA_WPAI@Z PROC		; SK_GetUserProfileDir

; 146  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx

; 149  :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	lea	eax, DWORD PTR _hToken$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1196 : 	m_h( NULL )

	mov	DWORD PTR _hToken$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 149  :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	push	eax
	push	131080					; 00020008H
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	je	SHORT $LN6@SK_GetUser

; 150  :     return false;
; 151  : 
; 152  :   if (! GetUserProfileDirectory ( hToken, buf,

	push	DWORD PTR _pdwLen$[ebp]
	push	DWORD PTR _buf$[ebp]
	push	DWORD PTR _hToken$[ebp]
	call	DWORD PTR __imp__GetUserProfileDirectoryW@12
	test	eax, eax
	je	SHORT $LN6@SK_GetUser

; 160  :   return true;

	mov	bl, 1
	jmp	SHORT $LN7@SK_GetUser
$LN6@SK_GetUser:
	xor	bl, bl
$LN7@SK_GetUser:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	mov	ecx, DWORD PTR _hToken$[ebp]
	test	ecx, ecx
	je	SHORT $LN19@SK_GetUser

; 1258 : 		::CloseHandle( m_h );

	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
$LN19@SK_GetUser:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 160  :   return true;

	mov	al, bl
	pop	ebx

; 161  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetUserProfileDir@@YA_NPA_WPAI@Z ENDP		; SK_GetUserProfileDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_ret_str$ = -44						; size = 24
_wszEvaluated$ = -20					; size = 4
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_wszEvaluateMe$ = 12					; size = 4
?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z PROC ; SK_EvalEnvironmentVars

; 203  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 262  : 		return malloc(nBytes);

	push	524					; 0000020cH
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 204  :   CHeapPtr <wchar_t> wszEvaluated;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 262  : 		return malloc(nBytes);

	call	DWORD PTR __imp__malloc

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	esi, eax

; 262  : 		return malloc(nBytes);

	add	esp, 4

; 383  : 		m_pData = static_cast<T*>(Allocator::Allocate(nBytes));

	mov	DWORD PTR _wszEvaluated$[ebp], esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 207  :   if (wszEvaluated == nullptr)

	test	esi, esi
	jne	SHORT $LN2@SK_EvalEnv
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	13					; 0000000dH
	push	OFFSET $SG183294

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], eax

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	push	0
	call	DWORD PTR __imp__free
	add	esp, 4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 208  :     return L"OUT_OF_MEMORY";

	mov	eax, esi
	pop	esi

; 217  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@SK_EvalEnv:

; 209  : 
; 210  :   ExpandEnvironmentStringsW ( wszEvaluateMe,

	push	262					; 00000106H
	push	esi
	push	DWORD PTR _wszEvaluateMe$[ebp]
	call	DWORD PTR __imp__ExpandEnvironmentStringsW@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _ret_str$[ebp+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _ret_str$[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR _ret_str$[ebp], ax

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
$LL188@SK_EvalEnv:
	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL188@SK_EvalEnv
	sub	ecx, edx
	push	edi
	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	esi
	lea	ecx, DWORD PTR _ret_str$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1595 : 		_Mysize(0),

	mov	edi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR _ret_str$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR _ret_str$[ebp], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [edi+16], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [edi+20], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	XMMWORD PTR [edi], xmm0
	movq	xmm0, QWORD PTR _ret_str$[ebp+16]
	movq	QWORD PTR [edi+16], xmm0

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR _ret_str$[ebp+16], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR _ret_str$[ebp+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	call	DWORD PTR __imp__free
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 217  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	add	esp, 4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 216  :   return ret_str;

	mov	eax, edi

; 217  : }

	mov	DWORD PTR fs:0, ecx
	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z$0:
	lea	ecx, DWORD PTR _wszEvaluated$[ebp]
	jmp	??1?$CHeapPtr@_WVCCRTAllocator@ATL@@@ATL@@QAE@XZ
__ehhandler$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z:
	mov	eax, OFFSET __ehfuncinfo$?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_EvalEnvironmentVars@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_W@Z ENDP ; SK_EvalEnvironmentVars
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszFindPattern$ = -2676				; size = 1040
_wszFullPath$1 = -1636					; size = 1042
_fd$ = -592						; size = 592
_wszPath$ = 8						; size = 4
_wszPattern$ = 12					; size = 4
?SK_DeleteTemporaryFiles@@YAIPB_W0@Z PROC		; SK_DeleteTemporaryFiles

; 2455 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 2676				; 00000a74H

; 2456 :   WIN32_FIND_DATA fd     = {      };

	lea	eax, DWORD PTR _fd$[ebp]
	push	ebx
	push	esi
	push	edi
	push	592					; 00000250H
	push	0
	push	eax
	call	_memset

; 2457 :   HANDLE          hFind  = INVALID_HANDLE_VALUE;
; 2458 :   size_t          files  =   0UL;
; 2459 :   LARGE_INTEGER   liSize = { 0ULL };
; 2460 : 
; 2461 :   wchar_t wszFindPattern [MAX_PATH * 2] = { };

	push	1040					; 00000410H
	xor	esi, esi
	lea	eax, DWORD PTR _wszFindPattern$[ebp]
	push	esi
	push	eax
	call	_memset

; 2462 : 
; 2463 :   lstrcatW (wszFindPattern, wszPath);

	mov	edi, DWORD PTR __imp__lstrcatW@8
	lea	eax, DWORD PTR _wszFindPattern$[ebp]
	add	esp, 24					; 00000018H
	push	DWORD PTR _wszPath$[ebp]
	push	eax
	call	edi

; 2464 :   lstrcatW (wszFindPattern, L"\\");

	push	OFFSET $SG299087
	lea	eax, DWORD PTR _wszFindPattern$[ebp]
	push	eax
	call	edi

; 2465 :   lstrcatW (wszFindPattern, wszPattern);

	push	DWORD PTR _wszPattern$[ebp]
	lea	eax, DWORD PTR _wszFindPattern$[ebp]
	push	eax
	call	edi

; 2466 : 
; 2467 :   hFind = FindFirstFileW (wszFindPattern, &fd);

	lea	eax, DWORD PTR _fd$[ebp]
	push	eax
	lea	eax, DWORD PTR _wszFindPattern$[ebp]
	push	eax
	call	DWORD PTR __imp__FindFirstFileW@8
	mov	ebx, eax

; 2468 : 
; 2469 :   if (hFind != INVALID_HANDLE_VALUE)

	cmp	ebx, -1
	je	$LN12@SK_DeleteT

; 2470 :   {
; 2471 :     dll_log.LogEx ( true, L"[Clean Mgr.] Cleaning temporary files in '%s'...    ", wszPath );

	push	DWORD PTR _wszPath$[ebp]
	push	OFFSET $SG299089
	push	1
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?LogEx@iSK_Logger@@UAAX_NQB_WZZ		; iSK_Logger::LogEx

; 2472 : 
; 2473 :     wchar_t wszFullPath [MAX_PATH * 2 + 1] = { };

	push	1042					; 00000412H
	lea	eax, DWORD PTR _wszFullPath$1[ebp]
	push	esi
	push	eax
	call	_memset
	add	esp, 28					; 0000001cH
	npad	4
$LL4@SK_DeleteT:

; 2474 : 
; 2475 :     do
; 2476 :     {
; 2477 :       if (fd.dwFileAttributes != INVALID_FILE_ATTRIBUTES)

	cmp	DWORD PTR _fd$[ebp], -1
	je	SHORT $LN2@SK_DeleteT

; 2478 :       {
; 2479 :         *wszFullPath = L'\0';
; 2480 : 
; 2481 :         lstrcatW (wszFullPath, wszPath);

	push	DWORD PTR _wszPath$[ebp]
	xor	eax, eax
	mov	WORD PTR _wszFullPath$1[ebp], ax
	lea	eax, DWORD PTR _wszFullPath$1[ebp]
	push	eax
	call	edi

; 2482 :         lstrcatW (wszFullPath, L"\\");

	push	OFFSET $SG299091
	lea	eax, DWORD PTR _wszFullPath$1[ebp]
	push	eax
	call	edi

; 2483 :         lstrcatW (wszFullPath, fd.cFileName);

	lea	eax, DWORD PTR _fd$[ebp+44]
	push	eax
	lea	eax, DWORD PTR _wszFullPath$1[ebp]
	push	eax
	call	edi

; 2484 : 
; 2485 :         if (DeleteFileW (wszFullPath))

	lea	eax, DWORD PTR _wszFullPath$1[ebp]
	push	eax
	call	DWORD PTR __imp__DeleteFileW@4
	test	eax, eax
	je	SHORT $LN2@SK_DeleteT

; 2486 :           ++files;

	inc	esi
$LN2@SK_DeleteT:

; 2487 :       }
; 2488 :     } while (FindNextFileW (hFind, &fd) != 0);

	lea	eax, DWORD PTR _fd$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR __imp__FindNextFileW@8
	test	eax, eax
	jne	SHORT $LL4@SK_DeleteT

; 2489 : 
; 2490 :     dll_log.LogEx ( false, L"%zu files deleted\n", files);

	push	esi
	push	OFFSET $SG299093
	push	eax
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?LogEx@iSK_Logger@@UAAX_NQB_WZZ		; iSK_Logger::LogEx
	add	esp, 16					; 00000010H

; 2491 : 
; 2492 :     FindClose (hFind);

	push	ebx
	call	DWORD PTR __imp__FindClose@4
$LN12@SK_DeleteT:

; 2493 :   }
; 2494 : 
; 2495 :   return files;

	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx

; 2496 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_DeleteTemporaryFiles@@YAIPB_W0@Z ENDP		; SK_DeleteTemporaryFiles
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszPath$ = 8						; size = 4
?SK_CreateDirectories@@YG_NPB_W@Z PROC			; SK_CreateDirectories

; 166  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	push	edi

; 167  :   CHeapPtr <wchar_t>
; 168  :            wszSubDir         (_wcsdup (wszPath));

	push	DWORD PTR _wszPath$[ebp]
	call	DWORD PTR __imp___wcsdup
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	mov	edi, DWORD PTR __imp__wcsrchr
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 343  : 		m_pData(pData)

	mov	esi, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	push	47					; 0000002fH
	push	esi
	call	edi
	push	92					; 0000005cH
	push	esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 171  :   wchar_t* wszLastSlash     = wcsrchr (wszSubDir, L'/');

	mov	ebx, eax
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	call	edi
	add	esp, 20					; 00000014H
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 174  :   if (wszLastSlash > wszLastBackslash)

	cmp	ebx, eax
	jbe	SHORT $LN5@SK_CreateD

; 175  :     *wszLastSlash = L'\0';

	xor	eax, eax
	mov	WORD PTR [ebx], ax
	jmp	SHORT $LN8@SK_CreateD
$LN5@SK_CreateD:

; 176  :   else if (wszLastBackslash != nullptr)

	test	eax, eax
	je	$LN7@SK_CreateD

; 177  :     *wszLastBackslash = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN8@SK_CreateD:

; 181  :   for (iter = wszSubDir; *iter != L'\0'; iter = CharNextW (iter))

	cmp	WORD PTR [esi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 364  : 		return m_pData;

	mov	edi, esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 181  :   for (iter = wszSubDir; *iter != L'\0'; iter = CharNextW (iter))

	je	SHORT $LN3@SK_CreateD
	mov	ecx, DWORD PTR __imp__GetFileAttributesW@4
	mov	ebx, DWORD PTR __imp__CreateDirectoryW@8
$LL4@SK_CreateD:

; 182  :   {
; 183  :     if (*iter == L'\\' || *iter == L'/')

	movzx	eax, WORD PTR [edi]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN10@SK_CreateD
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN9@SK_CreateD
$LN10@SK_CreateD:

; 184  :     {
; 185  :       *iter = L'\0';
; 186  : 
; 187  :       if (GetFileAttributes (wszPath) == INVALID_FILE_ATTRIBUTES)

	push	DWORD PTR _wszPath$[ebp]
	xor	eax, eax
	mov	WORD PTR [edi], ax
	call	ecx
	cmp	eax, -1
	jne	SHORT $LN11@SK_CreateD

; 188  :         CreateDirectoryW (wszSubDir, nullptr);

	push	0
	push	esi
	call	ebx
$LN11@SK_CreateD:

; 189  : 
; 190  :       *iter = L'\\';

	mov	ecx, DWORD PTR __imp__GetFileAttributesW@4
	mov	eax, 92					; 0000005cH
	mov	WORD PTR [edi], ax
$LN9@SK_CreateD:

; 191  :     }
; 192  : 
; 193  :     // The final subdirectory (FULL PATH)
; 194  :     if (GetFileAttributes (wszPath) == INVALID_FILE_ATTRIBUTES)

	push	DWORD PTR _wszPath$[ebp]
	call	ecx
	cmp	eax, -1
	jne	SHORT $LN2@SK_CreateD

; 195  :       CreateDirectoryW (wszSubDir, nullptr);

	push	0
	push	esi
	call	ebx
$LN2@SK_CreateD:

; 181  :   for (iter = wszSubDir; *iter != L'\0'; iter = CharNextW (iter))

	push	edi
	call	DWORD PTR __imp__CharNextW@4
	mov	ecx, DWORD PTR __imp__GetFileAttributesW@4
	mov	edi, eax
	cmp	WORD PTR [edi], 0
	jne	SHORT $LL4@SK_CreateD
$LN3@SK_CreateD:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	push	esi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 198  :   return true;

	mov	bl, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	call	DWORD PTR __imp__free
	add	esp, 4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 198  :   return true;

	mov	al, bl
	pop	edi
	pop	esi
	pop	ebx

; 199  : }

	pop	ebp
	ret	4
$LN7@SK_CreateD:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 267  : 		free(p);

	push	esi
	xor	bl, bl
	call	DWORD PTR __imp__free
	add	esp, 4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 198  :   return true;

	mov	al, bl
	pop	edi
	pop	esi
	pop	ebx

; 199  : }

	pop	ebp
	ret	4
?SK_CreateDirectories@@YG_NPB_W@Z ENDP			; SK_CreateDirectories
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T1 = -1640						; size = 556
_pe32$ = -1084						; size = 556
_wszPath$ = -528					; size = 520
$T2 = -8						; size = 4
_len$3 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
?SK_GetRTSSInstallDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; SK_GetRTSSInstallDir

; 1176 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 1640				; 00000668H
	push	esi
	push	edi

; 1177 :   PROCESSENTRY32 pe32 =
; 1178 :     FindProcessByName (L"RTSS.exe");

	lea	eax, DWORD PTR $T1[ebp]
	mov	DWORD PTR $T2[ebp], 0
	push	OFFSET $SG185432
	push	eax
	call	?FindProcessByName@@YA?AUtagPROCESSENTRY32W@@PB_W@Z ; FindProcessByName
	mov	esi, eax
	lea	edi, DWORD PTR _pe32$[ebp]

; 1179 : 
; 1180 :   wchar_t wszPath [MAX_PATH] = { };

	push	520					; 00000208H
	lea	eax, DWORD PTR _wszPath$[ebp]
	mov	ecx, 139				; 0000008bH
	push	0
	rep movsd
	push	eax
	call	_memset
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	mov	edi, DWORD PTR __imp__wcsstr
	lea	eax, DWORD PTR _pe32$[ebp+36]
	push	OFFSET $SG185434
	push	eax
	call	edi
	add	esp, 28					; 0000001cH
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1182 :   if (wcsstr (pe32.szExeFile, L"RTSS.exe"))

	test	eax, eax
	je	SHORT $LN20@SK_GetRTSS

; 1183 :   {
; 1184 :     CHandle hProcess (

	push	DWORD PTR _pe32$[ebp+8]
	push	0
	push	4096					; 00001000H
	call	DWORD PTR __imp__OpenProcess@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1207 : 	m_h( h )

	mov	esi, eax
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1188 :     DWORD len = MAX_PATH;

	mov	DWORD PTR _len$3[ebp], 260		; 00000104H

; 1189 :     QueryFullProcessImageName (hProcess, 0, wszPath, &len);

	lea	eax, DWORD PTR _len$3[ebp]
	push	eax
	lea	eax, DWORD PTR _wszPath$[ebp]
	push	eax
	push	0
	push	esi
	call	DWORD PTR __imp__QueryFullProcessImageNameW@16
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	lea	eax, DWORD PTR _wszPath$[ebp]
	push	OFFSET $SG185435
	push	eax
	call	edi
	add	esp, 8
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1194 :     if (wszRTSS != nullptr)

	test	eax, eax
	je	SHORT $LN3@SK_GetRTSS

; 1195 :       *wszRTSS = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN3@SK_GetRTSS:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	esi, esi
	je	SHORT $LN20@SK_GetRTSS

; 1258 : 		::CloseHandle( m_h );

	push	esi
	call	DWORD PTR __imp__CloseHandle@4
$LN20@SK_GetRTSS:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	ecx, DWORD PTR _wszPath$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax

; 289  : 		return (_CSTD wcslen(_First));

	lea	edx, DWORD PTR [ecx+2]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
$LL46@SK_GetRTSS:

; 289  : 		return (_CSTD wcslen(_First));

	mov	ax, WORD PTR [ecx]
	add	ecx, 2
	test	ax, ax
	jne	SHORT $LL46@SK_GetRTSS
	sub	ecx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	lea	eax, DWORD PTR _wszPath$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	ecx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	ecx
	push	eax
	mov	ecx, esi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 1198 :   return wszPath;

	mov	eax, esi
	pop	esi

; 1199 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetRTSSInstallDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; SK_GetRTSSInstallDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_hToken$ = -20						; size = 4
_str$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; SK_GetFontsDir

; 96   : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1196 : 	m_h( NULL )

	mov	DWORD PTR _hToken$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 97   :   CHandle               hToken;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 335  : 		m_pData(NULL)

	mov	DWORD PTR _str$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 100  :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	lea	eax, DWORD PTR _hToken$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	push	131080					; 00020008H
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	jne	SHORT $LN61@SK_GetFont
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	6
	push	OFFSET $SG183189

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], eax

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR _str$[ebp]
	call	DWORD PTR __imp__CoTaskMemFree@4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 101  :     return L"(null)";

	jmp	SHORT $LN115@SK_GetFont
$LN61@SK_GetFont:
	push	edi

; 102  : 
; 103  :   SHGetKnownFolderPath (FOLDERID_Fonts, 0, hToken, &str);

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	DWORD PTR _hToken$[ebp]
	push	0
	push	OFFSET _FOLDERID_Fonts
	call	_SHGetKnownFolderPath@16
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, DWORD PTR _str$[ebp]
	mov	edx, eax
	lea	edi, DWORD PTR [edx+2]
$LL111@SK_GetFont:
	mov	cx, WORD PTR [edx]
	add	edx, 2
	test	cx, cx
	jne	SHORT $LL111@SK_GetFont
	sub	edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	edx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	edx
	push	eax
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR _str$[ebp]
	call	DWORD PTR __imp__CoTaskMemFree@4
	pop	edi
$LN115@SK_GetFont:

; 1213 : 	if( m_h != NULL )

	mov	ecx, DWORD PTR _hToken$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR _str$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	ecx, ecx
	je	SHORT $LN107@SK_GetFont

; 1258 : 		::CloseHandle( m_h );

	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
$LN107@SK_GetFont:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 106  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _hToken$[ebp]
	jmp	??1CHandle@ATL@@QAE@XZ			; ATL::CHandle::~CHandle
__unwindfunclet$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1?$CComHeapPtr@_W@ATL@@QAE@XZ
__ehhandler$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_GetFontsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; SK_GetFontsDir
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
$T2 = -24						; size = 4
_hToken$ = -20						; size = 4
_str$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ PROC ; SK_GetDocumentsDir

; 82   : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR $T2[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1196 : 	m_h( NULL )

	mov	DWORD PTR _hToken$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 83   :   CHandle               hToken;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 335  : 		m_pData(NULL)

	mov	DWORD PTR _str$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 86   :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	lea	eax, DWORD PTR _hToken$[ebp]
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	push	eax
	push	131080					; 00020008H
	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	jne	SHORT $LN61@SK_GetDocu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	6
	push	OFFSET $SG183176

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], eax

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR _str$[ebp]
	call	DWORD PTR __imp__CoTaskMemFree@4
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 87   :     return L"(null)";

	jmp	SHORT $LN115@SK_GetDocu
$LN61@SK_GetDocu:
	push	edi

; 88   : 
; 89   :   SHGetKnownFolderPath (FOLDERID_Documents, 0, hToken, &str);

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	DWORD PTR _hToken$[ebp]
	push	0
	push	OFFSET _FOLDERID_Documents
	call	_SHGetKnownFolderPath@16
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, DWORD PTR _str$[ebp]
	mov	edx, eax
	lea	edi, DWORD PTR [edx+2]
$LL111@SK_GetDocu:
	mov	cx, WORD PTR [edx]
	add	edx, 2
	test	cx, cx
	jne	SHORT $LL111@SK_GetDocu
	sub	edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	edx, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	edx
	push	eax
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR _str$[ebp]
	call	DWORD PTR __imp__CoTaskMemFree@4
	pop	edi
$LN115@SK_GetDocu:

; 1213 : 	if( m_h != NULL )

	mov	ecx, DWORD PTR _hToken$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR _str$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	ecx, ecx
	je	SHORT $LN107@SK_GetDocu

; 1258 : 		::CloseHandle( m_h );

	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
$LN107@SK_GetDocu:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 92   : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	eax, esi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$0:
	lea	ecx, DWORD PTR _hToken$[ebp]
	jmp	??1CHandle@ATL@@QAE@XZ			; ATL::CHandle::~CHandle
__unwindfunclet$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ$1:
	lea	ecx, DWORD PTR _str$[ebp]
	jmp	??1?$CComHeapPtr@_W@ATL@@QAE@XZ
__ehhandler$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_GetDocumentsDir@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@XZ ENDP ; SK_GetDocumentsDir
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_hToken$ = -8						; size = 4
_str$ = -4						; size = 4
_buf$ = 8						; size = 4
_pdwLen$ = 12						; size = 4
?SK_GetDocumentsDir@@YA_NPA_WPAI@Z PROC			; SK_GetDocumentsDir

; 110  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx

; 114  :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	lea	eax, DWORD PTR _hToken$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1196 : 	m_h( NULL )

	mov	DWORD PTR _hToken$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 114  :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	push	eax
	push	131080					; 00020008H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 335  : 		m_pData(NULL)

	mov	DWORD PTR _str$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 114  :   if (! OpenProcessToken (GetCurrentProcess (), TOKEN_READ, &hToken.m_h))

	call	DWORD PTR __imp__GetCurrentProcess@0
	push	eax
	call	DWORD PTR __imp__OpenProcessToken@12
	test	eax, eax
	jne	SHORT $LN34@SK_GetDocu

; 115  :   {
; 116  :     if (buf != nullptr && pdwLen != nullptr && *pdwLen > 0)

	mov	ecx, DWORD PTR _buf$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@SK_GetDocu
	mov	eax, DWORD PTR _pdwLen$[ebp]
	test	eax, eax
	je	SHORT $LN5@SK_GetDocu
	cmp	DWORD PTR [eax], 0
	jbe	SHORT $LN5@SK_GetDocu

; 117  :     {
; 118  :       *pdwLen = 0;

	mov	DWORD PTR [eax], 0

; 119  :       *buf    = L'\0';

	xor	eax, eax
	mov	WORD PTR [ecx], ax
$LN5@SK_GetDocu:

; 141  :   return false;

	xor	bl, bl
$LN10@SK_GetDocu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1130 : 		::CoTaskMemFree(p);

	push	DWORD PTR _str$[ebp]
	call	DWORD PTR __imp__CoTaskMemFree@4

; 1213 : 	if( m_h != NULL )

	mov	ecx, DWORD PTR _hToken$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlalloc.h

; 409  : 		m_pData = NULL;

	mov	DWORD PTR _str$[ebp], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 1213 : 	if( m_h != NULL )

	test	ecx, ecx
	je	SHORT $LN71@SK_GetDocu

; 1258 : 		::CloseHandle( m_h );

	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
$LN71@SK_GetDocu:
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 141  :   return false;

	mov	al, bl
	pop	ebx

; 142  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN34@SK_GetDocu:

; 120  :     }
; 121  : 
; 122  :     return false;
; 123  :   }
; 124  : 
; 125  :   if ( SUCCEEDED (

	lea	eax, DWORD PTR _str$[ebp]
	push	eax
	push	DWORD PTR _hToken$[ebp]
	push	0
	push	OFFSET _FOLDERID_Documents
	call	_SHGetKnownFolderPath@16
	test	eax, eax
	js	SHORT $LN5@SK_GetDocu

; 126  :          SHGetKnownFolderPath (
; 127  :            FOLDERID_Documents, 0, hToken, &str
; 128  :          )
; 129  :        )
; 130  :      )
; 131  :   {
; 132  :     if (buf != nullptr && pdwLen != nullptr && *pdwLen > 0)

	mov	ecx, DWORD PTR _buf$[ebp]
	test	ecx, ecx
	je	SHORT $LN5@SK_GetDocu
	mov	eax, DWORD PTR _pdwLen$[ebp]
	test	eax, eax
	je	SHORT $LN5@SK_GetDocu
	cmp	DWORD PTR [eax], 0
	jbe	SHORT $LN5@SK_GetDocu

; 133  :     {
; 134  :       *buf = '\0';

	xor	edx, edx
	mov	WORD PTR [ecx], dx

; 135  :       wcsncat (buf, str, *pdwLen);

	push	DWORD PTR [eax]
	push	DWORD PTR _str$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcsncat
	add	esp, 12					; 0000000cH

; 136  : 
; 137  :       return true;

	mov	bl, 1
	jmp	SHORT $LN10@SK_GetDocu
?SK_GetDocumentsDir@@YA_NPA_WPAI@Z ENDP			; SK_GetDocumentsDir
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
?SK_GetBlacklistFilename@@YAPB_WXZ PROC			; SK_GetBlacklistFilename
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 9003 :     return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);

	mov	ecx, 1
	mov	edx, OFFSET ?init@?1??SK_GetBlacklistFilename@@YAPB_WXZ@4KC
	xor	eax, eax
	lock	 cmpxchg DWORD PTR [edx], ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2267 :   if (! InterlockedCompareExchange (&init, TRUE, FALSE))

	test	eax, eax
	jne	SHORT $LN6@SK_GetBlac

; 2268 :   {
; 2269 :     lstrcatW (host_proc.wszBlacklist, SK_GetHostPath ());

	push	esi
	call	?SK_GetHostPath@@YAPB_WXZ		; SK_GetHostPath
	mov	esi, DWORD PTR __imp__lstrcatW@8
	push	eax
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+3120
	call	esi

; 2270 :     lstrcatW (host_proc.wszBlacklist, L"\\SpecialK.deny.");

	push	OFFSET $SG299006
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+3120
	call	esi

; 2271 :     lstrcatW (host_proc.wszBlacklist, SK_GetHostApp  ());

	call	?SK_GetHostApp@@YAPB_WXZ		; SK_GetHostApp
	push	eax
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+3120
	call	esi

; 2272 : 
; 2273 :     SK_PathRemoveExtension (host_proc.wszBlacklist);

	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+3120
	call	?SK_PathRemoveExtension@@YAXPA_W@Z	; SK_PathRemoveExtension
	add	esp, 4
	pop	esi
$LN6@SK_GetBlac:

; 2274 :   }
; 2275 : 
; 2276 :   return host_proc.wszBlacklist;

	mov	eax, OFFSET ?host_proc@@3Usk_host_process_s@@A+3120

; 2277 : }

	ret	0
?SK_GetBlacklistFilename@@YAPB_WXZ ENDP			; SK_GetBlacklistFilename
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszProcessName$1 = -1044				; size = 1040
_dwProcessSize$2 = -4					; size = 4
?SK_GetHostPath@@YAPB_WXZ PROC				; SK_GetHostPath

; 2367 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 1044				; 00000414H
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 9003 :     return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);

	mov	ecx, 1
	mov	edx, OFFSET ?init@?1??SK_GetHostPath@@YAPB_WXZ@4KC
	xor	eax, eax
	lock	 cmpxchg DWORD PTR [edx], ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2371 :   if (! InterlockedCompareExchange (&init, TRUE, FALSE))

	test	eax, eax
	jne	$LN25@SK_GetHost

; 2374 :     wchar_t wszProcessName [MAX_PATH * 2] = { };

	push	esi
	push	1040					; 00000410H
	push	eax
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	mov	DWORD PTR _dwProcessSize$2[ebp], 520	; 00000208H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2375 : 
; 2376 :     HANDLE hProc =
; 2377 :       GetCurrentProcess ();

	call	DWORD PTR __imp__GetCurrentProcess@0

; 2378 : 
; 2379 :     QueryFullProcessImageName (

	lea	ecx, DWORD PTR _dwProcessSize$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	push	ecx
	push	0
	push	eax
	call	DWORD PTR __imp__QueryFullProcessImageNameW@16

; 2380 :       hProc,
; 2381 :         0,
; 2382 :           wszProcessName,
; 2383 :             &dwProcessSize );
; 2384 : 
; 2385 :     int      len           = lstrlenW (wszProcessName);

	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	mov	esi, eax

; 2386 :     wchar_t* pwszShortName =           wszProcessName;

	lea	eax, DWORD PTR _wszProcessName$1[ebp]

; 2387 : 
; 2388 :     for (int i = 0; i < len; i++)

	test	esi, esi
	jle	SHORT $LN11@SK_GetHost

; 2372 :   {
; 2373 :     DWORD   dwProcessSize = MAX_PATH * 2;

	push	edi
	mov	edi, DWORD PTR __imp__CharNextW@4
	npad	6
$LL4@SK_GetHost:

; 2389 :       pwszShortName = CharNextW (pwszShortName);

	push	eax
	call	edi
	sub	esi, 1
	jne	SHORT $LL4@SK_GetHost

; 2390 : 
; 2391 :     wchar_t* wszFirstSep = nullptr;
; 2392 : 
; 2393 :     while (  pwszShortName > wszProcessName )

	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	pop	edi
	cmp	eax, ecx
	jbe	SHORT $LN11@SK_GetHost
	mov	esi, DWORD PTR __imp__CharPrevW@8
	npad	7
$LL5@SK_GetHost:

; 2394 :     {
; 2395 :       wchar_t* wszPrev =
; 2396 :         CharPrevW (wszProcessName, pwszShortName);

	push	eax
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	push	eax
	call	esi

; 2397 : 
; 2398 :       if (wszPrev < wszProcessName)

	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	cmp	eax, ecx
	jb	SHORT $LN11@SK_GetHost

; 2399 :         break;
; 2400 : 
; 2401 :       if (*wszPrev == L'\\' || *wszPrev == L'/')

	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN18@SK_GetHost
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN18@SK_GetHost

; 2390 : 
; 2391 :     wchar_t* wszFirstSep = nullptr;
; 2392 : 
; 2393 :     while (  pwszShortName > wszProcessName )

	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	cmp	eax, ecx
	ja	SHORT $LL5@SK_GetHost

; 2399 :         break;
; 2400 : 
; 2401 :       if (*wszPrev == L'\\' || *wszPrev == L'/')

	jmp	SHORT $LN11@SK_GetHost
$LN18@SK_GetHost:

; 2402 :       {                              // Leave the trailing separator
; 2403 :         wszFirstSep = wszPrev; 
; 2404 :         break;
; 2405 :       }
; 2406 : 
; 2407 :       pwszShortName = wszPrev;
; 2408 :     }
; 2409 : 
; 2410 :     if (wszFirstSep != nullptr)
; 2411 :        *wszFirstSep  = L'\0';

	xor	ecx, ecx
	mov	WORD PTR [eax], cx
$LN11@SK_GetHost:

; 2412 : 
; 2413 :     lstrcpynW (

	push	519					; 00000207H
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	push	eax
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A+1040
	call	DWORD PTR __imp__lstrcpynW@12
	pop	esi
$LN25@SK_GetHost:

; 2414 :       host_proc.wszPath,
; 2415 :         wszProcessName,
; 2416 :           MAX_PATH * 2 - 1
; 2417 :     );
; 2418 :   }
; 2419 : 
; 2420 :   return host_proc.wszPath;

	mov	eax, OFFSET ?host_proc@@3Usk_host_process_s@@A+1040

; 2421 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetHostPath@@YAPB_WXZ ENDP				; SK_GetHostPath
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\src\utility.cpp
_TEXT	SEGMENT
_wszProcessName$1 = -1044				; size = 1040
_dwProcessSize$2 = -4					; size = 4
?SK_GetHostApp@@YAPB_WXZ PROC				; SK_GetHostApp

; 2281 : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 1044				; 00000414H
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 9003 :     return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);

	mov	ecx, 1
	mov	edx, OFFSET ?init@?1??SK_GetHostApp@@YAPB_WXZ@4KC
	xor	eax, eax
	lock	 cmpxchg DWORD PTR [edx], ecx
; File c:\users\andon\source\repos\specialk\src\utility.cpp

; 2285 :   if (! InterlockedCompareExchange (&init, TRUE, FALSE))

	test	eax, eax
	jne	$LN22@SK_GetHost

; 2288 :     wchar_t wszProcessName [ MAX_PATH * 2 ] = { };

	push	esi
	push	edi
	push	1040					; 00000410H
	push	eax
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	mov	DWORD PTR _dwProcessSize$2[ebp], 520	; 00000208H
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 2289 : 
; 2290 :     HANDLE hProc =
; 2291 :       GetCurrentProcess ();

	call	DWORD PTR __imp__GetCurrentProcess@0

; 2292 : 
; 2293 :     QueryFullProcessImageName (

	lea	ecx, DWORD PTR _dwProcessSize$2[ebp]
	push	ecx
	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	push	ecx
	push	0
	push	eax
	call	DWORD PTR __imp__QueryFullProcessImageNameW@16

; 2294 :       hProc,
; 2295 :         0,
; 2296 :           wszProcessName,
; 2297 :             &dwProcessSize );
; 2298 : 
; 2299 :     int      len           = lstrlenW (wszProcessName);

	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	push	eax
	call	DWORD PTR __imp__lstrlenW@4
	mov	edi, eax

; 2300 :     wchar_t* pwszShortName =           wszProcessName;

	lea	esi, DWORD PTR _wszProcessName$1[ebp]

; 2301 : 
; 2302 :     for (int i = 0; i < len; i++)

	test	edi, edi
	jle	SHORT $LN23@SK_GetHost

; 2286 :   {
; 2287 :     DWORD   dwProcessSize =  MAX_PATH * 2;

	push	ebx
	mov	ebx, DWORD PTR __imp__CharNextW@4
	npad	5
$LL4@SK_GetHost:

; 2303 :       pwszShortName = CharNextW (pwszShortName);

	push	esi
	call	ebx
	mov	esi, eax
	sub	edi, 1
	jne	SHORT $LL4@SK_GetHost

; 2304 : 
; 2305 :     while (  pwszShortName > wszProcessName )

	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	pop	ebx
	cmp	esi, eax
	jbe	SHORT $LN23@SK_GetHost
	mov	edi, DWORD PTR __imp__CharPrevW@8
	npad	5
$LL5@SK_GetHost:

; 2306 :     {
; 2307 :       wchar_t* wszPrev =
; 2308 :         CharPrevW (wszProcessName, pwszShortName);

	push	esi
	lea	eax, DWORD PTR _wszProcessName$1[ebp]
	push	eax
	call	edi

; 2309 : 
; 2310 :       if (wszPrev < wszProcessName)

	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	cmp	eax, ecx
	jb	SHORT $LN23@SK_GetHost

; 2311 :         break;
; 2312 : 
; 2313 :       if (*wszPrev != L'\\' && *wszPrev != L'/')

	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 92					; 0000005cH
	je	SHORT $LN23@SK_GetHost
	cmp	ecx, 47					; 0000002fH
	je	SHORT $LN23@SK_GetHost

; 2314 :       {
; 2315 :         pwszShortName = wszPrev;

	lea	ecx, DWORD PTR _wszProcessName$1[ebp]
	mov	esi, eax
	cmp	eax, ecx
	ja	SHORT $LL5@SK_GetHost
$LN23@SK_GetHost:

; 2316 :         continue;
; 2317 :       }
; 2318 : 
; 2319 :       break;
; 2320 :     }
; 2321 : 
; 2322 :     lstrcpynW (

	push	519					; 00000207H
	push	esi
	push	OFFSET ?host_proc@@3Usk_host_process_s@@A ; host_proc
	call	DWORD PTR __imp__lstrcpynW@12
	pop	edi
	pop	esi
$LN22@SK_GetHost:

; 2323 :       host_proc.wszApp,
; 2324 :         pwszShortName,
; 2325 :           MAX_PATH * 2 - 1
; 2326 :     );
; 2327 :   }
; 2328 : 
; 2329 :   return host_proc.wszApp;

	mov	eax, OFFSET ?host_proc@@3Usk_host_process_s@@A ; host_proc

; 2330 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_GetHostApp@@YAPB_WXZ ENDP				; SK_GetHostApp
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran, COMDAT

; 3646 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
	int	3
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset, COMDAT
; _this$ = ecx

; 3629 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Off$[ebp]
	jb	SHORT $LN14@Check_offs

; 3633 : 			}
; 3634 : 		}

	pop	ebp
	ret	4
$LN14@Check_offs:

; 3631 : 			{
; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN16@Check_offs:
$LN13@Check_offs:
	int	3
?_Check_offset@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen, COMDAT

; 3625 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3605 : 		{	// initialize buffer, deallocating any storage

	npad	2
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 8

; 3606 : 		this->_Orphan_all();
; 3607 : 		auto& _My_data = this->_Get_data();
; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN2@Tidy_deall
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN2@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3621 : 		}

	ret	0
?_Tidy_deallocate@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3602 : 		}

	ret	0
?_Tidy_init@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside, COMDAT
; _this$ = ecx

; 3588 : 		{	// test if _Ptr points inside string

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@Inside
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN14@Inside
$LN13@Inside:
	mov	edx, ecx
$LN14@Inside:

; 3589 : 		const auto& _My_data = this->_Get_data();
; 3590 : 		const _Elem * const _My_chars = _My_data._Myptr();
; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	cmp	edx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	eax, DWORD PTR [ecx+16]
	lea	eax, DWORD PTR [edx+eax*2]
	cmp	DWORD PTR __Ptr$[ebp], eax
	jae	SHORT $LN3@Inside
	mov	al, 1

; 3592 : 		}

	pop	ebp
	ret	4
$LN3@Inside:

; 3589 : 		const auto& _My_data = this->_Get_data();
; 3590 : 		const _Elem * const _My_chars = _My_data._Myptr();
; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	xor	al, al

; 3592 : 		}

	pop	ebp
	ret	4
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NQB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow, COMDAT
; _this$ = ecx

; 3572 : 		{	// ensure buffer is big enough

	npad	2
	push	ebp
	mov	ebp, esp

; 3573 : 		if (_Newsize == 0)

	mov	eax, DWORD PTR __Newsize$[ebp]
	test	eax, eax
	jne	SHORT $LN2@Grow

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN16@Grow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN16@Grow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3576 : 			return (false);

	xor	al, al

; 3585 : 		}

	pop	ebp
	ret	4
$LN2@Grow:

; 3577 : 			}
; 3578 : 
; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [ecx+20], eax
	jae	SHORT $LN3@Grow

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	eax
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
$LN3@Grow:

; 3582 : 			}
; 3583 : 
; 3584 : 		return (true);	// return true only if more work to do

	mov	al, 1

; 3585 : 		}

	pop	ebp
	ret	4
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos, COMDAT
; _this$ = ecx

; 3566 : 		{	// set new length and null terminator

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 3567 : 		auto& _My_data = this->_Get_data();
; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Eos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3569 : 		}

	pop	ebp
	ret	4
$LN11@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
	mov	WORD PTR [ecx+edx*2], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3569 : 		}

	pop	ebp
	ret	4
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldres$ = -28						; size = 4
_this$ = -24						; size = 4
__Ptr$1$ = -20						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy, COMDAT
; _this$ = ecx

; 3514 : 		{	// reallocate to new buffer of at least _Newsize, copying existing elements there

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H

; 3515 : 		const auto _Max = max_size();
; 3516 : 		if (_Newsize > _Max)

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	cmp	eax, 2147483646				; 7ffffffeH
	jbe	SHORT $LN2@Copy

; 3517 : 			{	// too long
; 3518 : 			_Xlen();

	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN102@Copy:
$LN2@Copy:

; 3519 : 			}
; 3520 : 
; 3521 : 		auto& _My_data = this->_Get_data();
; 3522 : 		const size_type _Oldres = _My_data._Myres;

	mov	ebx, DWORD PTR [esi+20]

; 3523 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	edi, eax
	or	edi, 7
	mov	DWORD PTR __Oldres$[ebp], ebx

; 3524 : 		if (_Max < _Newres)

	cmp	edi, 2147483646				; 7ffffffeH
	jbe	SHORT $LN3@Copy

; 3525 : 			{
; 3526 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	edi, eax
	jmp	SHORT $LN8@Copy
$LN3@Copy:

; 3527 : 			}
; 3528 : 		else if (_Oldres / 2 <= _Newres / 3)

	mov	eax, -1431655765			; aaaaaaabH
	mov	ecx, ebx
	mul	edi
	shr	ecx, 1
	shr	edx, 1
	cmp	ecx, edx
	jbe	SHORT $LN8@Copy

; 3529 : 			;
; 3530 : 		else if (_Oldres <= _Max - _Oldres / 2)

	mov	eax, 2147483646				; 7ffffffeH

; 3531 : 			{
; 3532 : 			_Newres = _Oldres + _Oldres / 2;	// grow exponentially if possible

	lea	edi, DWORD PTR [ecx+ebx]
	sub	eax, ecx
	cmp	ebx, eax
	jbe	SHORT $LN8@Copy

; 3533 : 			}
; 3534 : 		else
; 3535 : 			{
; 3536 : 			_Newres = _Max;	// settle for max_size()

	mov	edi, 2147483646				; 7ffffffeH
$LN8@Copy:

; 3537 : 			}
; 3538 : 
; 3539 : 		auto& _Al = this->_Getal();
; 3540 : 		pointer _Ptr;
; 3541 : 		_TRY_BEGIN
; 3542 : 			_Ptr = _Al.allocate(_Newres + 1);

	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	eax
	mov	ecx, esi
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
	mov	ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
	jmp	SHORT $LN100@Copy
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z$0:

; 3544 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	mov	ecx, DWORD PTR _this$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3544 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	DWORD PTR __Newres$[ebp], eax

; 3545 : 			_Ptr = _Al.allocate(_Newres + 1);	// if throws, *this unmodified

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 1077 : 		return (_Mybase::allocate(_Count));

	push	eax
	call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3545 : 			_Ptr = _Al.allocate(_Newres + 1);	// if throws, *this unmodified

	mov	DWORD PTR __Ptr$[ebp], eax

; 3546 : 		_CATCH_END

	mov	eax, $LN97@Copy
	ret	0
$LN97@Copy:
	mov	esi, DWORD PTR _this$[ebp]
	mov	ebx, DWORD PTR __Oldres$[ebp]
	mov	edi, DWORD PTR __Newres$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
$LN100@Copy:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3546 : 		_CATCH_END

	mov	DWORD PTR __Ptr$1$[ebp], ecx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [eax*2+2]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3550 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN10@Copy
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	DWORD PTR [esi]
	push	ecx
	call	_memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3553 : 			_Al.deallocate(_My_data._Bx._Ptr, _Oldres + 1);

	lea	eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3556 : 		else

	jmp	SHORT $LN101@Copy
$LN10@Copy:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	esi
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN101@Copy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3563 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3562 : 		_My_data._Myres = _Newres;

	mov	DWORD PTR [esi+20], edi

; 3563 : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN99@Copy:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 2
?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign, COMDAT
; _this$ = ecx

; 3502 : 		{	// assign _Count copies of _Ch beginning at _Off

	npad	2
	push	ebp
	mov	ebp, esp
	mov	edx, ecx

; 3503 : 		if (_Count == 1)

	mov	ecx, DWORD PTR __Count$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN2@Chassign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN15@Chassign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [edx]
$LN15@Chassign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	ecx, DWORD PTR __Off$[ebp]
	mov	ax, WORD PTR __Ch$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3511 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN2@Chassign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN34@Chassign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [edx]
$LN34@Chassign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3509 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

	mov	eax, DWORD PTR __Off$[ebp]
	push	edi
	lea	edi, DWORD PTR [edx+eax*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 260  :         for (; 0 < _N; ++_Su, --_N)

	test	ecx, ecx
	je	SHORT $LN52@Chassign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 321  : 		return ((_Elem *)_CSTD wmemset(_First, _Ch, _Count));

	mov	eax, DWORD PTR __Ch$[ebp]
	movzx	edx, ax
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
$LN52@Chassign:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3511 : 		}

	pop	ebp
	ret	12					; 0000000cH
?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 3410 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

	npad	2
	push	ebp
	mov	ebp, esp

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	mov	ecx, DWORD PTR [ecx+16]
	sub	ecx, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Size$[ebp]
	cmp	ecx, eax
	cmovb	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3412 : 		}

	pop	ebp
	ret	8
?_Clamp_suffix_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIII@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI_W@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 2
?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::resize, COMDAT
; _this$ = ecx

; 3040 : 		{	// determine new length, padding with _Ch elements as needed

	npad	2
	push	ebp
	mov	ebp, esp

; 3041 : 		if (_Newsize <= this->_Mysize())

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, edx
	ja	SHORT $LN2@resize

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN25@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN25@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edx, edx
	mov	WORD PTR [ecx+eax*2], dx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3049 : 		}

	pop	ebp
	ret	8
$LN2@resize:

; 3042 : 			{
; 3043 : 			_Eos(_Newsize);
; 3044 : 			}
; 3045 : 		else
; 3046 : 			{
; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	sub	eax, edx
	mov	DWORD PTR __Newsize$[ebp], eax

; 3049 : 		}

	pop	ebp

; 3042 : 			{
; 3043 : 			_Eos(_Newsize);
; 3044 : 			}
; 3045 : 		else
; 3046 : 			{
; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	jmp	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::resize, COMDAT
; _this$ = ecx

; 3035 : 		{	// determine new length, padding with null elements as needed

	npad	2
	push	ebp
	mov	ebp, esp

; 3041 : 		if (_Newsize <= this->_Mysize())

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, edx
	ja	SHORT $LN4@resize

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN27@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN27@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edx, edx
	mov	WORD PTR [ecx+eax*2], dx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3037 : 		}

	pop	ebp
	ret	4
$LN4@resize:

; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	push	0
	sub	eax, edx
	push	eax
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append

; 3037 : 		}

	pop	ebp
	ret	4
?resize@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 3030 : 		const size_type _Num = this->_Getal().max_size();
; 3031 : 		return (_Num <= 1 ? 1 : _Num - 1);

	mov	eax, 2147483646				; 7ffffffeH

; 3032 : 		}

	ret	0
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length, COMDAT
; _this$ = ecx

; 3020 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [ecx+16]

; 3021 : 		}

	ret	0
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?data@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?data@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPA_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::data, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@data

; 3014 : 		return (this->_Myptr());

	mov	eax, DWORD PTR [ecx]

; 3015 : 		}

	ret	0
$LN13@data:

; 3014 : 		return (this->_Myptr());

	mov	eax, ecx

; 3015 : 		}

	ret	0
?data@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPA_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@c_str

; 3003 : 		return (this->_Myptr());

	mov	eax, DWORD PTR [ecx]

; 3004 : 		}

	ret	0
$LN13@c_str:

; 3003 : 		return (this->_Myptr());

	mov	eax, ecx

; 3004 : 		}

	ret	0
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end, COMDAT
; _this$ = ecx

; 2870 : 		{	// return iterator for end of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN14@end

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	eax, DWORD PTR [ecx+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	lea	ecx, DWORD PTR [edx+eax*2]

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 2873 : 		}

	pop	ebp
	ret	4
$LN14@end:

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	eax, DWORD PTR [ecx+16]

; 1614 : 		return (_Large_string_engaged()

	mov	edx, ecx

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	lea	ecx, DWORD PTR [edx+eax*2]

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 2873 : 		}

	pop	ebp
	ret	4
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin, COMDAT
; _this$ = ecx

; 2858 : 		{	// return iterator for beginning of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN14@begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN14@begin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1195 : 		: _Ptr(_Parg)

	mov	DWORD PTR [eax], ecx

; 2859 : 		auto _My_data = _STD addressof(this->_Get_data());
; 2860 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()), _My_data));
; 2861 : 		}

	pop	ebp
	ret	4
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 2617 : 		{	// erase substring [_First, _Last)

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN18@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
$LN18@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1319 : 		return (_Ptr - _Right._Ptr);

	mov	edi, DWORD PTR __First$[ebp]
	sub	edi, ecx
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __First$[ebp]
	sar	ecx, 1

; 2618 : 		_DEBUG_RANGE(_First, _Last);
; 2619 : 		const size_type _Count = _First - begin();
; 2620 : 		erase(_Count, _Last - _First);

	push	ecx

; 1319 : 		return (_Ptr - _Right._Ptr);

	sar	edi, 1

; 2618 : 		_DEBUG_RANGE(_First, _Last);
; 2619 : 		const size_type _Count = _First - begin();
; 2620 : 		erase(_Count, _Last - _First);

	mov	ecx, esi
	push	edi
	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN64@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	esi, DWORD PTR [esi]
$LN64@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1482 : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1295 : 		_Ptr += _Off;

	lea	ecx, DWORD PTR [esi+edi*2]
	pop	edi
	pop	esi

; 1482 : 		return (_Tmp += _Off);

	mov	DWORD PTR [eax], ecx

; 2621 : 		return (begin() + _Count);
; 2622 : 		}

	pop	ebp
	ret	12					; 0000000cH
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 2592 : 		{	// erase elements [_Off, _Off + _Count)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edx, DWORD PTR __Off$[ebp]
	push	ebx
	push	esi

; 2592 : 		{	// erase elements [_Off, _Off + _Count)

	mov	esi, ecx
	push	edi

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edi, DWORD PTR [esi+16]
	cmp	edi, edx
	jb	$LN97@erase

; 2593 : 		_Check_offset(_Off);
; 2594 : 		if (this->_Mysize() - _Off <= _Count)

	mov	ebx, DWORD PTR __Count$[ebp]
	mov	eax, edi
	sub	eax, edx
	cmp	eax, ebx
	ja	SHORT $LN2@erase

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN38@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [eax+edx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN38@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	WORD PTR [eax+edx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2607 : 		}

	pop	ebp
	ret	8
$LN2@erase:

; 2595 : 			{
; 2596 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 2597 : 			}
; 2598 : 		else if (_Count != 0)

	test	ebx, ebx
	je	SHORT $LN94@erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN57@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN58@erase
$LN57@erase:
	mov	eax, esi
$LN58@erase:

; 2599 : 			{	// move elements down
; 2600 : 			value_type *_Ptr = this->_Myptr() + _Off;

	lea	ecx, DWORD PTR [eax+edx*2]

; 2601 : 			size_type _Newsize = this->_Mysize() - _Count;

	sub	edi, ebx
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, edi
	sub	eax, edx
	add	eax, eax
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2602 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	lea	eax, DWORD PTR [ecx+ebx*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN87@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN87@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
$LN94@erase:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN97@erase:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN99@erase:
$LN96@erase:
	int	3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase, COMDAT
; _this$ = ecx

; 2585 : 		{	// erase elements [_Off, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jb	SHORT $LN36@erase

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN26@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	esi, esi
	mov	WORD PTR [edx+eax*2], si
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2588 : 		return (*this);

	mov	eax, ecx
	pop	esi

; 2589 : 		}

	pop	ebp
	ret	4
$LN26@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	edx, ecx
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	esi, esi
	mov	WORD PTR [edx+eax*2], si
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2588 : 		return (*this);

	mov	eax, ecx
	pop	esi

; 2589 : 		}

	pop	ebp
	ret	4
$LN36@erase:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN38@erase:
$LN35@erase:
	int	3
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2428 : 		{	// assign [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2428 : 		{	// assign [_Ptr, <null>)

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	edi, DWORD PTR [eax+2]
$LL6@assign:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL6@assign
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi
	pop	esi

; 2430 : 		}

	pop	ebp
	ret	4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2412 : 		{	// assign [_Ptr, _Ptr + _Count)

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN17@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN18@assign
$LN17@assign:
	mov	edx, esi
$LN18@assign:

; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	mov	edi, DWORD PTR __Ptr$[ebp]
	cmp	edx, edi
	ja	SHORT $LN2@assign
	mov	eax, DWORD PTR [esi+16]
	lea	eax, DWORD PTR [edx+eax*2]
	cmp	edi, eax
	jae	SHORT $LN2@assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN33@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN34@assign
$LN33@assign:
	mov	eax, esi
$LN34@assign:

; 2413 : 		if (_Inside(_Ptr))
; 2414 : 			{
; 2415 : 			return (assign(*this, _Ptr - this->_Myptr(), _Count));	// substring

	push	DWORD PTR __Count$[ebp]
	sub	edi, eax
	mov	ecx, esi
	sar	edi, 1
	push	edi
	push	esi
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi
	pop	esi

; 2425 : 		}

	pop	ebp
	ret	8
$LN2@assign:
	push	ebx

; 3573 : 		if (_Newsize == 0)

	mov	ebx, DWORD PTR __Count$[ebp]
	test	ebx, ebx
	jne	SHORT $LN40@assign

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ebx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN53@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	ebx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2424 : 		return (*this);

	mov	eax, esi
	pop	esi

; 2425 : 		}

	pop	ebp
	ret	8
$LN53@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	ebx
	pop	edi
	pop	esi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2425 : 		}

	pop	ebp
	ret	8
$LN40@assign:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	ecx, ebx
	jae	SHORT $LN41@assign

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	ebx
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
$LN41@assign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN81@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN82@assign
$LN81@assign:
	mov	eax, esi
$LN82@assign:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	ecx, DWORD PTR [ebx+ebx]
	push	ecx
	push	edi
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ebx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN102@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+ebx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2424 : 		return (*this);

	mov	eax, esi
	pop	ebx
	pop	edi
	pop	esi

; 2425 : 		}

	pop	ebp
	ret	8
$LN102@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+ebx*2], cx
	pop	ebx
	pop	edi
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2425 : 		}

	pop	ebp
	ret	8
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign, COMDAT
; _this$ = ecx

; 2378 : 		{	// assign _Right [_Roff, _Roff + _Count)

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 3630 : 		if (this->_Mysize() < _Off)

	mov	ebx, DWORD PTR __Right$[ebp]
	push	esi

; 2378 : 		{	// assign _Right [_Roff, _Roff + _Count)

	mov	esi, ecx

; 3630 : 		if (this->_Mysize() < _Off)

	mov	ecx, DWORD PTR __Roff$[ebp]
	push	edi
	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, ecx
	jb	$LN161@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	edi, DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	sub	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	cmp	eax, edi
	cmovb	edi, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2382 : 		if (this == _STD addressof(_Right))

	cmp	esi, ebx
	jne	SHORT $LN2@assign

; 2383 : 			{	// substring
; 2384 : 			erase(_Roff + _Count);

	lea	eax, DWORD PTR [ecx+edi]

; 3630 : 		if (this->_Mysize() < _Off)

	cmp	DWORD PTR [esi+16], eax
	jb	$LN163@assign

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN62@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN63@assign
$LN62@assign:
	mov	edx, esi
$LN63@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edi, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	push	ecx
	push	edi
	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [edx+eax*2], di
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::erase
	pop	edi

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN2@assign:

; 3573 : 		if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN72@assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN85@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN85@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN72@assign:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN73@assign

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	mov	ecx, DWORD PTR __Roff$[ebp]
$LN73@assign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ebx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN113@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ebx, DWORD PTR [ebx]
$LN113@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN129@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN130@assign
$LN129@assign:
	mov	edx, esi
$LN130@assign:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [edi+edi]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2389 : 			_Traits::copy(this->_Myptr(), _Right._Myptr() + _Roff, _Count);

	lea	eax, DWORD PTR [ebx+ecx*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN150@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2393 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN150@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN161@assign:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN164@assign:
$LN163@assign:
	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN165@assign:
$LN160@assign:
	int	3
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 2
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 2348 : 		{	// append _Count * _Ch

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 2349 : 		if (npos - this->_Mysize() <= _Count)

	mov	ebx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	ecx, DWORD PTR [esi+16]
	mov	eax, ecx
	not	eax
	cmp	eax, ebx
	jbe	SHORT $LN85@append

; 2352 : 			}
; 2353 : 
; 2354 : 		const size_type _Num = this->_Mysize() + _Count;

	lea	edi, DWORD PTR [ecx+ebx]

; 2355 : 		if (_Count != 0 && _Grow(_Num))

	test	ebx, ebx
	je	SHORT $LN81@append

; 3573 : 		if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN24@append

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN37@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2361 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2362 : 		}

	pop	ebp
	ret	8
$LN37@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2362 : 		}

	pop	ebp
	ret	8
$LN24@append:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN25@append

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
$LN25@append:

; 2356 : 			{	// make room and append new stuff using assign
; 2357 : 			_Chassign(this->_Mysize(), _Count, _Ch);

	push	DWORD PTR __Ch$[ebp]
	mov	ecx, esi
	push	ebx
	push	DWORD PTR [esi+16]
	call	?_Chassign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Chassign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN74@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2361 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2362 : 		}

	pop	ebp
	ret	8
$LN74@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
$LN81@append:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2361 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2362 : 		}

	pop	ebp
	ret	8
$LN85@append:

; 2350 : 			{
; 2351 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN87@append:
$LN84@append:
	int	3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 2343 : 		{	// append [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2343 : 		{	// append [_Ptr, <null>)

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	edi, DWORD PTR [eax+2]
$LL6@append:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL6@append
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	pop	edi
	pop	esi

; 2345 : 		}

	pop	ebp
	ret	4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 2321 : 		{	// append [_Ptr, _Ptr + _Count)

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	edx, DWORD PTR [esi+20]
	cmp	edx, 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN19@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
$LN19@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	mov	edi, DWORD PTR __Ptr$[ebp]
	cmp	ecx, edi
	ja	SHORT $LN2@append
	mov	eax, DWORD PTR [esi+16]
	lea	eax, DWORD PTR [ecx+eax*2]
	cmp	edi, eax
	jae	SHORT $LN2@append

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	edx, 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN34@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN35@append
$LN34@append:
	mov	eax, esi
$LN35@append:

; 2322 : 		if (_Inside(_Ptr))
; 2323 : 			{
; 2324 : 			return (append(*this, _Ptr - this->_Myptr(), _Count));	// substring

	push	DWORD PTR __Count$[ebp]
	sub	edi, eax
	mov	ecx, esi
	sar	edi, 1
	push	edi
	push	esi
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	pop	edi
	pop	esi

; 2340 : 		}

	pop	ebp
	ret	8
$LN2@append:

; 2325 : 			}
; 2326 : 
; 2327 : 		if (npos - this->_Mysize() <= _Count)

	mov	ecx, DWORD PTR __Count$[ebp]
	push	ebx
	mov	ebx, DWORD PTR [esi+16]
	mov	eax, ebx
	not	eax
	cmp	eax, ecx
	jbe	$LN142@append

; 2330 : 			}
; 2331 : 
; 2332 : 		const size_type _Num = this->_Mysize() + _Count;

	add	ebx, ecx

; 2333 : 		if (_Count != 0 && _Grow(_Num))

	test	ecx, ecx
	je	SHORT $LN137@append

; 3573 : 		if (_Newsize == 0)

	test	ebx, ebx
	jne	SHORT $LN59@append

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ebx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	edx, 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN72@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	ebx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2339 : 		return (*this);

	mov	eax, esi
	pop	esi

; 2340 : 		}

	pop	ebp
	ret	8
$LN72@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	ebx
	pop	edi
	pop	esi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2340 : 		}

	pop	ebp
	ret	8
$LN59@append:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	edx, ebx
	jae	SHORT $LN60@append

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	ebx
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	mov	ecx, DWORD PTR __Count$[ebp]
$LN60@append:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN100@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN101@append
$LN100@append:
	mov	edx, esi
$LN101@append:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [ecx+ecx]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2335 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

	mov	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2335 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Ptr, _Count);

	lea	eax, DWORD PTR [edx+eax*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ebx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN130@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+ebx*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2339 : 		return (*this);

	mov	eax, esi
	pop	ebx
	pop	edi
	pop	esi

; 2340 : 		}

	pop	ebp
	ret	8
$LN130@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+ebx*2], cx
$LN137@append:
	pop	ebx
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2339 : 		return (*this);

	mov	eax, esi
	pop	esi

; 2340 : 		}

	pop	ebp
	ret	8
$LN142@append:

; 2328 : 			{
; 2329 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN144@append:
$LN141@append:
	int	3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
tv494 = 16						; size = 4
__Count$ = 16						; size = 4
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append, COMDAT
; _this$ = ecx

; 2288 : 		{	// append _Right [_Roff, _Roff + _Count)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edx, DWORD PTR __Roff$[ebp]
	push	ebx
	mov	ebx, DWORD PTR __Right$[ebp]
	push	esi
	push	edi

; 2288 : 		{	// append _Right [_Roff, _Roff + _Count)

	mov	esi, ecx

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR [ebx+16]
	cmp	eax, edx
	jb	$LN150@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	ecx, DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	sub	eax, edx

; 2291 : 		if (npos - this->_Mysize() <= _Count)

	mov	edi, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	cmp	eax, ecx
	cmovb	ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2291 : 		if (npos - this->_Mysize() <= _Count)

	mov	eax, edi
	not	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	DWORD PTR __Count$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2291 : 		if (npos - this->_Mysize() <= _Count)

	cmp	eax, ecx
	jbe	$LN152@append

; 2294 : 			}
; 2295 : 
; 2296 : 		const size_type _Num = this->_Mysize() + _Count;

	add	edi, ecx

; 2297 : 		if (_Count != 0 && _Grow(_Num))

	test	ecx, ecx
	je	$LN146@append

; 3573 : 		if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN52@append

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN65@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2302 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2303 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN65@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2303 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN52@append:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN53@append

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Copy
	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __Roff$[ebp]
$LN53@append:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ebx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN93@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ebx, DWORD PTR [ebx]
$LN93@append:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN109@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR tv494[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN110@append
$LN109@append:
	mov	DWORD PTR tv494[ebp], esi
$LN110@append:
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	lea	eax, DWORD PTR [ecx+ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2299 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Right._Myptr() + _Roff, _Count);

	mov	ecx, DWORD PTR tv494[ebp]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2299 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Right._Myptr() + _Roff, _Count);

	lea	eax, DWORD PTR [ebx+edx*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2299 : 			_Traits::copy(this->_Myptr() + this->_Mysize(), _Right._Myptr() + _Roff, _Count);

	mov	eax, DWORD PTR [esi+16]
	lea	eax, DWORD PTR [ecx+eax*2]
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN139@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2302 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2303 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN139@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
	mov	WORD PTR [eax+edi*2], cx
$LN146@append:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2302 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2303 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN150@append:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xran
$LN153@append:
$LN152@append:

; 2292 : 			{
; 2293 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Xlen
$LN154@append:
$LN149@append:
	int	3
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=, COMDAT
; _this$ = ecx

; 2272 : 		{	// append [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2272 : 		{	// append [_Ptr, <null>)

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	lea	edi, DWORD PTR [eax+2]
$LL8@operator:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL8@operator
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2344 : 		return (append(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::append
	pop	edi
	pop	esi

; 2273 : 		return (append(_Ptr));
; 2274 : 		}

	pop	ebp
	ret	4
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::operator+=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2215 : 		{	// destroy the string

	npad	2
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 8

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN4@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN4@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2217 : 		}

	ret	0
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Assign_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Assign_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_lv_contents, COMDAT
; _this$ = ecx

; 2172 : 		{	// assign by copying the data stored in _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 2173 : 			// pre: *this is in a valid but unspecified state
; 2174 : 		assign(_Right, 0, npos);

	push	-1
	push	0
	push	DWORD PTR __Right$[ebp]
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 2175 : 		}

	pop	ebp
	ret	4
?_Assign_lv_contents@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXABV12@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_lv_contents
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2122 : 		{	// assign by stealing _Right's buffer, memcpy optimization

	npad	2
	push	ebp
	mov	ebp, esp

; 2123 : 			// pre: this != &_Right
; 2124 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2125 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2126 : 		auto& _Right_data = _Right._Get_data();
; 2127 : 
; 2128 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2129 : 		if (_Right_data._Large_string_engaged())
; 2130 : 			{	// take ownership of _Right's iterators along with its buffer
; 2131 : 			this->_Swap_all(_Right);
; 2132 : 			}
; 2133 : 		else
; 2134 : 			{
; 2135 : 			_Right._Orphan_all();
; 2136 : 			}
; 2137 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2138 : 
; 2139 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2140 : 			+ _Memcpy_move_offset;
; 2141 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2142 : 			+ _Memcpy_move_offset;
; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	ecx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [eax], cx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2145 : 		}

	pop	ebp
	ret	8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 2054 : 		{	// construct by moving _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	edx, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [eax], dx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2056 : 		}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1980 : 		{	// construct from [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]

; 326  : 		_Left = _Right;

	xor	eax, eax
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1980 : 		{	// construct from [_Ptr, <null>)

	mov	esi, ecx
	push	edi

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, edx
	lea	edi, DWORD PTR [eax+2]
$LL25@basic_stri:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL25@basic_stri
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 289  : 		return (_CSTD wcslen(_First));

	sar	eax, 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	push	eax
	push	edx
	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@QB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign
	pop	edi

; 1981 : 		_Tidy_init();
; 1982 : 		assign(_Ptr);
; 1983 : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@QB_W@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [ecx], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1941 : 		}

	mov	eax, ecx
	ret	0
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1925 : 		{	// construct by copying _Right

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	xor	eax, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2174 : 		assign(_Right, 0, npos);

	push	-1
	push	eax
	push	DWORD PTR __Right$[ebp]

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 7
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 326  : 		_Left = _Right;

	mov	WORD PTR [esi], ax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2174 : 		assign(_Right, 0, npos);

	call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::assign

; 1926 : 		_Tidy_init();
; 1927 : 		_Assign_lv_contents(_Right);
; 1928 : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ENDP ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::~_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>, COMDAT
; _this$ = ecx
	ret	0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 343  : 		return (_Myval2);

	mov	eax, ecx

; 344  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 338  : 		return (_Myval2);

	mov	eax, ecx

; 339  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 323  : 		return (*this);

	mov	eax, ecx

; 324  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 318  : 		return (*this);

	mov	eax, ecx

; 319  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@V?$_String_val@U?$_Simple_types@_W@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<wchar_t> >,std::_String_val<std::_Simple_types<wchar_t> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres, COMDAT
; _this$ = ecx

; 1849 : 		return (_Get_data()._Myres);

	lea	eax, DWORD PTR [ecx+20]

; 1850 : 		}

	ret	0
?_Myres@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 1844 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1845 : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize, COMDAT
; _this$ = ecx

; 1839 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1840 : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 1834 : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 1835 : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data, COMDAT
; _this$ = ecx

; 1829 : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 1830 : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 1824 : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 1825 : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal, COMDAT
; _this$ = ecx

; 1819 : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 1820 : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 1809 : 		_Get_data()._Orphan_all();
; 1810 : 		}

	ret	0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1697 : 		}

	mov	eax, ecx

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 1697 : 		}

	ret	0
??0?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Myptr

; 1690 : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 1691 : 		}

	ret	0
$LN11@Myptr:

; 1690 : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 1691 : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBEPB_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ PROC ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Myptr

; 1685 : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 1686 : 		}

	ret	0
$LN11@Myptr:

; 1685 : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 1686 : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEPA_WXZ ENDP ; std::_String_alloc<std::_String_base_types<wchar_t,std::allocator<wchar_t> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::~_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1639 : 			}

	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1634 : 			{	// user-provided, for fancy pointers
; 1635 : 			}

	mov	eax, ecx
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1627 : 		{	// returns whether the large string mode (allocated memory) is engaged

	cmp	DWORD PTR [ecx+20], 8
	setae	al

; 1628 : 		return (this->_BUF_SIZE <= _Myres);
; 1629 : 		}

	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 1622 : 			? _Unfancy(_Bx._Ptr)
; 1623 : 			: _Bx._Buf);
; 1624 : 		}

	ret	0
$LN3@Myptr:

; 1621 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 1622 : 			? _Unfancy(_Bx._Ptr)
; 1623 : 			: _Bx._Buf);
; 1624 : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 8

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 1615 : 			? _Unfancy(_Bx._Ptr)
; 1616 : 			: _Bx._Buf);
; 1617 : 		}

	ret	0
$LN3@Myptr:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 1615 : 			? _Unfancy(_Bx._Ptr)
; 1616 : 			: _Bx._Buf);
; 1617 : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1598 : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<wchar_t> >::_String_val<std::_Simple_types<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size, COMDAT
; _this$ = ecx

; 1108 : 		return (_Mytraits::max_size(*this));

	mov	eax, 2147483647				; 7fffffffH

; 1109 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 1078 : 		}

	pop	ebp

; 1077 : 		return (_Mybase::allocate(_Count));

	jmp	?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1048 : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >, COMDAT
; _this$ = ecx

; 1038 : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<wchar_t> >::_Wrap_alloc<std::allocator<wchar_t> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEPA_WAA_W@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?address@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEPA_WAA_W@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::address, COMDAT
; _this$ = ecx

; 1026 : 		{	// return address of mutable _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 1027 : 		return (pointer_traits<pointer>::pointer_to(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 1028 : 		}

	pop	ebp
	ret	4
?address@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEPA_WAA_W@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::address
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
___formal$ = 12						; size = 1
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT
; _this$ = ecx

; 1013 : 		{	// get allocator to use

	npad	2
	push	ebp
	mov	ebp, esp

; 1014 : 		return (_Mytraits::select_on_container_copy_construction(*this));

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1015 : 		}

	pop	ebp
	ret	8
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@U_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__Al$ = 12						; size = 4
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction, COMDAT

; 975  : 		{	// get allocator to use

	npad	2
	push	ebp
	mov	ebp, esp

; 976  : 		return (_Al);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 977  : 		}

	pop	ebp
	ret	0
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::select_on_container_copy_construction
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC ; std::allocator_traits<std::allocator<wchar_t> >::max_size, COMDAT

; 970  : 		return (_Al.max_size());

	mov	eax, 2147483647				; 7fffffffH

; 971  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ENDP ; std::allocator_traits<std::allocator<wchar_t> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator@_W@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@_W@std@@QBEIXZ PROC		; std::allocator<wchar_t>::max_size, COMDAT
; _this$ = ecx

; 851  : 		return ((size_t)(-1) / sizeof (_Ty));

	mov	eax, 2147483647				; 7fffffffH

; 852  : 		}

	ret	0
?max_size@?$allocator@_W@std@@QBEIXZ ENDP		; std::allocator<wchar_t>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		; std::allocator<wchar_t>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	cmp	eax, 2147483647				; 7fffffffH
	jbe	SHORT $LN5@allocate

; 58   : 		_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN5@allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	add	eax, eax

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN16@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN18@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@_W@std@@QAEPA_WI@Z ENDP		; std::allocator<wchar_t>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	; std::allocator<wchar_t>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	2
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ENDP	; std::allocator<wchar_t>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 807  : 		{	// construct by copying (do nothing)
; 808  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@_W@std@@QAE@ABV01@@Z ENDP		; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@_W@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@_W@std@@QAE@XZ PROC			; std::allocator<wchar_t>::allocator<wchar_t>, COMDAT
; _this$ = ecx

; 803  : 		{	// construct default allocator (do nothing)
; 804  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@_W@std@@QAE@XZ ENDP			; std::allocator<wchar_t>::allocator<wchar_t>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran, COMDAT

; 3646 : 		_Xout_of_range("invalid string position");

	push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
	call	DWORD PTR __imp_?_Xout_of_range@std@@YAXPBD@Z
$LN4@Xran:
$LN3@Xran:
	int	3
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset, COMDAT
; _this$ = ecx

; 3629 : 		{	// checks whether _Off is in the bounds of [0, this->size()]

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR __Off$[ebp]
	jb	SHORT $LN14@Check_offs

; 3633 : 			}
; 3634 : 		}

	pop	ebp
	ret	4
$LN14@Check_offs:

; 3631 : 			{
; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN16@Check_offs:
$LN13@Check_offs:
	int	3
?_Check_offset@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Check_offset
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ
_TEXT	SEGMENT
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen, COMDAT

; 3625 : 		_Xlength_error("string too long");

	push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
	call	DWORD PTR __imp_?_Xlength_error@std@@YAXPBD@Z
$LN4@Xlen:
$LN3@Xlen:
	int	3
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate, COMDAT
; _this$ = ecx

; 3605 : 		{	// initialize buffer, deallocating any storage

	npad	2
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H

; 3606 : 		this->_Orphan_all();
; 3607 : 		auto& _My_data = this->_Get_data();
; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN2@Tidy_deall
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN2@Tidy_deall:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3621 : 		}

	ret	0
?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ
_TEXT	SEGMENT
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init, COMDAT
; _this$ = ecx

; 3596 : 		auto& _My_data = this->_Get_data();
; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3602 : 		}

	ret	0
?_Tidy_init@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Tidy_init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside, COMDAT
; _this$ = ecx

; 3588 : 		{	// test if _Ptr points inside string

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@Inside
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN14@Inside
$LN13@Inside:
	mov	edx, ecx
$LN14@Inside:

; 3589 : 		const auto& _My_data = this->_Get_data();
; 3590 : 		const _Elem * const _My_chars = _My_data._Myptr();
; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	cmp	edx, DWORD PTR __Ptr$[ebp]
	ja	SHORT $LN3@Inside
	mov	eax, DWORD PTR [ecx+16]
	add	eax, edx
	cmp	DWORD PTR __Ptr$[ebp], eax
	jae	SHORT $LN3@Inside
	mov	al, 1

; 3592 : 		}

	pop	ebp
	ret	4
$LN3@Inside:

; 3589 : 		const auto& _My_data = this->_Get_data();
; 3590 : 		const _Elem * const _My_chars = _My_data._Myptr();
; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	xor	al, al

; 3592 : 		}

	pop	ebp
	ret	4
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Inside
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow, COMDAT
; _this$ = ecx

; 3572 : 		{	// ensure buffer is big enough

	npad	2
	push	ebp
	mov	ebp, esp

; 3573 : 		if (_Newsize == 0)

	mov	eax, DWORD PTR __Newsize$[ebp]
	test	eax, eax
	jne	SHORT $LN2@Grow

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN16@Grow
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN16@Grow:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3576 : 			return (false);

	xor	al, al

; 3585 : 		}

	pop	ebp
	ret	4
$LN2@Grow:

; 3577 : 			}
; 3578 : 
; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [ecx+20], eax
	jae	SHORT $LN3@Grow

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	eax
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN3@Grow:

; 3582 : 			}
; 3583 : 
; 3584 : 		return (true);	// return true only if more work to do

	mov	al, 1

; 3585 : 		}

	pop	ebp
	ret	4
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Grow
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos, COMDAT
; _this$ = ecx

; 3566 : 		{	// set new length and null terminator

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 3567 : 		auto& _My_data = this->_Get_data();
; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	edx, DWORD PTR __Newsize$[ebp]
	mov	DWORD PTR [ecx+16], edx

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Eos
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3569 : 		}

	pop	ebp
	ret	4
$LN11@Eos:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [ecx+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3569 : 		}

	pop	ebp
	ret	4
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Eos
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Oldres$ = -28						; size = 4
_this$ = -24						; size = 4
__Ptr$1$ = -20						; size = 4
__Ptr$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
__Newres$ = 8						; size = 4
__Newsize$ = 8						; size = 4
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy, COMDAT
; _this$ = ecx

; 3514 : 		{	// reallocate to new buffer of at least _Newsize, copying existing elements there

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 16					; 00000010H

; 3515 : 		const auto _Max = max_size();
; 3516 : 		if (_Newsize > _Max)

	mov	eax, DWORD PTR __Newsize$[ebp]
	push	ebx
	push	esi
	mov	esi, ecx
	mov	DWORD PTR _this$[ebp], esi
	push	edi
	mov	DWORD PTR __$EHRec$[ebp], esp
	cmp	eax, -2					; fffffffeH
	jbe	SHORT $LN2@Copy

; 3517 : 			{	// too long
; 3518 : 			_Xlen();

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN94@Copy:
$LN2@Copy:

; 3519 : 			}
; 3520 : 
; 3521 : 		auto& _My_data = this->_Get_data();
; 3522 : 		const size_type _Oldres = _My_data._Myres;

	mov	ebx, DWORD PTR [esi+20]

; 3523 : 		size_type _Newres = _Newsize | this->_ALLOC_MASK;

	mov	edi, eax
	or	edi, 15					; 0000000fH
	mov	DWORD PTR __Oldres$[ebp], ebx

; 3524 : 		if (_Max < _Newres)

	cmp	edi, -2					; fffffffeH
	jbe	SHORT $LN3@Copy

; 3525 : 			{
; 3526 : 			_Newres = _Newsize;	// undo roundup if too big

	mov	edi, eax
	jmp	SHORT $LN8@Copy
$LN3@Copy:

; 3527 : 			}
; 3528 : 		else if (_Oldres / 2 <= _Newres / 3)

	mov	eax, -1431655765			; aaaaaaabH
	mov	ecx, ebx
	mul	edi
	shr	ecx, 1
	shr	edx, 1
	cmp	ecx, edx
	jbe	SHORT $LN8@Copy

; 3529 : 			;
; 3530 : 		else if (_Oldres <= _Max - _Oldres / 2)

	mov	eax, -2					; fffffffeH

; 3531 : 			{
; 3532 : 			_Newres = _Oldres + _Oldres / 2;	// grow exponentially if possible

	lea	edi, DWORD PTR [ecx+ebx]
	sub	eax, ecx
	cmp	ebx, eax
	jbe	SHORT $LN8@Copy

; 3533 : 			}
; 3534 : 		else
; 3535 : 			{
; 3536 : 			_Newres = _Max;	// settle for max_size()

	mov	edi, -2					; fffffffeH
$LN8@Copy:

; 3537 : 			}
; 3538 : 
; 3539 : 		auto& _Al = this->_Getal();
; 3540 : 		pointer _Ptr;
; 3541 : 		_TRY_BEGIN
; 3542 : 			_Ptr = _Al.allocate(_Newres + 1);

	lea	eax, DWORD PTR [edi+1]
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	push	eax
	mov	ecx, esi
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	ecx, eax
	jmp	SHORT $LN92@Copy
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z$0:

; 3543 : 		_CATCH_ALL
; 3544 : 			_Newres = _Newsize;	// allocation failed, undo roundup and retry

	mov	eax, DWORD PTR __Newsize$[ebp]

; 3545 : 			_Ptr = _Al.allocate(_Newres + 1);	// if throws, *this unmodified

	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR __Newres$[ebp], eax
	inc	eax
	push	eax
	call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char> >::allocate
	mov	DWORD PTR __Ptr$[ebp], eax

; 3546 : 		_CATCH_END

	mov	eax, $LN89@Copy
	ret	0
$LN89@Copy:
	mov	esi, DWORD PTR _this$[ebp]
	mov	ebx, DWORD PTR __Oldres$[ebp]
	mov	edi, DWORD PTR __Newres$[ebp]
	mov	ecx, DWORD PTR __Ptr$[ebp]
$LN92@Copy:

; 3551 : 			{	// copy and deallocate old buffer
; 3552 : 			_Traits::copy(_Unfancy(_Ptr), _Unfancy(_My_data._Bx._Ptr), _My_data._Mysize + 1);

	mov	eax, DWORD PTR [esi+16]
	inc	eax
	mov	DWORD PTR __Ptr$1$[ebp], ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3550 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN10@Copy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	DWORD PTR [esi]
	push	ecx
	call	_memcpy
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3553 : 			_Al.deallocate(_My_data._Bx._Ptr, _Oldres + 1);

	lea	eax, DWORD PTR [ebx+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 24					; 00000018H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3556 : 		else

	jmp	SHORT $LN93@Copy
$LN10@Copy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	esi
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN93@Copy:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	eax, DWORD PTR __Ptr$1$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3563 : 		}

	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 840  : 		::new ((void *)_Ptr) _Objty(_STD forward<_Types>(_Args)...);

	mov	DWORD PTR [esi], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3562 : 		_My_data._Myres = _Newres;

	mov	DWORD PTR [esi+20], edi

; 3563 : 		}

	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	4
$LN91@Copy:
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z:
	mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign, COMDAT
; _this$ = ecx

; 3502 : 		{	// assign _Count copies of _Ch beginning at _Off

	npad	2
	push	ebp
	mov	ebp, esp

; 3503 : 		if (_Count == 1)

	mov	eax, DWORD PTR __Count$[ebp]
	mov	edx, ecx
	cmp	eax, 1
	jne	SHORT $LN2@Chassign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN16@Chassign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [edx]
$LN16@Chassign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	eax, DWORD PTR __Off$[ebp]
	mov	cl, BYTE PTR __Ch$[ebp]
	mov	BYTE PTR [edx+eax], cl
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3511 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN2@Chassign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [edx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN35@Chassign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [edx]
$LN35@Chassign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 512  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

	push	eax
	movsx	eax, BYTE PTR __Ch$[ebp]
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3509 : 			_Traits::assign(this->_Myptr() + _Off, _Count, _Ch);

	mov	eax, DWORD PTR __Off$[ebp]
	add	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 512  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3511 : 		}

	pop	ebp
	ret	12					; 0000000cH
?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal, COMDAT
; _this$ = ecx

; 3420 : 		{	// compare [0, _Mysize()) with _Ptr for equality

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	push	edi
	lea	edi, DWORD PTR [edx+1]
	npad	4
$LL31@Equal:
	mov	al, BYTE PTR [edx]
	inc	edx
	test	al, al
	jne	SHORT $LL31@Equal
	sub	edx, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1844 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	pop	edi

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN25@Equal
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN25@Equal:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3421 : 		return (_Traits_equal<_Traits>(this->_Myptr(), this->_Mysize(), _Ptr, _Traits::length(_Ptr)));

	push	edx
	push	DWORD PTR __Ptr$[ebp]
	push	DWORD PTR [eax]
	push	ecx
	call	??$_Traits_equal@U?$char_traits@D@std@@@std@@YA_NQBDI0I@Z ; std::_Traits_equal<std::char_traits<char> >
	add	esp, 16					; 00000010H

; 3422 : 		}

	pop	ebp
	ret	4
?_Equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBE_NQBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Size$ = 12						; size = 4
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size, COMDAT
; _this$ = ecx

; 3410 : 		{	// trims _Size to the longest it can be assuming a string at/after _Off

	npad	2
	push	ebp
	mov	ebp, esp

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	mov	ecx, DWORD PTR [ecx+16]
	sub	ecx, DWORD PTR __Off$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	eax, DWORD PTR __Size$[ebp]
	cmp	ecx, eax
	cmovb	eax, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3412 : 		}

	pop	ebp
	ret	8
?_Clamp_suffix_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIII@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Clamp_suffix_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
__Ch$ = 12						; size = 1
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 3040 : 		{	// determine new length, padding with _Ch elements as needed

	npad	2
	push	ebp
	mov	ebp, esp

; 3041 : 		if (_Newsize <= this->_Mysize())

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, edx
	ja	SHORT $LN2@resize

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN25@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN25@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [ecx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3049 : 		}

	pop	ebp
	ret	8
$LN2@resize:

; 3042 : 			{
; 3043 : 			_Eos(_Newsize);
; 3044 : 			}
; 3045 : 		else
; 3046 : 			{
; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	sub	eax, edx
	mov	DWORD PTR __Newsize$[ebp], eax

; 3049 : 		}

	pop	ebp

; 3042 : 			{
; 3043 : 			_Eos(_Newsize);
; 3044 : 			}
; 3045 : 		else
; 3046 : 			{
; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	jmp	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
_TEXT	SEGMENT
__Newsize$ = 8						; size = 4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize, COMDAT
; _this$ = ecx

; 3035 : 		{	// determine new length, padding with null elements as needed

	npad	2
	push	ebp
	mov	ebp, esp

; 3041 : 		if (_Newsize <= this->_Mysize())

	mov	edx, DWORD PTR [ecx+16]
	mov	eax, DWORD PTR __Newsize$[ebp]
	cmp	eax, edx
	ja	SHORT $LN4@resize

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN27@resize
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN27@resize:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [ecx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3037 : 		}

	pop	ebp
	ret	4
$LN4@resize:

; 3047 : 			append(_Newsize - this->_Mysize(), _Ch);

	push	0
	sub	eax, edx
	push	eax
	call	?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append

; 3037 : 		}

	pop	ebp
	ret	4
?resize@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::resize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 3030 : 		const size_type _Num = this->_Getal().max_size();
; 3031 : 		return (_Num <= 1 ? 1 : _Num - 1);

	mov	eax, -2					; fffffffeH

; 3032 : 		}

	ret	0
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
_TEXT	SEGMENT
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length, COMDAT
; _this$ = ecx

; 3020 : 		return (this->_Mysize());

	mov	eax, DWORD PTR [ecx+16]

; 3021 : 		}

	ret	0
?length@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ
_TEXT	SEGMENT
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@data

; 3014 : 		return (this->_Myptr());

	mov	eax, DWORD PTR [ecx]

; 3015 : 		}

	ret	0
$LN13@data:

; 3014 : 		return (this->_Myptr());

	mov	eax, ecx

; 3015 : 		}

	ret	0
?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEPADXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
_TEXT	SEGMENT
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN13@c_str

; 3003 : 		return (this->_Myptr());

	mov	eax, DWORD PTR [ecx]

; 3004 : 		}

	ret	0
$LN13@c_str:

; 3003 : 		return (this->_Myptr());

	mov	eax, ecx

; 3004 : 		}

	ret	0
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::c_str
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end, COMDAT
; _this$ = ecx

; 2870 : 		{	// return iterator for end of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN14@end
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 2873 : 		}

	pop	ebp
	ret	4
$LN14@end:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 2872 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()) + _My_data->_Mysize, _My_data));

	mov	ecx, DWORD PTR [ecx+16]
	add	ecx, eax

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	mov	DWORD PTR [eax], ecx

; 2873 : 		}

	pop	ebp
	ret	4
?end@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::end
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin, COMDAT
; _this$ = ecx

; 2858 : 		{	// return iterator for beginning of mutable sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1195 : 		: _Ptr(_Parg)

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN14@begin
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [ecx]
$LN14@begin:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1195 : 		: _Ptr(_Parg)

	mov	DWORD PTR [eax], ecx

; 2859 : 		auto _My_data = _STD addressof(this->_Get_data());
; 2860 : 		return (iterator(this->_Getal().address(*_My_data->_Myptr()), _My_data));
; 2861 : 		}

	pop	ebp
	ret	4
?begin@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::begin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
__First$ = 12						; size = 4
__Last$ = 16						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2617 : 		{	// erase substring [_First, _Last)

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN18@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
$LN18@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1319 : 		return (_Ptr - _Right._Ptr);

	mov	edi, DWORD PTR __First$[ebp]
	sub	edi, ecx
	mov	ecx, DWORD PTR __Last$[ebp]
	sub	ecx, DWORD PTR __First$[ebp]

; 2618 : 		_DEBUG_RANGE(_First, _Last);
; 2619 : 		const size_type _Count = _First - begin();
; 2620 : 		erase(_Count, _Last - _First);

	push	ecx
	push	edi
	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN64@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	esi, DWORD PTR [esi]
$LN64@erase:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1482 : 		return (_Tmp += _Off);

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 1295 : 		_Ptr += _Off;

	lea	ecx, DWORD PTR [esi+edi]
	pop	edi
	pop	esi

; 1482 : 		return (_Tmp += _Off);

	mov	DWORD PTR [eax], ecx

; 2621 : 		return (begin() + _Count);
; 2622 : 		}

	pop	ebp
	ret	12					; 0000000cH
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@D@std@@@std@@@2@0@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
__Count$ = 12						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2592 : 		{	// erase elements [_Off, _Off + _Count)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edx, DWORD PTR __Off$[ebp]
	push	ebx
	push	esi

; 2592 : 		{	// erase elements [_Off, _Off + _Count)

	mov	esi, ecx
	push	edi

; 3630 : 		if (this->_Mysize() < _Off)

	mov	edi, DWORD PTR [esi+16]
	cmp	edi, edx
	jb	SHORT $LN95@erase

; 2593 : 		_Check_offset(_Off);
; 2594 : 		if (this->_Mysize() - _Off <= _Count)

	mov	ebx, DWORD PTR __Count$[ebp]
	mov	eax, edi
	sub	eax, edx
	cmp	eax, ebx
	ja	SHORT $LN2@erase

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN38@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN38@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2607 : 		}

	pop	ebp
	ret	8
$LN2@erase:

; 2595 : 			{
; 2596 : 			_Eos(_Off);	// erase elements [_Off, ...)
; 2597 : 			}
; 2598 : 		else if (_Count != 0)

	test	ebx, ebx
	je	SHORT $LN92@erase

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN57@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN58@erase
$LN57@erase:
	mov	eax, esi
$LN58@erase:

; 2599 : 			{	// move elements down
; 2600 : 			value_type *_Ptr = this->_Myptr() + _Off;

	lea	ecx, DWORD PTR [eax+edx]

; 2601 : 			size_type _Newsize = this->_Mysize() - _Count;

	sub	edi, ebx

; 2602 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	mov	eax, edi
	sub	eax, edx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 506  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2602 : 			_Traits::move(_Ptr, _Ptr + _Count, _Newsize - _Off);

	lea	eax, DWORD PTR [ecx+ebx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 506  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

	push	eax
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN85@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN85@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
$LN92@erase:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2606 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2607 : 		}

	pop	ebp
	ret	8
$LN95@erase:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN97@erase:
$LN94@erase:
	int	3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
_TEXT	SEGMENT
__Off$ = 8						; size = 4
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase, COMDAT
; _this$ = ecx

; 2585 : 		{	// erase elements [_Off, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR __Off$[ebp]
	cmp	DWORD PTR [ecx+16], eax
	jb	SHORT $LN36@erase

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [ecx+16], eax

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN26@erase
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [ecx]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2588 : 		return (*this);

	mov	eax, ecx

; 2589 : 		}

	pop	ebp
	ret	4
$LN26@erase:

; 1614 : 		return (_Large_string_engaged()

	mov	edx, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [edx+eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2588 : 		return (*this);

	mov	eax, ecx

; 2589 : 		}

	pop	ebp
	ret	4
$LN36@erase:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN38@erase:
$LN35@erase:
	int	3
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2428 : 		{	// assign [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2428 : 		{	// assign [_Ptr, <null>)

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	edi, DWORD PTR [eax+1]
$LL6@assign:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL6@assign
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	eax
	push	edx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	pop	esi

; 2430 : 		}

	pop	ebp
	ret	4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2412 : 		{	// assign [_Ptr, _Ptr + _Count)

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	ecx, DWORD PTR [esi+20]
	cmp	ecx, 16					; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN17@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1621 : 		return (_Large_string_engaged()

	jmp	SHORT $LN18@assign
$LN17@assign:
	mov	edx, esi
$LN18@assign:

; 3591 : 		return (_My_chars <= _Ptr && _Ptr < _My_chars + _My_data._Mysize);

	mov	ebx, DWORD PTR __Ptr$[ebp]
	cmp	edx, ebx
	ja	SHORT $LN2@assign
	mov	eax, DWORD PTR [esi+16]
	add	eax, edx
	cmp	ebx, eax
	jae	SHORT $LN2@assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 16					; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN33@assign

; 2415 : 			return (assign(*this, _Ptr - this->_Myptr(), _Count));	// substring

	push	DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2415 : 			return (assign(*this, _Ptr - this->_Myptr(), _Count));	// substring

	mov	ecx, esi
	sub	ebx, eax
	push	ebx
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx

; 2425 : 		}

	pop	ebp
	ret	8
$LN33@assign:

; 2415 : 			return (assign(*this, _Ptr - this->_Myptr(), _Count));	// substring

	push	DWORD PTR __Count$[ebp]

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi

; 2415 : 			return (assign(*this, _Ptr - this->_Myptr(), _Count));	// substring

	mov	ecx, esi
	sub	ebx, eax
	push	ebx
	push	esi
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	esi
	pop	ebx

; 2425 : 		}

	pop	ebp
	ret	8
$LN2@assign:
	push	edi

; 3573 : 		if (_Newsize == 0)

	mov	edi, DWORD PTR __Count$[ebp]
	test	edi, edi
	jne	SHORT $LN40@assign

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	ecx, 16					; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN53@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2424 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2425 : 		}

	pop	ebp
	ret	8
$LN53@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2425 : 		}

	pop	ebp
	ret	8
$LN40@assign:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	ecx, edi
	jae	SHORT $LN41@assign

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN41@assign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN81@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN82@assign
$LN81@assign:
	mov	eax, esi
$LN82@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	edi
	push	ebx
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN100@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2424 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2425 : 		}

	pop	ebp
	ret	8
$LN100@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2425 : 		}

	pop	ebp
	ret	8
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
__Roff$ = 12						; size = 4
__Count$ = 16						; size = 4
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign, COMDAT
; _this$ = ecx

; 2378 : 		{	// assign _Right [_Roff, _Roff + _Count)

	npad	2
	push	ebp
	mov	ebp, esp

; 3630 : 		if (this->_Mysize() < _Off)

	mov	eax, DWORD PTR __Roff$[ebp]
	push	ebx
	mov	ebx, DWORD PTR __Right$[ebp]
	push	esi

; 2378 : 		{	// assign _Right [_Roff, _Roff + _Count)

	mov	esi, ecx
	push	edi

; 3630 : 		if (this->_Mysize() < _Off)

	mov	ecx, DWORD PTR [ebx+16]
	cmp	ecx, eax
	jb	$LN159@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	mov	edi, DWORD PTR __Count$[ebp]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3411 : 		return (_Min_value(_Size, this->_Mysize() - _Off));

	sub	ecx, eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\utility

; 23   : 	return (_Right < _Left ? _Right : _Left);

	cmp	ecx, edi
	cmovb	edi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2382 : 		if (this == _STD addressof(_Right))

	cmp	esi, ebx
	jne	SHORT $LN2@assign

; 2383 : 			{	// substring
; 2384 : 			erase(_Roff + _Count);

	lea	ecx, DWORD PTR [eax+edi]

; 3630 : 		if (this->_Mysize() < _Off)

	cmp	DWORD PTR [esi+16], ecx
	jb	$LN161@assign

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN62@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	edx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	push	eax
	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [edx+ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN62@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	edx, esi

; 2385 : 			erase(0, _Roff);

	push	eax
	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [edx+ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2385 : 			erase(0, _Roff);

	mov	ecx, esi
	call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::erase
	pop	edi

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN2@assign:

; 3573 : 		if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN72@assign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN85@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2393 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN85@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN72@assign:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN73@assign

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
	mov	eax, DWORD PTR __Roff$[ebp]
$LN73@assign:

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ebx+20], 16			; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN113@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ebx, DWORD PTR [ebx]
$LN113@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN129@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	ecx, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1614 : 		return (_Large_string_engaged()

	jmp	SHORT $LN130@assign
$LN129@assign:
	mov	ecx, esi
$LN130@assign:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2389 : 			_Traits::copy(this->_Myptr(), _Right._Myptr() + _Roff, _Count);

	add	eax, ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	eax
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN148@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2393 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN148@assign:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2394 : 		}

	pop	ebp
	ret	12					; 0000000cH
$LN159@assign:

; 3632 : 			_Xran();

	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN162@assign:
$LN161@assign:
	call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xran
$LN163@assign:
$LN158@assign:
	int	3
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Ch$ = 12						; size = 1
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append, COMDAT
; _this$ = ecx

; 2348 : 		{	// append _Count * _Ch

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx

; 2349 : 		if (npos - this->_Mysize() <= _Count)

	mov	ebx, DWORD PTR __Count$[ebp]
	push	esi
	mov	esi, ecx
	push	edi
	mov	ecx, DWORD PTR [esi+16]
	mov	eax, ecx
	not	eax
	cmp	eax, ebx
	jbe	SHORT $LN85@append

; 2352 : 			}
; 2353 : 
; 2354 : 		const size_type _Num = this->_Mysize() + _Count;

	lea	edi, DWORD PTR [ecx+ebx]

; 2355 : 		if (_Count != 0 && _Grow(_Num))

	test	ebx, ebx
	je	SHORT $LN81@append

; 3573 : 		if (_Newsize == 0)

	test	edi, edi
	jne	SHORT $LN24@append

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN37@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2361 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2362 : 		}

	pop	ebp
	ret	8
$LN37@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2362 : 		}

	pop	ebp
	ret	8
$LN24@append:

; 3579 : 		if (this->_Myres() < _Newsize)

	cmp	DWORD PTR [esi+20], edi
	jae	SHORT $LN25@append

; 3580 : 			{	// reallocate to grow
; 3581 : 			_Copy(_Newsize);

	push	edi
	mov	ecx, esi
	call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Copy
$LN25@append:

; 2356 : 			{	// make room and append new stuff using assign
; 2357 : 			_Chassign(this->_Mysize(), _Count, _Ch);

	push	DWORD PTR __Ch$[ebp]
	mov	ecx, esi
	push	ebx
	push	DWORD PTR [esi+16]
	call	?_Chassign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXIID@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Chassign

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [esi+20], 16			; 00000010H

; 3568 : 		_Traits::assign(_My_data._Myptr()[_My_data._Mysize = _Newsize], _Elem());

	mov	DWORD PTR [esi+16], edi

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN74@append
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstddef

; 643  : 	return (_Ptr);

	mov	eax, DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2361 : 		return (*this);

	mov	eax, esi
	pop	edi
	pop	esi
	pop	ebx

; 2362 : 		}

	pop	ebp
	ret	8
$LN74@append:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax+edi], 0
$LN81@append:
	pop	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2361 : 		return (*this);

	mov	eax, esi
	pop	esi
	pop	ebx

; 2362 : 		}

	pop	ebp
	ret	8
$LN85@append:

; 2350 : 			{
; 2351 : 			_Xlen();	// result too long

	call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@SAXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Xlen
$LN87@append:
$LN84@append:
	int	3
?append@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ID@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::append
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=, COMDAT
; _this$ = ecx

; 2250 : 		{	// assign [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2250 : 		{	// assign [_Ptr, <null>)

	mov	esi, ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	edi, DWORD PTR [eax+1]
$LL8@operator:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL8@operator
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	eax
	push	edx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi
	pop	esi

; 2251 : 		return (assign(_Ptr));
; 2252 : 		}

	pop	ebp
	ret	4
??4?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV01@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2215 : 		{	// destroy the string

	npad	2
	push	esi
	mov	esi, ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	mov	eax, DWORD PTR [esi+20]
	cmp	eax, 16					; 00000010H

; 3608 : 		if (_My_data._Large_string_engaged())

	jb	SHORT $LN4@basic_stri
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3613 : 			_Al.deallocate(_Ptr, _My_data._Myres + 1);

	inc	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	eax
	push	DWORD PTR [esi]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH
$LN4@basic_stri:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3616 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3617 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2217 : 		}

	ret	0
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::~basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
___formal$ = 12						; size = 1
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal, COMDAT
; _this$ = ecx

; 2122 : 		{	// assign by stealing _Right's buffer, memcpy optimization

	npad	2
	push	ebp
	mov	ebp, esp

; 2123 : 			// pre: this != &_Right
; 2124 : 			// pre: allocator propagation (POCMA) from _Right, if necessary, is complete
; 2125 : 			// pre: *this owns no memory, iterators orphaned (note: _Buf/_Ptr/_Mysize/_Myres may be garbage init)
; 2126 : 		auto& _Right_data = _Right._Get_data();
; 2127 : 
; 2128 : #if _ITERATOR_DEBUG_LEVEL != 0
; 2129 : 		if (_Right_data._Large_string_engaged())
; 2130 : 			{	// take ownership of _Right's iterators along with its buffer
; 2131 : 			this->_Swap_all(_Right);
; 2132 : 			}
; 2133 : 		else
; 2134 : 			{
; 2135 : 			_Right._Orphan_all();
; 2136 : 			}
; 2137 : #endif /* _ITERATOR_DEBUG_LEVEL != 0 */
; 2138 : 
; 2139 : 		const auto _My_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(this->_Get_data()))
; 2140 : 			+ _Memcpy_move_offset;
; 2141 : 		const auto _Right_data_mem = reinterpret_cast<unsigned char *>(_STD addressof(_Right_data))
; 2142 : 			+ _Memcpy_move_offset;
; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]
	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2145 : 		}

	pop	ebp
	ret	8
?_Assign_rv_contents_with_alloc_always_equal@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX$$QAV12@U?$integral_constant@_N$00@2@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Assign_rv_contents_with_alloc_always_equal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 2054 : 		{	// construct by moving _Right

	npad	2
	push	ebp
	mov	ebp, esp

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	mov	eax, DWORD PTR __Right$[ebp]

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 2143 : 		_CSTD memcpy(_My_data_mem, _Right_data_mem, _Memcpy_move_size);

	movups	xmm0, XMMWORD PTR [eax]
	movups	XMMWORD PTR [ecx], xmm0
	movq	xmm0, QWORD PTR [eax+16]
	movq	QWORD PTR [ecx+16], xmm0

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [eax+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [eax+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [eax], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2056 : 		}

	mov	eax, ecx
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@$$QAV01@@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 1980 : 		{	// construct from [_Ptr, <null>)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	mov	edx, DWORD PTR __Ptr$[ebp]
	mov	eax, edx
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1980 : 		{	// construct from [_Ptr, <null>)

	mov	esi, ecx
	push	edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 480  : 		return (_CSTD strlen(_First));

	lea	edi, DWORD PTR [eax+1]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [esi+16], 0

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [esi+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [esi], 0
$LL25@basic_stri:

; 480  : 		return (_CSTD strlen(_First));

	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL25@basic_stri
	sub	eax, edi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 2429 : 		return (assign(_Ptr, _Traits::length(_Ptr)));

	mov	ecx, esi
	push	eax
	push	edx
	call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@QBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::assign
	pop	edi

; 1981 : 		_Tidy_init();
; 1982 : 		assign(_Ptr);
; 1983 : 		}

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@QBD@Z ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >, COMDAT
; _this$ = ecx

; 3597 : 		_My_data._Mysize = 0;

	mov	DWORD PTR [ecx+16], 0

; 1941 : 		}

	mov	eax, ecx

; 3598 : 		_My_data._Myres = this->_BUF_SIZE - 1;

	mov	DWORD PTR [ecx+20], 15			; 0000000fH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 517  : 		_Left = _Right;

	mov	BYTE PTR [ecx], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring

; 1941 : 		}

	ret	0
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ENDP ; std::basic_string<char,std::char_traits<char>,std::allocator<char> >::basic_string<char,std::char_traits<char>,std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::~_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>, COMDAT
; _this$ = ecx
	ret	0
??1?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAE@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::~_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 343  : 		return (_Myval2);

	mov	eax, ecx

; 344  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second, COMDAT
; _this$ = ecx

; 338  : 		return (_Myval2);

	mov	eax, ecx

; 339  : 		}

	ret	0
?_Get_second@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_second
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 323  : 		return (*this);

	mov	eax, ecx

; 324  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first, COMDAT
; _this$ = ecx

; 318  : 		return (*this);

	mov	eax, ecx

; 319  : 		}

	ret	0
?_Get_first@?$_Compressed_pair@U?$_Wrap_alloc@V?$allocator@D@std@@@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_Compressed_pair<std::_Wrap_alloc<std::allocator<char> >,std::_String_val<std::_Simple_types<char> >,1>::_Get_first
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres, COMDAT
; _this$ = ecx

; 1849 : 		return (_Get_data()._Myres);

	lea	eax, DWORD PTR [ecx+20]

; 1850 : 		}

	ret	0
?_Myres@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myres
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 1844 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1845 : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ
_TEXT	SEGMENT
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize, COMDAT
; _this$ = ecx

; 1839 : 		return (_Get_data()._Mysize);

	lea	eax, DWORD PTR [ecx+16]

; 1840 : 		}

	ret	0
?_Mysize@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAIXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Mysize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1834 : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 1835 : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ
_TEXT	SEGMENT
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data, COMDAT
; _this$ = ecx

; 1829 : 		return (_Mypair._Get_second());

	mov	eax, ecx

; 1830 : 		}

	ret	0
?_Get_data@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAV?$_String_val@U?$_Simple_types@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Get_data
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1824 : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 1825 : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEABU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
_TEXT	SEGMENT
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal, COMDAT
; _this$ = ecx

; 1819 : 		return (_Mypair._Get_first());

	mov	eax, ecx

; 1820 : 		}

	ret	0
?_Getal@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEAAU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Getal
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all, COMDAT
; _this$ = ecx

; 1809 : 		_Get_data()._Orphan_all();
; 1810 : 		}

	ret	0
?_Orphan_all@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1697 : 		}

	mov	eax, ecx

; 1596 : 		_Myres(0)

	mov	DWORD PTR [ecx+20], 0

; 1697 : 		}

	ret	0
??0?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_String_alloc<std::_String_base_types<char,std::allocator<char> > >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Myptr

; 1690 : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 1691 : 		}

	ret	0
$LN11@Myptr:

; 1690 : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 1691 : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBEPBDXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ PROC ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN11@Myptr

; 1685 : 		return (_Get_data()._Myptr());

	mov	eax, DWORD PTR [ecx]

; 1686 : 		}

	ret	0
$LN11@Myptr:

; 1685 : 		return (_Get_data()._Myptr());

	mov	eax, ecx

; 1686 : 		}

	ret	0
?_Myptr@?$_String_alloc@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEPADXZ ENDP ; std::_String_alloc<std::_String_base_types<char,std::allocator<char> > >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx
	ret	0
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::~_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty, COMDAT
; _this$ = ecx

; 1639 : 			}

	ret	0
??1_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::~_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty, COMDAT
; _this$ = ecx

; 1634 : 			{	// user-provided, for fancy pointers
; 1635 : 			}

	mov	eax, ecx
	ret	0
??0_Bxty@?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Bxty::_Bxty
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ
_TEXT	SEGMENT
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged, COMDAT
; _this$ = ecx

; 1627 : 		{	// returns whether the large string mode (allocated memory) is engaged

	cmp	DWORD PTR [ecx+20], 16			; 00000010H
	setae	al

; 1628 : 		return (this->_BUF_SIZE <= _Myres);
; 1629 : 		}

	ret	0
?_Large_string_engaged@?$_String_val@U?$_Simple_types@D@std@@@std@@QBE_NXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Large_string_engaged
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1621 : 		return (_Large_string_engaged()

	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 1622 : 			? _Unfancy(_Bx._Ptr)
; 1623 : 			: _Bx._Buf);
; 1624 : 		}

	ret	0
$LN3@Myptr:

; 1621 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 1622 : 			? _Unfancy(_Bx._Ptr)
; 1623 : 			: _Bx._Buf);
; 1624 : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
_TEXT	SEGMENT
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC ; std::_String_val<std::_Simple_types<char> >::_Myptr, COMDAT
; _this$ = ecx

; 1628 : 		return (this->_BUF_SIZE <= _Myres);

	cmp	DWORD PTR [ecx+20], 16			; 00000010H

; 1614 : 		return (_Large_string_engaged()

	jb	SHORT $LN3@Myptr
	mov	eax, DWORD PTR [ecx]

; 1615 : 			? _Unfancy(_Bx._Ptr)
; 1616 : 			: _Bx._Buf);
; 1617 : 		}

	ret	0
$LN3@Myptr:

; 1614 : 		return (_Large_string_engaged()

	mov	eax, ecx

; 1615 : 			? _Unfancy(_Bx._Ptr)
; 1616 : 			: _Bx._Buf);
; 1617 : 		}

	ret	0
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ENDP ; std::_String_val<std::_Simple_types<char> >::_Myptr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xstring
;	COMDAT ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >, COMDAT
; _this$ = ecx

; 1595 : 		_Mysize(0),

	mov	DWORD PTR [ecx+16], 0

; 1598 : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ENDP ; std::_String_val<std::_Simple_types<char> >::_String_val<std::_Simple_types<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 1
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::max_size, COMDAT
; _this$ = ecx

; 1108 : 		return (_Mytraits::max_size(*this));

	or	eax, -1

; 1109 : 		}

	ret	4
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIU_Nil@2@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::deallocate, COMDAT
; _this$ = ecx

; 1087 : 		{	// deallocate object at _Ptr, ignore size

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 1088 : 		_Mybase::deallocate(_Ptr, _Count);
; 1089 : 		}

	pop	ebp
	ret	8
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::allocate, COMDAT
; _this$ = ecx

; 1076 : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN6@allocate
$LN15@allocate:

; 1077 : 		return (_Mybase::allocate(_Count));
; 1078 : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN8@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN10@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN18@allocate:
$LN10@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN11@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN19@allocate:
$LN11@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 1077 : 		return (_Mybase::allocate(_Count));
; 1078 : 		}

	pop	ebp
	ret	4
$LN8@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN15@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN20@allocate:
$LN17@allocate:
	int	3
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 1048 : 		}

	mov	eax, ecx
	ret	4
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@$$QAU01@@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
_TEXT	SEGMENT
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >, COMDAT
; _this$ = ecx

; 1038 : 		}

	mov	eax, ecx
	ret	0
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ENDP	; std::_Wrap_alloc<std::allocator<char> >::_Wrap_alloc<std::allocator<char> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z
_TEXT	SEGMENT
__Val$ = 8						; size = 4
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z PROC ; std::_Wrap_alloc<std::allocator<char> >::address, COMDAT
; _this$ = ecx

; 1026 : 		{	// return address of mutable _Val

	npad	2
	push	ebp
	mov	ebp, esp

; 1027 : 		return (pointer_traits<pointer>::pointer_to(_Val));

	mov	eax, DWORD PTR __Val$[ebp]

; 1028 : 		}

	pop	ebp
	ret	4
?address@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEPADAAD@Z ENDP ; std::_Wrap_alloc<std::allocator<char> >::address
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
_TEXT	SEGMENT
__Al$ = 8						; size = 4
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC ; std::allocator_traits<std::allocator<char> >::max_size, COMDAT

; 970  : 		return (_Al.max_size());

	or	eax, -1

; 971  : 		}

	ret	0
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ENDP ; std::allocator_traits<std::allocator<char> >::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?max_size@?$allocator@D@std@@QBEIXZ
_TEXT	SEGMENT
?max_size@?$allocator@D@std@@QBEIXZ PROC		; std::allocator<char>::max_size, COMDAT
; _this$ = ecx

; 851  : 		return ((size_t)(-1) / sizeof (_Ty));

	or	eax, -1

; 852  : 		}

	ret	0
?max_size@?$allocator@D@std@@QBEIXZ ENDP		; std::allocator<char>::max_size
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?allocate@?$allocator@D@std@@QAEPADI@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		; std::allocator<char>::allocate, COMDAT
; _this$ = ecx

; 827  : 		{	// allocate array of _Count elements

	npad	2
	push	ebp
	mov	ebp, esp

; 53   : 	if (_Count == 0)

	mov	eax, DWORD PTR __Count$[ebp]
	test	eax, eax
	jne	SHORT $LN4@allocate
$LN12@allocate:

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN4@allocate:

; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	eax, 4096				; 00001000H
	jb	SHORT $LN6@allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	ecx, DWORD PTR [eax+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	ecx, eax
	ja	SHORT $LN8@allocate

; 69   : 			_Xbad_alloc();	// report no memory

	call	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN15@allocate:
$LN8@allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN9@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN16@allocate:
$LN9@allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 828  : 		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
; 829  : 		}

	pop	ebp
	ret	4
$LN6@allocate:

; 87   : 		_Ptr = ::operator new(_User_size);

	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN12@allocate
	call	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN17@allocate:
$LN14@allocate:
	int	3
?allocate@?$allocator@D@std@@QAEPADI@Z ENDP		; std::allocator<char>::allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?deallocate@?$allocator@D@std@@QAEXPADI@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		; std::allocator<char>::deallocate, COMDAT
; _this$ = ecx

; 822  : 		{	// deallocate object at _Ptr

	npad	2
	push	ebp
	mov	ebp, esp

; 823  : 		_Deallocate(_Ptr, _Count, sizeof (_Ty));

	push	1
	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __Ptr$[ebp]
	call	?_Deallocate@std@@YAXPAXII@Z		; std::_Deallocate
	add	esp, 12					; 0000000cH

; 824  : 		}

	pop	ebp
	ret	8
?deallocate@?$allocator@D@std@@QAEXPADI@Z ENDP		; std::allocator<char>::deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@ABV01@@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
??0?$allocator@D@std@@QAE@ABV01@@Z PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 807  : 		{	// construct by copying (do nothing)
; 808  : 		}

	mov	eax, ecx
	ret	4
??0?$allocator@D@std@@QAE@ABV01@@Z ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ??0?$allocator@D@std@@QAE@XZ
_TEXT	SEGMENT
??0?$allocator@D@std@@QAE@XZ PROC			; std::allocator<char>::allocator<char>, COMDAT
; _this$ = ecx

; 803  : 		{	// construct default allocator (do nothing)
; 804  : 		}

	mov	eax, ecx
	ret	0
??0?$allocator@D@std@@QAE@XZ ENDP			; std::allocator<char>::allocator<char>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?_Deallocate@std@@YAXPAXII@Z
_TEXT	SEGMENT
__Ptr$ = 8						; size = 4
__Count$ = 12						; size = 4
__Sz$ = 16						; size = 4
?_Deallocate@std@@YAXPAXII@Z PROC			; std::_Deallocate, COMDAT

; 96   : 	{	// deallocate storage for _Count elements of size _Sz

	npad	2
	push	ebp
	mov	ebp, esp

; 97   :  #if defined(_M_IX86) || defined(_M_X64)
; 98   : 	_SCL_SECURE_ALWAYS_VALIDATE(_Count <= (size_t)(-1) / _Sz);

	or	eax, -1
	mov	ecx, DWORD PTR __Count$[ebp]
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	ecx, eax
	jbe	SHORT $LN2@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN2@Deallocate:

; 99   : 	const size_t _User_size = _Count * _Sz;

	imul	ecx, DWORD PTR __Sz$[ebp]

; 100  : 	if (_BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN9@Deallocate

; 101  : 		{	// deallocate large block
; 102  : 		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
; 103  : 		_SCL_SECURE_ALWAYS_VALIDATE(

	mov	eax, DWORD PTR __Ptr$[ebp]
	test	al, 31					; 0000001fH
	je	SHORT $LN4@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN4@Deallocate:

; 104  : 			(_Ptr_user & (_BIG_ALLOCATION_ALIGNMENT - 1)) == 0);
; 105  : 		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
; 106  : 		const uintptr_t _Ptr_container =
; 107  : 			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

	mov	ecx, DWORD PTR [eax-4]

; 108  : 
; 109  :  #ifdef _DEBUG
; 110  : 		// If the following asserts, it likely means that we are performing
; 111  : 		// an aligned delete on memory coming from an unaligned allocation.
; 112  : 		_SCL_SECURE_ALWAYS_VALIDATE(
; 113  : 			reinterpret_cast<uintptr_t *>(_Ptr_ptr)[-1] ==
; 114  : 				_BIG_ALLOCATION_SENTINEL);
; 115  :  #endif /* _DEBUG */
; 116  : 
; 117  : 		// Extra paranoia on aligned allocation/deallocation
; 118  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container < _Ptr_user);

	cmp	ecx, eax
	jb	SHORT $LN5@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN5@Deallocate:

; 119  : 
; 120  :  #ifdef _DEBUG
; 121  : 		_SCL_SECURE_ALWAYS_VALIDATE(2 * sizeof(void *)
; 122  : 			<= _Ptr_user - _Ptr_container);
; 123  : 
; 124  :  #else /* _DEBUG */
; 125  : 		_SCL_SECURE_ALWAYS_VALIDATE(sizeof(void *)

	sub	eax, ecx
	cmp	eax, 4
	jae	SHORT $LN6@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN6@Deallocate:

; 126  : 			<= _Ptr_user - _Ptr_container);
; 127  :  #endif /* _DEBUG */
; 128  : 
; 129  : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_user - _Ptr_container

	cmp	eax, 35					; 00000023H
	jbe	SHORT $LN3@Deallocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN9@Deallocate:

; 130  : 			<= _NON_USER_SIZE);
; 131  : 
; 132  : 		_Ptr = reinterpret_cast<void *>(_Ptr_container);

	mov	ecx, DWORD PTR __Ptr$[ebp]
$LN3@Deallocate:

; 133  : 		}
; 134  : 
; 135  :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 136  : 	static_cast<void>(_Count);
; 137  : 	static_cast<void>(_Sz);
; 138  :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 139  : 
; 140  : 	::operator delete(_Ptr);

	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4

; 141  : 	}

	pop	ebp
	ret	0
?_Deallocate@std@@YAXPAXII@Z ENDP			; std::_Deallocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xmemory0
;	COMDAT ?_Allocate@std@@YAPAXII_N@Z
_TEXT	SEGMENT
__Count$ = 8						; size = 4
__Sz$ = 12						; size = 4
__Try_aligned_allocation$ = 16				; size = 1
?_Allocate@std@@YAPAXII_N@Z PROC			; std::_Allocate, COMDAT

; 50   : 	{	// allocate storage for _Count elements of size _Sz

	npad	2
	push	ebp
	mov	ebp, esp

; 51   : 	void *_Ptr = 0;
; 52   : 
; 53   : 	if (_Count == 0)

	mov	ecx, DWORD PTR __Count$[ebp]
	test	ecx, ecx
	jne	SHORT $LN2@Allocate

; 54   : 		return (_Ptr);

	xor	eax, eax
$LN1@Allocate:

; 89   : 		}
; 90   : 	return (_Ptr);
; 91   : 	}

	pop	ebp
	ret	0
$LN2@Allocate:

; 55   : 
; 56   : 	// check overflow of multiply
; 57   : 	if ((size_t)(-1) / _Sz < _Count)

	or	eax, -1
	xor	edx, edx
	div	DWORD PTR __Sz$[ebp]
	cmp	eax, ecx
	jae	SHORT $LN3@Allocate

; 58   : 		_Xbad_alloc();	// report no memory

	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN3@Allocate:

; 59   : 	const size_t _User_size = _Count * _Sz;

	imul	ecx, DWORD PTR __Sz$[ebp]

; 60   : 
; 61   :  #if defined(_M_IX86) || defined(_M_X64)
; 62   : 	if (_Try_aligned_allocation
; 63   : 		&& _BIG_ALLOCATION_THRESHOLD <= _User_size)

	cmp	BYTE PTR __Try_aligned_allocation$[ebp], 0
	je	SHORT $LN4@Allocate
	cmp	ecx, 4096				; 00001000H
	jb	SHORT $LN4@Allocate

; 64   : 		{	// allocate large block
; 65   : 		static_assert(sizeof (void *) < _BIG_ALLOCATION_ALIGNMENT,
; 66   : 			"Big allocations should at least match vector register size");
; 67   : 		const size_t _Block_size = _NON_USER_SIZE + _User_size;

	lea	eax, DWORD PTR [ecx+35]

; 68   : 		if (_Block_size <= _User_size)

	cmp	eax, ecx
	ja	SHORT $LN6@Allocate

; 69   : 			_Xbad_alloc();	// report no memory

	jmp	DWORD PTR __imp_?_Xbad_alloc@std@@YAXXZ
$LN6@Allocate:

; 70   : 		const uintptr_t _Ptr_container =
; 71   : 			reinterpret_cast<uintptr_t>(::operator new(_Block_size));

	push	eax
	call	??2@YAPAXI@Z				; operator new
	mov	ecx, eax
	add	esp, 4

; 72   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr_container != 0);

	test	ecx, ecx
	jne	SHORT $LN7@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
$LN7@Allocate:

; 73   : 		_Ptr = reinterpret_cast<void *>((_Ptr_container + _NON_USER_SIZE)

	lea	eax, DWORD PTR [ecx+35]
	and	eax, -32				; ffffffe0H

; 74   : 			& ~(_BIG_ALLOCATION_ALIGNMENT - 1));
; 75   : 		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

	mov	DWORD PTR [eax-4], ecx

; 89   : 		}
; 90   : 	return (_Ptr);
; 91   : 	}

	pop	ebp
	ret	0
$LN4@Allocate:

; 76   : 
; 77   :  #ifdef _DEBUG
; 78   : 		static_cast<uintptr_t *>(_Ptr)[-2] = _BIG_ALLOCATION_SENTINEL;
; 79   :  #endif /* _DEBUG */
; 80   : 		}
; 81   : 	else
; 82   :  #else /* defined(_M_IX86) || defined(_M_X64) */
; 83   : 	static_cast<void>(_Try_aligned_allocation);
; 84   :  #endif /* defined(_M_IX86) || defined(_M_X64) */
; 85   : 
; 86   : 		{	// allocate normal block
; 87   : 		_Ptr = ::operator new(_User_size);

	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4

; 88   : 		_SCL_SECURE_ALWAYS_VALIDATE(_Ptr != 0);

	test	eax, eax
	jne	SHORT $LN1@Allocate
	jmp	DWORD PTR __imp___invalid_parameter_noinfo_noreturn
?_Allocate@std@@YAPAXII_N@Z ENDP			; std::_Allocate
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
_TEXT	SEGMENT
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC ; std::_Iterator_base12::_Getcont, COMDAT
; _this$ = ecx

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	jne	SHORT $LN3@Getcont

; 205  : 		}

	ret	0
$LN3@Getcont:

; 204  : 		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);

	mov	eax, DWORD PTR [eax]

; 205  : 		}

	ret	0
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ENDP ; std::_Iterator_base12::_Getcont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
_TEXT	SEGMENT
__Parent$ = 8						; size = 4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC ; std::_Iterator_base12::_Adopt, COMDAT
; _this$ = ecx

; 169  : 		{	// adopt this iterator by parent

	npad	2
	push	ebp
	mov	ebp, esp

; 170  : 		if (_Parent == 0)

	mov	eax, DWORD PTR __Parent$[ebp]
	test	eax, eax
	je	SHORT $LN3@Adopt

; 171  : 			{	// no future parent, just disown current parent
; 172  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 173  : 			_Lockit _Lock(_LOCK_DEBUG);
; 174  : 			_Orphan_me();
; 175  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 176  : 			}
; 177  : 		else
; 178  : 			{	// have a parent, do adoption
; 179  : 			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;
; 180  : 
; 181  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 182  : 			if (_Myproxy != _Parent_proxy)
; 183  : 				{	// change parentage
; 184  : 				_Lockit _Lock(_LOCK_DEBUG);
; 185  : 				_Orphan_me();
; 186  : 				_Mynextiter = _Parent_proxy->_Myfirstiter;
; 187  : 				_Parent_proxy->_Myfirstiter = this;
; 188  : 				_Myproxy = _Parent_proxy;
; 189  : 				}
; 190  : 
; 191  :  #else /* _ITERATOR_DEBUG_LEVEL == 2 */
; 192  : 			_Myproxy = _Parent_proxy;

	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR [ecx], eax
$LN3@Adopt:

; 193  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 194  : 			}
; 195  : 		}

	pop	ebp
	ret	4
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ENDP ; std::_Iterator_base12::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??1_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::~_Iterator_base12, COMDAT
; _this$ = ecx

; 162  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 163  : 		_Lockit _Lock(_LOCK_DEBUG);
; 164  : 		_Orphan_me();
; 165  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 166  : 		}

	ret	0
??1_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::~_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??0_Iterator_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Iterator_base12@std@@QAE@XZ PROC			; std::_Iterator_base12::_Iterator_base12, COMDAT
; _this$ = ecx

; 133  : 		: _Myproxy(0), _Mynextiter(0)

	mov	DWORD PTR [ecx], 0

; 135  : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0_Iterator_base12@std@@QAE@XZ ENDP			; std::_Iterator_base12::_Iterator_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z
_TEXT	SEGMENT
__Right$ = 8						; size = 4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z PROC	; std::_Container_base12::_Swap_all, COMDAT
; _this$ = ecx

; 253  : 	{	// swap all iterators

	npad	2
	push	ebp
	mov	ebp, esp

; 254  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 255  : 	_Lockit _Lock(_LOCK_DEBUG);
; 256  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 257  : 
; 258  : 	_Container_proxy *_Temp = _Myproxy;

	mov	edx, DWORD PTR [ecx]
	push	esi

; 259  : 	_Myproxy = _Right._Myproxy;

	mov	esi, DWORD PTR __Right$[ebp]
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR [ecx], eax

; 260  : 	_Right._Myproxy = _Temp;

	mov	DWORD PTR [esi], edx

; 261  : 
; 262  : 	if (_Myproxy != 0)

	mov	eax, DWORD PTR [ecx]
	test	eax, eax
	je	SHORT $LN2@Swap_all

; 263  : 		_Myproxy->_Mycont = (_Container_base12 *)this;

	mov	DWORD PTR [eax], ecx
$LN2@Swap_all:

; 264  : 	if (_Right._Myproxy != 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN3@Swap_all

; 265  : 		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;

	mov	DWORD PTR [eax], esi
$LN3@Swap_all:
	pop	esi

; 266  : 	}

	pop	ebp
	ret	4
?_Swap_all@_Container_base12@std@@QAEXAAU12@@Z ENDP	; std::_Container_base12::_Swap_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Orphan_all@_Container_base12@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		; std::_Container_base12::_Orphan_all, COMDAT
; _this$ = ecx

; 239  :  #if _ITERATOR_DEBUG_LEVEL == 2
; 240  : 	if (_Myproxy != 0)
; 241  : 		{	// proxy allocated, drain it
; 242  : 		_Lockit _Lock(_LOCK_DEBUG);
; 243  : 
; 244  : 		for (_Iterator_base12 **_Pnext = &_Myproxy->_Myfirstiter;
; 245  : 			*_Pnext != 0; *_Pnext = (*_Pnext)->_Mynextiter)
; 246  : 			(*_Pnext)->_Myproxy = 0;
; 247  : 		_Myproxy->_Myfirstiter = 0;
; 248  : 		}
; 249  :  #endif /* _ITERATOR_DEBUG_LEVEL == 2 */
; 250  : 	}

	ret	0
?_Orphan_all@_Container_base12@std@@QAEXXZ ENDP		; std::_Container_base12::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??1_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??1_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::~_Container_base12, COMDAT
; _this$ = ecx

; 115  : 		_Orphan_all();
; 116  : 		}

	ret	0
??1_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::~_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??0_Container_base12@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_base12@std@@QAE@XZ PROC			; std::_Container_base12::_Container_base12, COMDAT
; _this$ = ecx

; 99   : 		: _Myproxy(0)

	mov	DWORD PTR [ecx], 0

; 101  : 		}

	mov	eax, ecx
	ret	0
??0_Container_base12@std@@QAE@XZ ENDP			; std::_Container_base12::_Container_base12
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ??0_Container_proxy@std@@QAE@XZ
_TEXT	SEGMENT
??0_Container_proxy@std@@QAE@XZ PROC			; std::_Container_proxy::_Container_proxy, COMDAT
; _this$ = ecx

; 87   : 		: _Mycont(0), _Myfirstiter(0)

	mov	DWORD PTR [ecx], 0

; 89   : 		}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	ret	0
??0_Container_proxy@std@@QAE@XZ ENDP			; std::_Container_proxy::_Container_proxy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Adopt@_Iterator_base0@std@@QAEXPBX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		; std::_Iterator_base0::_Adopt, COMDAT
; _this$ = ecx

; 75   : 		}

	ret	4
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z ENDP		; std::_Iterator_base0::_Adopt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\xutility
;	COMDAT ?_Orphan_all@_Container_base0@std@@QAEXXZ
_TEXT	SEGMENT
?_Orphan_all@_Container_base0@std@@QAEXXZ PROC		; std::_Container_base0::_Orphan_all, COMDAT
; _this$ = ecx

; 64   : 		}

	ret	0
?_Orphan_all@_Container_base0@std@@QAEXXZ ENDP		; std::_Container_base0::_Orphan_all
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAXAADABD@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		; std::char_traits<char>::assign, COMDAT

; 516  : 		{	// assign an element

	npad	2
	push	ebp
	mov	ebp, esp

; 517  : 		_Left = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	BYTE PTR [eax], cl

; 518  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAXAADABD@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?assign@?$char_traits@D@std@@SAPADQADID@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 1
?assign@?$char_traits@D@std@@SAPADQADID@Z PROC		; std::char_traits<char>::assign, COMDAT

; 511  : 		{	// assign _Count * _Ch to [_First, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 512  : 		return ((_Elem *)_CSTD memset(_First, _Ch, _Count));

	push	DWORD PTR __Count$[ebp]
	movsx	eax, BYTE PTR __Ch$[ebp]
	push	eax
	push	DWORD PTR __First$[ebp]
	call	_memset
	add	esp, 12					; 0000000cH

; 513  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@D@std@@SAPADQADID@Z ENDP		; std::char_traits<char>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?move@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::move, COMDAT

; 505  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 507  : 		}

	pop	ebp

; 506  : 		return ((_Elem *)_CSTD memmove(_First1, _First2, _Count));

	jmp	DWORD PTR __imp__memmove
?move@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?copy@?$char_traits@D@std@@SAPADQADQBDI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z PROC		; std::char_traits<char>::copy, COMDAT

; 485  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 486  : 		return ((_Elem *)_CSTD memcpy(_First1, _First2, _Count));

	push	DWORD PTR __Count$[ebp]
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	_memcpy
	add	esp, 12					; 0000000cH

; 487  : 		}

	pop	ebp
	ret	0
?copy@?$char_traits@D@std@@SAPADQADQBDI@Z ENDP		; std::char_traits<char>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?length@?$char_traits@D@std@@SAIQBD@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@D@std@@SAIQBD@Z PROC		; std::char_traits<char>::length, COMDAT

; 479  : 		{	// find length of null-terminated string

	npad	2
	push	ebp
	mov	ebp, esp

; 480  : 		return (_CSTD strlen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [eax+1]
	npad	5
$LL3@length:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL3@length
	sub	eax, edx

; 481  : 		}

	pop	ebp
	ret	0
?length@?$char_traits@D@std@@SAIQBD@Z ENDP		; std::char_traits<char>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?compare@?$char_traits@D@std@@SAHQBD0I@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?compare@?$char_traits@D@std@@SAHQBD0I@Z PROC		; std::char_traits<char>::compare, COMDAT

; 474  : 		{	// compare [_First1, _First1 + _Count) with [_First2, ...)

	npad	2
	push	ebp
	mov	ebp, esp

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

	mov	ecx, DWORD PTR __Count$[ebp]
	mov	edx, DWORD PTR __First1$[ebp]
	push	esi
	mov	esi, DWORD PTR __First2$[ebp]
	sub	ecx, 4
	jb	SHORT $LN5@compare
$LL6@compare:
	mov	eax, DWORD PTR [edx]
	cmp	eax, DWORD PTR [esi]
	jne	SHORT $LN4@compare
	add	edx, 4
	add	esi, 4
	sub	ecx, 4
	jae	SHORT $LL6@compare
$LN5@compare:
	cmp	ecx, -4					; fffffffcH
	je	SHORT $LN3@compare
$LN4@compare:
	mov	al, BYTE PTR [edx]
	cmp	al, BYTE PTR [esi]
	jne	SHORT $LN7@compare
	cmp	ecx, -3					; fffffffdH
	je	SHORT $LN3@compare
	mov	al, BYTE PTR [edx+1]
	cmp	al, BYTE PTR [esi+1]
	jne	SHORT $LN7@compare
	cmp	ecx, -2					; fffffffeH
	je	SHORT $LN3@compare
	mov	al, BYTE PTR [edx+2]
	cmp	al, BYTE PTR [esi+2]
	jne	SHORT $LN7@compare
	cmp	ecx, -1
	je	SHORT $LN3@compare
	mov	al, BYTE PTR [edx+3]
	cmp	al, BYTE PTR [esi+3]
	je	SHORT $LN3@compare
$LN7@compare:
	sbb	eax, eax
	or	eax, 1
	pop	esi

; 476  : 		}

	pop	ebp
	ret	0
$LN3@compare:

; 475  : 		return (_CSTD memcmp(_First1, _First2, _Count));

	xor	eax, eax
	pop	esi

; 476  : 		}

	pop	ebp
	ret	0
?compare@?$char_traits@D@std@@SAHQBD0I@Z ENDP		; std::char_traits<char>::compare
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
_TEXT	SEGMENT
__Left$ = 8						; size = 4
__Right$ = 12						; size = 4
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 325  : 		{	// assign an element

	npad	2
	push	ebp
	mov	ebp, esp

; 326  : 		_Left = _Right;

	mov	eax, DWORD PTR __Right$[ebp]
	mov	cx, WORD PTR [eax]
	mov	eax, DWORD PTR __Left$[ebp]
	mov	WORD PTR [eax], cx

; 327  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?assign@?$char_traits@_W@std@@SAPA_WQA_WI_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
__Count$ = 12						; size = 4
__Ch$ = 16						; size = 2
?assign@?$char_traits@_W@std@@SAPA_WQA_WI_W@Z PROC	; std::char_traits<wchar_t>::assign, COMDAT

; 320  : 		{	// assign _Count * _Ch to [_First, ...)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 260  :         for (; 0 < _N; ++_Su, --_N)

	mov	ecx, DWORD PTR __Count$[ebp]
	test	ecx, ecx
	je	SHORT $LN12@assign
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 321  : 		return ((_Elem *)_CSTD wmemset(_First, _Ch, _Count));

	mov	eax, DWORD PTR __Ch$[ebp]
	movzx	edx, ax
	mov	eax, edx
	shl	edx, 16					; 00000010H
	push	edi
	mov	edi, DWORD PTR __First$[ebp]
	or	eax, edx
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
	pop	edi
$LN12@assign:
	mov	eax, DWORD PTR __First$[ebp]

; 322  : 		}

	pop	ebp
	ret	0
?assign@?$char_traits@_W@std@@SAPA_WQA_WI_W@Z ENDP	; std::char_traits<wchar_t>::assign
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::char_traits<wchar_t>::move, COMDAT

; 314  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, eax
	mov	DWORD PTR __Count$[ebp], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 316  : 		}

	pop	ebp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	jmp	DWORD PTR __imp__memmove
?move@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::char_traits<wchar_t>::move
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z
_TEXT	SEGMENT
__First1$ = 8						; size = 4
__First2$ = 12						; size = 4
__Count$ = 16						; size = 4
?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z PROC	; std::char_traits<wchar_t>::copy, COMDAT

; 294  : 		{	// copy [_First2, _First2 + _Count) to [_First1, ...)

	npad	2
	push	ebp
	mov	ebp, esp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h

; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __Count$[ebp]
	add	eax, eax
	push	eax
	push	DWORD PTR __First2$[ebp]
	push	DWORD PTR __First1$[ebp]
	call	_memcpy
	add	esp, 12					; 0000000cH
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd

; 296  : 		}

	pop	ebp
	ret	0
?copy@?$char_traits@_W@std@@SAPA_WQA_WQB_WI@Z ENDP	; std::char_traits<wchar_t>::copy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\iosfwd
;	COMDAT ?length@?$char_traits@_W@std@@SAIQB_W@Z
_TEXT	SEGMENT
__First$ = 8						; size = 4
?length@?$char_traits@_W@std@@SAIQB_W@Z PROC		; std::char_traits<wchar_t>::length, COMDAT

; 288  : 		{	// find length of null-terminated sequence

	npad	2
	push	ebp
	mov	ebp, esp

; 289  : 		return (_CSTD wcslen(_First));

	mov	eax, DWORD PTR __First$[ebp]
	lea	edx, DWORD PTR [eax+2]
	npad	5
$LL3@length:
	mov	cx, WORD PTR [eax]
	add	eax, 2
	test	cx, cx
	jne	SHORT $LL3@length
	sub	eax, edx
	sar	eax, 1

; 290  : 		}

	pop	ebp
	ret	0
?length@?$char_traits@_W@std@@SAIQB_W@Z ENDP		; std::char_traits<wchar_t>::length
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vcruntime_new.h
;	COMDAT ??2@YAPAXIPAX@Z
_TEXT	SEGMENT
__Size$ = 8						; size = 4
__Where$ = 12						; size = 4
??2@YAPAXIPAX@Z PROC					; operator new, COMDAT

; 91   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 92   :         (void)_Size;
; 93   :         return _Where;

	mov	eax, DWORD PTR __Where$[ebp]

; 94   :     }

	pop	ebp
	ret	0
??2@YAPAXIPAX@Z ENDP					; operator new
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\limits
;	COMDAT ?max@?$numeric_limits@I@std@@SAIXZ
_TEXT	SEGMENT
?max@?$numeric_limits@I@std@@SAIXZ PROC			; std::numeric_limits<unsigned int>::max, COMDAT

; 741  : 		return (UINT_MAX);

	or	eax, -1

; 742  : 		}

	ret	0
?max@?$numeric_limits@I@std@@SAIXZ ENDP			; std::numeric_limits<unsigned int>::max
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemset
_TEXT	SEGMENT
__S$ = 8						; size = 4
__C$ = 12						; size = 2
__N$ = 16						; size = 4
_wmemset PROC						; COMDAT

; 258  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 260  :         for (; 0 < _N; ++_Su, --_N)

	mov	ecx, DWORD PTR __N$[ebp]
	test	ecx, ecx
	je	SHORT $LN10@wmemset

; 259  :         wchar_t *_Su = _S;

	mov	eax, DWORD PTR __C$[ebp]
	movzx	edx, ax
	mov	eax, edx
	shl	edx, 16					; 00000010H
	push	edi
	mov	edi, DWORD PTR __S$[ebp]
	or	eax, edx
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
	pop	edi
$LN10@wmemset:

; 261  :         {
; 262  :             *_Su = _C;
; 263  :         }
; 264  :         return _S;

	mov	eax, DWORD PTR __S$[ebp]

; 265  :     }

	pop	ebp
	ret	0
_wmemset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemmove
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemmove PROC						; COMDAT

; 244  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __N$[ebp]
	add	eax, eax
	mov	DWORD PTR __N$[ebp], eax

; 248  :         #pragma warning(pop)
; 249  :     }

	pop	ebp

; 245  :         #pragma warning(push)
; 246  :         #pragma warning(disable : 4996 6386)
; 247  :         return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));

	jmp	DWORD PTR __imp__memmove
_wmemmove ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\wchar.h
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT

; 231  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	mov	eax, DWORD PTR __N$[ebp]
	add	eax, eax
	mov	DWORD PTR __N$[ebp], eax

; 235  :         #pragma warning(pop)
; 236  :     }

	pop	ebp

; 232  :         #pragma warning(push)
; 233  :         #pragma warning(disable : 4995 4996 6386)
; 234  :         return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));

	jmp	_memcpy
_wmemcpy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\include\vadefs.h
;	COMDAT ??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ
_TEXT	SEGMENT
??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ PROC ; __vcrt_va_start_verify_argument_type<wchar_t const * const>, COMDAT

; 145  :             static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
; 146  :         }

	ret	0
??$__vcrt_va_start_verify_argument_type@QB_W@@YAXXZ ENDP ; __vcrt_va_start_verify_argument_type<wchar_t const * const>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
;	COMDAT ?_InterlockedCompareExchange@@YAKPCKKK@Z
_TEXT	SEGMENT
_Destination$ = 8					; size = 4
_Exchange$ = 12						; size = 4
_Comperand$ = 16					; size = 4
?_InterlockedCompareExchange@@YAKPCKKK@Z PROC		; _InterlockedCompareExchange, COMDAT

; 9002 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 9003 :     return (unsigned long) _InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);

	mov	edx, DWORD PTR _Exchange$[ebp]
	mov	ecx, DWORD PTR _Destination$[ebp]
	mov	eax, DWORD PTR _Comperand$[ebp]
	lock	 cmpxchg DWORD PTR [ecx], edx

; 9004 : }

	pop	ebp
	ret	0
?_InterlockedCompareExchange@@YAKPCKKK@Z ENDP		; _InterlockedCompareExchange
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jle	SHORT $LN4@HRESULT_FR
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
$LN4@HRESULT_FR:
	pop	ebp
	ret	0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\string.h
;	COMDAT ?strstr@@YAPADQADQBD@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubString$ = 12					; size = 4
?strstr@@YAPADQADQBD@Z PROC				; strstr, COMDAT

; 536  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 538  :     }

	pop	ebp

; 537  :         return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));

	jmp	DWORD PTR __imp__strstr
?strstr@@YAPADQADQBD@Z ENDP				; strstr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
;	COMDAT ?wcsstr@@YAPA_WPA_WPB_W@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?wcsstr@@YAPA_WPA_WPB_W@Z PROC				; wcsstr, COMDAT

; 552  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 554  :     }

	pop	ebp

; 553  :         return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));

	jmp	DWORD PTR __imp__wcsstr
?wcsstr@@YAPA_WPA_WPB_W@Z ENDP				; wcsstr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.10240.0\ucrt\corecrt_wstring.h
;	COMDAT ?wcsrchr@@YAPA_WPA_W_W@Z
_TEXT	SEGMENT
__String$ = 8						; size = 4
__C$ = 12						; size = 2
?wcsrchr@@YAPA_WPA_W_W@Z PROC				; wcsrchr, COMDAT

; 545  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 547  :     }

	pop	ebp

; 546  :         return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));

	jmp	DWORD PTR __imp__wcsrchr
?wcsrchr@@YAPA_WPA_W_W@Z ENDP				; wcsrchr
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ?__empty_global_delete@@YAXPAXI@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
___formal$ = 12						; size = 4
?__empty_global_delete@@YAXPAXI@Z PROC			; __empty_global_delete, COMDAT

; 3036 : SK_HostAppUtil SK_HostApp;

	ret	0
?__empty_global_delete@@YAXPAXI@Z ENDP			; __empty_global_delete
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\utility.cpp
;	COMDAT ?__empty_global_delete@@YAXPAX@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
?__empty_global_delete@@YAXPAX@Z PROC			; __empty_global_delete, COMDAT

; 3036 : SK_HostAppUtil SK_HostApp;

	ret	0
?__empty_global_delete@@YAXPAX@Z ENDP			; __empty_global_delete
_TEXT	ENDS
END
