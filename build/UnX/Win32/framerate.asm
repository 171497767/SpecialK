; Listing generated by Microsoft (R) Optimizing Compiler Version 19.10.25019.0 

	TITLE	C:\Users\andon\Source\Repos\SpecialK\src\framerate.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRT
INCLUDELIB OLDNAMES

PUBLIC	?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A	; SK::Framerate::Stats::freq
PUBLIC	?chDirSep@ATL@@3_WB				; ATL::chDirSep
PUBLIC	?chRightBracket@ATL@@3_WB			; ATL::chRightBracket
PUBLIC	?chLeftBracket@ATL@@3_WB			; ATL::chLeftBracket
PUBLIC	?chQuote@ATL@@3_WB				; ATL::chQuote
PUBLIC	?chEquals@ATL@@3_WB				; ATL::chEquals
PUBLIC	?szStringVal@ATL@@3QB_WB			; ATL::szStringVal
PUBLIC	?multiszStringVal@ATL@@3QB_WB			; ATL::multiszStringVal
PUBLIC	?szDwordVal@ATL@@3QB_WB				; ATL::szDwordVal
PUBLIC	?szBinaryVal@ATL@@3QB_WB			; ATL::szBinaryVal
PUBLIC	?szValToken@ATL@@3QB_WB				; ATL::szValToken
PUBLIC	?szForceRemove@ATL@@3QB_WB			; ATL::szForceRemove
PUBLIC	?szNoRemove@ATL@@3QB_WB				; ATL::szNoRemove
PUBLIC	?szDelete@ATL@@3QB_WB				; ATL::szDelete
PUBLIC	_IID_IDocHostUIHandlerDispatch
PUBLIC	?Sleep_Original@@3P6GXK@ZA			; Sleep_Original
PUBLIC	?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original
PUBLIC	?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A ; ATL::_pAtlAutoThreadModule
PUBLIC	_IID_IAxWinHostWindow
PUBLIC	_IID_IAxWinHostWindowLic
PUBLIC	_IID_IAxWinAmbientDispatch
PUBLIC	?_pAtlModule@ATL@@3PAVCAtlModule@1@A		; ATL::_pAtlModule
PUBLIC	?SK_Framerate_Busy@@3_NA			; SK_Framerate_Busy
PUBLIC	?SK_Framerate_YieldOnce@@3_NA			; SK_Framerate_YieldOnce
PUBLIC	?SK_Framerate_ReduceInputLatency@@3_NA		; SK_Framerate_ReduceInputLatency
PUBLIC	?SK_Framerate_WaitScalar@@3MA			; SK_Framerate_WaitScalar
PUBLIC	?SK_Framerate_SleepToBusy@@3MA			; SK_Framerate_SleepToBusy
PUBLIC	_LIBID_ATLLib
PUBLIC	?pfnQueryPerformanceCounter@@3PAXA		; pfnQueryPerformanceCounter
PUBLIC	?pfnSleep@@3PAXA				; pfnSleep
PUBLIC	?NtDll@@3PAUHINSTANCE__@@A			; NtDll
PUBLIC	?NtQueryTimerResolution@@3P6GJPAK00@ZA		; NtQueryTimerResolution
PUBLIC	?NtSetTimerResolution@@3P6GJKEPAK@ZA		; NtSetTimerResolution
PUBLIC	?target_fps@@3MA				; target_fps
PUBLIC	_IID_IAxWinAmbientDispatchEx
PUBLIC	_IID_IInternalConnection
PUBLIC	___pobjMapEntryFirst
PUBLIC	___pobjMapEntryLast
PUBLIC	?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA	; ATL::_pPerfRegFunc
PUBLIC	?_pPerfUnRegFunc@ATL@@3P6AJXZA			; ATL::_pPerfUnRegFunc
PUBLIC	?_AtlRegisterPerUser@ATL@@3_NA			; ATL::_AtlRegisterPerUser
PUBLIC	?_pModule@ATL@@3PAVCComModule@1@A		; ATL::_pModule
PUBLIC	?hModSteamAPI@@3PAXA				; hModSteamAPI
PUBLIC	_CLSID_Registrar
PUBLIC	_IID_IRegistrar
_BSS	SEGMENT
?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A DQ 01H DUP (?) ; SK::Framerate::Stats::freq
?Sleep_Original@@3P6GXK@ZA DD 01H DUP (?)		; Sleep_Original
?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA DD 01H DUP (?) ; QueryPerformanceCounter_Original
_BSS	ENDS
;	COMDAT ?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A
_BSS	SEGMENT
?_pAtlAutoThreadModule@ATL@@3PAUIAtlAutoThreadModule@1@A DD 01H DUP (?) ; ATL::_pAtlAutoThreadModule
_BSS	ENDS
;	COMDAT ?_pAtlModule@ATL@@3PAVCAtlModule@1@A
_BSS	SEGMENT
?_pAtlModule@ATL@@3PAVCAtlModule@1@A DD 01H DUP (?)	; ATL::_pAtlModule
_BSS	ENDS
_BSS	SEGMENT
?pfnQueryPerformanceCounter@@3PAXA DD 01H DUP (?)	; pfnQueryPerformanceCounter
?pfnSleep@@3PAXA DD 01H DUP (?)				; pfnSleep
?NtDll@@3PAUHINSTANCE__@@A DD 01H DUP (?)		; NtDll
?NtQueryTimerResolution@@3P6GJPAK00@ZA DD 01H DUP (?)	; NtQueryTimerResolution
?NtSetTimerResolution@@3P6GJKEPAK@ZA DD 01H DUP (?)	; NtSetTimerResolution
?target_fps@@3MA DD 01H DUP (?)				; target_fps
_BSS	ENDS
;	COMDAT ?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA
_BSS	SEGMENT
?_pPerfRegFunc@ATL@@3P6AJPAUHINSTANCE__@@@ZA DD 01H DUP (?) ; ATL::_pPerfRegFunc
_BSS	ENDS
;	COMDAT ?_pPerfUnRegFunc@ATL@@3P6AJXZA
_BSS	SEGMENT
?_pPerfUnRegFunc@ATL@@3P6AJXZA DD 01H DUP (?)		; ATL::_pPerfUnRegFunc
_BSS	ENDS
;	COMDAT ?_AtlRegisterPerUser@ATL@@3_NA
_BSS	SEGMENT
?_AtlRegisterPerUser@ATL@@3_NA DB 01H DUP (?)		; ATL::_AtlRegisterPerUser
_BSS	ENDS
;	COMDAT ?_pModule@ATL@@3PAVCComModule@1@A
_BSS	SEGMENT
?_pModule@ATL@@3PAVCComModule@1@A DD 01H DUP (?)	; ATL::_pModule
_BSS	ENDS
_BSS	SEGMENT
?hModSteamAPI@@3PAXA DD 01H DUP (?)			; hModSteamAPI
_BSS	ENDS
;	COMDAT _IID_IRegistrar
CONST	SEGMENT
_IID_IRegistrar DD 044ec053bH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT _CLSID_Registrar
CONST	SEGMENT
_CLSID_Registrar DD 044ec053aH
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
;	COMDAT ___pobjMapEntryLast
ATL$__z	SEGMENT
___pobjMapEntryLast DD 00H
ATL$__z	ENDS
;	COMDAT ___pobjMapEntryFirst
ATL$__a	SEGMENT
___pobjMapEntryFirst DD 00H
ATL$__a	ENDS
;	COMDAT _IID_IInternalConnection
CONST	SEGMENT
_IID_IInternalConnection DD 072ad0770H
	DW	06a9fH
	DW	011d1H
	DB	0bcH
	DB	0ecH
	DB	00H
	DB	060H
	DB	08H
	DB	08fH
	DB	044H
	DB	04eH
CONST	ENDS
;	COMDAT _IID_IAxWinAmbientDispatchEx
CONST	SEGMENT
_IID_IAxWinAmbientDispatchEx DD 0b2d0778bH
	DW	0ac99H
	DW	04c58H
	DB	0a5H
	DB	0c8H
	DB	0e7H
	DB	072H
	DB	04eH
	DB	053H
	DB	016H
	DB	0b5H
CONST	ENDS
;	COMDAT _LIBID_ATLLib
CONST	SEGMENT
_LIBID_ATLLib DD 044ec0535H
	DW	0400fH
	DW	011d0H
	DB	09dH
	DB	0cdH
	DB	00H
	DB	0a0H
	DB	0c9H
	DB	03H
	DB	091H
	DB	0d3H
CONST	ENDS
_DATA	SEGMENT
?SK_Framerate_Busy@@3_NA DB 01H				; SK_Framerate_Busy
?SK_Framerate_YieldOnce@@3_NA DB 01H			; SK_Framerate_YieldOnce
?SK_Framerate_ReduceInputLatency@@3_NA DB 01H		; SK_Framerate_ReduceInputLatency
	ORG $+1
?SK_Framerate_WaitScalar@@3MA DD 0426ffec5r	; 59.9988 ; SK_Framerate_WaitScalar
?SK_Framerate_SleepToBusy@@3MA DD 040533333r	; 3.3	; SK_Framerate_SleepToBusy
_DATA	ENDS
;	COMDAT _IID_IAxWinAmbientDispatch
CONST	SEGMENT
_IID_IAxWinAmbientDispatch DD 0b6ea2051H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindowLic
CONST	SEGMENT
_IID_IAxWinHostWindowLic DD 03935bda8H
	DW	04ed9H
	DW	0495cH
	DB	086H
	DB	050H
	DB	0e0H
	DB	01fH
	DB	0c1H
	DB	0e3H
	DB	08aH
	DB	04bH
CONST	ENDS
;	COMDAT _IID_IAxWinHostWindow
CONST	SEGMENT
_IID_IAxWinHostWindow DD 0b6ea2050H
	DW	048aH
	DW	011d1H
	DB	082H
	DB	0b9H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	0b9H
	DB	094H
	DB	02eH
CONST	ENDS
;	COMDAT _IID_IDocHostUIHandlerDispatch
CONST	SEGMENT
_IID_IDocHostUIHandlerDispatch DD 0425b5af0H
	DW	065f1H
	DW	011d1H
	DB	096H
	DB	011H
	DB	00H
	DB	00H
	DB	0f8H
	DB	01eH
	DB	0dH
	DB	0dH
CONST	ENDS
;	COMDAT ?szDelete@ATL@@3QB_WB
CONST	SEGMENT
?szDelete@ATL@@3QB_WB DD FLAT:$SG179263			; ATL::szDelete
CONST	ENDS
;	COMDAT ?szNoRemove@ATL@@3QB_WB
CONST	SEGMENT
?szNoRemove@ATL@@3QB_WB DD FLAT:$SG179261		; ATL::szNoRemove
CONST	ENDS
;	COMDAT ?szForceRemove@ATL@@3QB_WB
CONST	SEGMENT
?szForceRemove@ATL@@3QB_WB DD FLAT:$SG179259		; ATL::szForceRemove
CONST	ENDS
;	COMDAT ?szValToken@ATL@@3QB_WB
CONST	SEGMENT
?szValToken@ATL@@3QB_WB DD FLAT:$SG179257		; ATL::szValToken
CONST	ENDS
;	COMDAT ?szBinaryVal@ATL@@3QB_WB
CONST	SEGMENT
?szBinaryVal@ATL@@3QB_WB DD FLAT:$SG179255		; ATL::szBinaryVal
CONST	ENDS
;	COMDAT ?szDwordVal@ATL@@3QB_WB
CONST	SEGMENT
?szDwordVal@ATL@@3QB_WB DD FLAT:$SG179253		; ATL::szDwordVal
CONST	ENDS
;	COMDAT ?multiszStringVal@ATL@@3QB_WB
CONST	SEGMENT
?multiszStringVal@ATL@@3QB_WB DD FLAT:$SG179251		; ATL::multiszStringVal
CONST	ENDS
;	COMDAT ?szStringVal@ATL@@3QB_WB
CONST	SEGMENT
?szStringVal@ATL@@3QB_WB DD FLAT:$SG179249		; ATL::szStringVal
CONST	ENDS
;	COMDAT ?chEquals@ATL@@3_WB
CONST	SEGMENT
?chEquals@ATL@@3_WB DW 03dH				; ATL::chEquals
CONST	ENDS
;	COMDAT ?chQuote@ATL@@3_WB
CONST	SEGMENT
?chQuote@ATL@@3_WB DW 027H				; ATL::chQuote
CONST	ENDS
;	COMDAT ?chLeftBracket@ATL@@3_WB
CONST	SEGMENT
?chLeftBracket@ATL@@3_WB DW 07bH			; ATL::chLeftBracket
CONST	ENDS
;	COMDAT ?chRightBracket@ATL@@3_WB
CONST	SEGMENT
?chRightBracket@ATL@@3_WB DW 07dH			; ATL::chRightBracket
CONST	ENDS
;	COMDAT ?chDirSep@ATL@@3_WB
CONST	SEGMENT
?chDirSep@ATL@@3_WB DW 05cH				; ATL::chDirSep
CONST	ENDS
CONST	SEGMENT
$SG167954 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'A', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG179249 DB	'S', 00H, 00H, 00H
$SG179251 DB	'M', 00H, 00H, 00H
$SG179253 DB	'D', 00H, 00H, 00H
$SG179255 DB	'B', 00H, 00H, 00H
$SG179257 DB	'V', 00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG179259 DB	'F', 00H, 'o', 00H, 'r', 00H, 'c', 00H, 'e', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 00H, 00H
$SG179261 DB	'N', 00H, 'o', 00H, 'R', 00H, 'e', 00H, 'm', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG179263 DB	'D', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	00H, 00H
	ORG $+2
$SG168001 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H, 00H
$SG168048 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'T', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG168095 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e'
	DB	00H, 00H, 00H
$SG168142 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c'
	DB	00H, 'i', 00H, 'l', 00H, 00H, 00H
$SG168189 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 't', 00H, 'r', 00H, 'i', 00H, 'n'
	DB	00H, 'g', 00H, 00H, 00H
	ORG $+2
$SG168236 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'M', 00H, 'a', 00H, 'p', 00H, 00H, 00H
$SG168241 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'U', 00H, 't', 00H, 'i', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG168288 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'u', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG168335 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'y', 00H, 'n', 00H, 'c', 00H, 00H
	DB	00H
	ORG $+2
$SG168382 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'I', 00H, 'S', 00H, 'A', 00H, 'P', 00H, 'I'
	DB	00H, 00H, 00H
$SG167366 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'G', 00H, 'e', 00H, 'n', 00H, 'e', 00H, 'r'
	DB	00H, 'a', 00H, 'l', 00H, 00H, 00H
$SG167437 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 00H, 00H
$SG167484 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'Q', 00H, 'I', 00H, 00H, 00H
	ORG $+2
$SG167531 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's'
	DB	00H, 't', 00H, 'r', 00H, 'a', 00H, 'r', 00H, 00H, 00H
$SG167578 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'R', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'o'
	DB	00H, 'u', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG198338 DB	's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'm', 00H, '_', 00H
	DB	'a', 00H, 'p', 00H, 'i', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l'
	DB	00H, 00H, 00H
$SG167625 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG198343 DB	'[', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ']', 00H, ' '
	DB	00H, 'S', 00H, 'l', 00H, 'e', 00H, 'e', 00H, 'p', 00H, ' ', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'r', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't'
	DB	00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'l', 00H, 'u', 00H, ' ', 00H, 'm', 00H, 's'
	DB	00H, '!', 00H, 00H, 00H
$SG179939 DB	'A', 00H, 'p', 00H, 'p', 00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG198349 DB	'[', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ']', 00H, ' '
	DB	00H, 'S', 00H, 'l', 00H, 'e', 00H, 'e', 00H, 'p', 00H, ' ', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, 'f', 00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'G', 00H
	DB	'U', 00H, 'I', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 'd', 00H, ':', 00H, ' ', 00H, '%', 00H, 'l', 00H
	DB	'u', 00H, ' ', 00H, 'm', 00H, 's', 00H, '!', 00H, 00H, 00H
	ORG $+2
$SG179940 DB	'C', 00H, 'L', 00H, 'S', 00H, 'I', 00H, 'D', 00H, 00H, 00H
$SG179941 DB	'C', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'o', 00H, 'n', 00H
	DB	'e', 00H, 'n', 00H, 't', 00H, ' ', 00H, 'C', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'g', 00H, 'o', 00H, 'r', 00H, 'i', 00H, 'e', 00H
	DB	's', 00H, 00H, 00H
	ORG $+2
$SG179942 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'y', 00H
	DB	'p', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG179943 DB	'I', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'f', 00H
	DB	'a', 00H, 'c', 00H, 'e', 00H, 00H, 00H
$SG179944 DB	'H', 00H, 'a', 00H, 'r', 00H, 'd', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG179945 DB	'M', 00H, 'i', 00H, 'm', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG179946 DB	'S', 00H, 'A', 00H, 'M', 00H, 00H, 00H
$SG179947 DB	'S', 00H, 'E', 00H, 'C', 00H, 'U', 00H, 'R', 00H, 'I', 00H
	DB	'T', 00H, 'Y', 00H, 00H, 00H
	ORG $+2
$SG179948 DB	'S', 00H, 'Y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'M', 00H
	DB	00H, 00H
	ORG $+2
$SG179949 DB	'S', 00H, 'o', 00H, 'f', 00H, 't', 00H, 'w', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG200429 DB	'[', 00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	'L', 00H, 'i', 00H, 'm', 00H, 'i', 00H, 't', 00H, ']', 00H, ' '
	DB	00H, 'F', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'l', 00H, 'i', 00H, 'm'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'l', 00H
	DB	'o', 00H, 's', 00H, 't', 00H, ' ', 00H, 't', 00H, 'i', 00H, 'm'
	DB	00H, 'e', 00H, '?', 00H, '!', 00H, ' ', 00H, '(', 00H, 'n', 00H
	DB	'o', 00H, 'n', 00H, '-', 00H, 'm', 00H, 'o', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, 'o', 00H, 'n', 00H, 'i', 00H, 'c', 00H, ' ', 00H
	DB	'c', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG179950 DB	'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 'L', 00H, 'i', 00H
	DB	'b', 00H, 00H, 00H
$SG167672 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'r'
	DB	00H, 'o', 00H, 'l', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG167719 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'H', 00H, 'o', 00H, 's', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, 00H, 00H
$SG167766 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'D', 00H, 'B', 00H, 'C', 00H, 'l', 00H, 'i'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG198516 DB	'A', 00H, 'g', 00H, 'D', 00H, 'r', 00H, 'a', 00H, 'g', 00H
	DB	'.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG198518 DB	't', 00H, 's', 00H, 'f', 00H, 'i', 00H, 'x', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG198520 DB	'WaitForVBLANK', 00H
	ORG $+2
$SG198522 DB	'MaxDeltaTime', 00H
	ORG $+3
$SG198524 DB	'LimiterTolerance', 00H
	ORG $+3
$SG198526 DB	'TargetFPS', 00H
	ORG $+2
$SG198528 DB	'P', 00H, 'r', 00H, 'e', 00H, 't', 00H, 't', 00H, 'y', 00H
	DB	'P', 00H, 'r', 00H, 'i', 00H, 'n', 00H, 'n', 00H, 'y', 00H, '.'
	DB	00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
	ORG $+2
$SG198529 DB	'Sleep', 00H
	ORG $+2
$SG198530 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG198531 DB	'QueryPerformanceCounter', 00H
$SG198532 DB	'k', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	'3', 00H, '2', 00H, '.', 00H, 'd', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H
	ORG $+2
$SG167813 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'D', 00H, 'B', 00H, 'P', 00H, 'r', 00H, 'o'
	DB	00H, 'v', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG198534 DB	'n', 00H, 't', 00H, 'd', 00H, 'l', 00H, 'l', 00H, '.', 00H
	DB	'd', 00H, 'l', 00H, 'l', 00H, 00H, 00H
$SG198535 DB	'NtQueryTimerResolution', 00H
	ORG $+1
$SG198536 DB	'NtSetTimerResolution', 00H
	ORG $+3
$SG198538 DB	'[', 00H, ' ', 00H, ' ', 00H, 'T', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, ' ', 00H, ']', 00H, ' '
	DB	00H, 'K', 00H, 'e', 00H, 'r', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'u'
	DB	00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, '.', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'f', 00H, ' ', 00H, 'm', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG198539 DB	'[', 00H, ' ', 00H, ' ', 00H, 'T', 00H, 'i', 00H, 'm', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, ' ', 00H, ']', 00H, ' '
	DB	00H, 'N', 00H, 'e', 00H, 'w', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'i', 00H, 'o'
	DB	00H, 'n', 00H, '.', 00H, '.', 00H, '.', 00H, '.', 00H, ':', 00H
	DB	' ', 00H, '%', 00H, 'f', 00H, ' ', 00H, 'm', 00H, 's', 00H, 00H
	DB	00H
	ORG $+2
$SG167860 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'S', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 'i'
	DB	00H, 'n', 00H, 00H, 00H
	ORG $+2
$SG167907 DB	'a', 00H, 't', 00H, 'l', 00H, 'T', 00H, 'r', 00H, 'a', 00H
	DB	'c', 00H, 'e', 00H, 'N', 00H, 'o', 00H, 't', 00H, 'I', 00H, 'm'
	DB	00H, 'p', 00H, 'l', 00H, 00H, 00H
CONST	ENDS
PUBLIC	??_H@YGXPAXIIP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	__InterlockedAdd64
PUBLIC	_HRESULT_FROM_WIN32
PUBLIC	?_InterlockedIncrement@@YAKPCK@Z		; _InterlockedIncrement
PUBLIC	?Init@Framerate@SK@@YAXXZ			; SK::Framerate::Init
PUBLIC	?Shutdown@Framerate@SK@@YAXXZ			; SK::Framerate::Shutdown
PUBLIC	?Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z	; SK::Framerate::Tick
PUBLIC	??0Limiter@Framerate@SK@@QAE@N@Z		; SK::Framerate::Limiter::Limiter
PUBLIC	?init@Limiter@Framerate@SK@@QAEXN@Z		; SK::Framerate::Limiter::init
PUBLIC	?wait@Limiter@Framerate@SK@@QAEXXZ		; SK::Framerate::Limiter::wait
PUBLIC	?try_wait@Limiter@Framerate@SK@@QAE_NXZ		; SK::Framerate::Limiter::try_wait
PUBLIC	?set_limit@Limiter@Framerate@SK@@QAEXN@Z	; SK::Framerate::Limiter::set_limit
PUBLIC	?effective_frametime@Limiter@Framerate@SK@@QAENXZ ; SK::Framerate::Limiter::effective_frametime
PUBLIC	??0<unnamed-type-time>@SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ ; SK::Framerate::EventCounter_V1::SleepStats::<unnamed-type-time>::<unnamed-type-time>
PUBLIC	?sleep@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::sleep
PUBLIC	?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::wake
PUBLIC	??0SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ ; SK::Framerate::EventCounter_V1::SleepStats::SleepStats
PUBLIC	?getMessagePumpStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ ; SK::Framerate::EventCounter_V1::getMessagePumpStats
PUBLIC	?getRenderThreadStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ ; SK::Framerate::EventCounter_V1::getRenderThreadStats
PUBLIC	??0EventCounter_V1@Framerate@SK@@QAE@XZ		; SK::Framerate::EventCounter_V1::EventCounter_V1
PUBLIC	?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ	; SK::Framerate::GetLimiter
PUBLIC	?calcMean@Stats@Framerate@SK@@QAENN@Z		; SK::Framerate::Stats::calcMean
PUBLIC	?calcMean@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcMean
PUBLIC	?calcSqStdDev@Stats@Framerate@SK@@QAENNN@Z	; SK::Framerate::Stats::calcSqStdDev
PUBLIC	?calcSqStdDev@Stats@Framerate@SK@@QAENNT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcSqStdDev
PUBLIC	?calcMin@Stats@Framerate@SK@@QAENN@Z		; SK::Framerate::Stats::calcMin
PUBLIC	?calcMin@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcMin
PUBLIC	?calcMax@Stats@Framerate@SK@@QAENN@Z		; SK::Framerate::Stats::calcMax
PUBLIC	?calcMax@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcMax
PUBLIC	?calcHitches@Stats@Framerate@SK@@QAEHNNN@Z	; SK::Framerate::Stats::calcHitches
PUBLIC	?calcHitches@Stats@Framerate@SK@@QAEHNNT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcHitches
PUBLIC	?calcNumSamples@Stats@Framerate@SK@@QAEHN@Z	; SK::Framerate::Stats::calcNumSamples
PUBLIC	?calcNumSamples@Stats@Framerate@SK@@QAEHT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcNumSamples
PUBLIC	?SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ	; SK_GetPerfFreq
PUBLIC	??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
PUBLIC	??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
PUBLIC	??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
PUBLIC	??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
PUBLIC	??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
PUBLIC	??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
PUBLIC	??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
PUBLIC	??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
PUBLIC	??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
PUBLIC	??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
PUBLIC	??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
PUBLIC	??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
PUBLIC	??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
PUBLIC	??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
PUBLIC	?_AtlRaiseException@ATL@@YAXKK@Z		; ATL::_AtlRaiseException
PUBLIC	?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ; ATL::_AtlInitializeCriticalSectionEx
PUBLIC	??0CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::CComCriticalSection
PUBLIC	??1CComCriticalSection@ATL@@QAE@XZ		; ATL::CComCriticalSection::~CComCriticalSection
PUBLIC	?Init@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Init
PUBLIC	?Term@CComCriticalSection@ATL@@QAEJXZ		; ATL::CComCriticalSection::Term
PUBLIC	?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ; ATL::CAtlBaseModule::GetModuleInstance
PUBLIC	??0_ATL_COM_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70
PUBLIC	??1_ATL_COM_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70
PUBLIC	??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
PUBLIC	??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
PUBLIC	?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
PUBLIC	?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
PUBLIC	??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
PUBLIC	??0_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
PUBLIC	??1_ATL_WIN_MODULE70@ATL@@QAE@XZ		; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
PUBLIC	?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ; ATL::AtlWinModuleInit
PUBLIC	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
PUBLIC	??0CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::CAtlComModule
PUBLIC	??1CAtlComModule@ATL@@QAE@XZ			; ATL::CAtlComModule::~CAtlComModule
PUBLIC	?Term@CAtlComModule@ATL@@QAEXXZ			; ATL::CAtlComModule::Term
PUBLIC	??0CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::CAtlWinModule
PUBLIC	??1CAtlWinModule@ATL@@QAE@XZ			; ATL::CAtlWinModule::~CAtlWinModule
PUBLIC	?Term@CAtlWinModule@ATL@@QAEXXZ			; ATL::CAtlWinModule::Term
PUBLIC	??R<lambda_b2243a37586aaac2b3364c16e80bbb5a>@@QBE?AT_LARGE_INTEGER@@XZ ; <lambda_b2243a37586aaac2b3364c16e80bbb5a>::operator()
PUBLIC	?SK_QueryPerf@@YA?AT_LARGE_INTEGER@@XZ		; SK_QueryPerf
PUBLIC	?Sleep_Detour@@YGXK@Z				; Sleep_Detour
PUBLIC	?QueryPerformanceCounter_Detour@@YGHPAT_LARGE_INTEGER@@@Z ; QueryPerformanceCounter_Detour
PUBLIC	??$static_cast_p2p@X$$A6GXK@Z@@YAPAPAXPAP6GXK@Z@Z ; static_cast_p2p<void,void __stdcall(unsigned long)>
PUBLIC	??$static_cast_p2p@XX@@YAPAPAXPAPAX@Z		; static_cast_p2p<void,void>
PUBLIC	?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ ; SK_D3D9_GetTimingDevice
PUBLIC	??0?$CComPtrBase@UIDirect3D9Ex@@@ATL@@IAE@PAUIDirect3D9Ex@@@Z ; ATL::CComPtrBase<IDirect3D9Ex>::CComPtrBase<IDirect3D9Ex>
PUBLIC	??1?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IDirect3D9Ex>::~CComPtrBase<IDirect3D9Ex>
PUBLIC	??I?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAEPAPAUIDirect3D9Ex@@XZ ; ATL::CComPtrBase<IDirect3D9Ex>::operator&
PUBLIC	??C?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3D9Ex@@@1@XZ ; ATL::CComPtrBase<IDirect3D9Ex>::operator->
PUBLIC	??0?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@PAUIDirect3D9Ex@@@Z ; ATL::CComPtr<IDirect3D9Ex>::CComPtr<IDirect3D9Ex>
PUBLIC	??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ	; ATL::CComPtr<IDirect3D9Ex>::~CComPtr<IDirect3D9Ex>
PUBLIC	??0?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAE@PAUIDirect3DDevice9Ex@@@Z ; ATL::CComPtrBase<IDirect3DDevice9Ex>::CComPtrBase<IDirect3DDevice9Ex>
PUBLIC	?Swap@?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAEXAAV12@@Z ; ATL::CComPtrBase<IDirect3DDevice9Ex>::Swap
PUBLIC	??1?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ ; ATL::CComPtrBase<IDirect3DDevice9Ex>::~CComPtrBase<IDirect3DDevice9Ex>
PUBLIC	??B?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAUIDirect3DDevice9Ex@@XZ ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator IDirect3DDevice9Ex *
PUBLIC	??I?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAEPAPAUIDirect3DDevice9Ex@@XZ ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator&
PUBLIC	??C?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3DDevice9Ex@@@1@XZ ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator->
PUBLIC	??9?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator!=
PUBLIC	??8?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator==
PUBLIC	??0?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@PAUIDirect3DDevice9Ex@@@Z ; ATL::CComPtr<IDirect3DDevice9Ex>::CComPtr<IDirect3DDevice9Ex>
PUBLIC	??4?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAEPAUIDirect3DDevice9Ex@@PAU2@@Z ; ATL::CComPtr<IDirect3DDevice9Ex>::operator=
PUBLIC	??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ	; ATL::CComPtr<IDirect3DDevice9Ex>::~CComPtr<IDirect3DDevice9Ex>
PUBLIC	??0?$CComPtrBase@UIDXGISwapChain@@@ATL@@IAE@PAUIDXGISwapChain@@@Z ; ATL::CComPtrBase<IDXGISwapChain>::CComPtrBase<IDXGISwapChain>
PUBLIC	??1?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IDXGISwapChain>::~CComPtrBase<IDXGISwapChain>
PUBLIC	??I?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAEPAPAUIDXGISwapChain@@XZ ; ATL::CComPtrBase<IDXGISwapChain>::operator&
PUBLIC	??C?$CComPtrBase@UIDXGISwapChain@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDXGISwapChain@@@1@XZ ; ATL::CComPtrBase<IDXGISwapChain>::operator->
PUBLIC	??0?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@PAUIDXGISwapChain@@@Z ; ATL::CComPtr<IDXGISwapChain>::CComPtr<IDXGISwapChain>
PUBLIC	??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ	; ATL::CComPtr<IDXGISwapChain>::~CComPtr<IDXGISwapChain>
PUBLIC	??0?$CComPtrBase@UIDXGIOutput@@@ATL@@IAE@PAUIDXGIOutput@@@Z ; ATL::CComPtrBase<IDXGIOutput>::CComPtrBase<IDXGIOutput>
PUBLIC	??1?$CComPtrBase@UIDXGIOutput@@@ATL@@QAE@XZ	; ATL::CComPtrBase<IDXGIOutput>::~CComPtrBase<IDXGIOutput>
PUBLIC	??B?$CComPtrBase@UIDXGIOutput@@@ATL@@QBEPAUIDXGIOutput@@XZ ; ATL::CComPtrBase<IDXGIOutput>::operator IDXGIOutput *
PUBLIC	??I?$CComPtrBase@UIDXGIOutput@@@ATL@@QAEPAPAUIDXGIOutput@@XZ ; ATL::CComPtrBase<IDXGIOutput>::operator&
PUBLIC	??9?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z ; ATL::CComPtrBase<IDXGIOutput>::operator!=
PUBLIC	??8?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z ; ATL::CComPtrBase<IDXGIOutput>::operator==
PUBLIC	??0?$CComPtr@UIDXGIOutput@@@ATL@@QAE@PAUIDXGIOutput@@@Z ; ATL::CComPtr<IDXGIOutput>::CComPtr<IDXGIOutput>
PUBLIC	??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ		; ATL::CComPtr<IDXGIOutput>::~CComPtr<IDXGIOutput>
PUBLIC	??$QueryInterface@UIDXGISwapChain@@@IUnknown@@QAGJPAPAUIDXGISwapChain@@@Z ; IUnknown::QueryInterface<IDXGISwapChain>
PUBLIC	??$IID_PPV_ARGS_Helper@UIDirect3DDevice9Ex@@@@YAPAPAXPAPAUIDirect3DDevice9Ex@@@Z ; IID_PPV_ARGS_Helper<IDirect3DDevice9Ex>
PUBLIC	??$QueryInterface@UIDirect3DDevice9Ex@@@IUnknown@@QAGJPAPAUIDirect3DDevice9Ex@@@Z ; IUnknown::QueryInterface<IDirect3DDevice9Ex>
PUBLIC	??$?RN_J@<lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>@@QBE?AT_LARGE_INTEGER@@N_J@Z ; <lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>::operator()<double,__int64>
PUBLIC	?events@Framerate@SK@@3VEventCounter_V1@12@A	; SK::Framerate::events
PUBLIC	?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A ; ATL::atlTraceGeneral
PUBLIC	?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A ; ATL::atlTraceCOM
PUBLIC	?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A ; ATL::atlTraceQI
PUBLIC	?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A ; ATL::atlTraceRegistrar
PUBLIC	?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A ; ATL::atlTraceRefcount
PUBLIC	?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A ; ATL::atlTraceWindowing
PUBLIC	?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A ; ATL::atlTraceControls
PUBLIC	?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A ; ATL::atlTraceHosting
PUBLIC	?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A ; ATL::atlTraceDBClient
PUBLIC	?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A ; ATL::atlTraceDBProvider
PUBLIC	?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A ; ATL::atlTraceSnapin
PUBLIC	?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A ; ATL::atlTraceNotImpl
PUBLIC	?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A ; ATL::atlTraceAllocation
PUBLIC	?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A ; ATL::atlTraceException
PUBLIC	?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A ; ATL::atlTraceTime
PUBLIC	?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A ; ATL::atlTraceCache
PUBLIC	?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A ; ATL::atlTraceStencil
PUBLIC	?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A ; ATL::atlTraceString
PUBLIC	?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A ; ATL::atlTraceMap
PUBLIC	?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A ; ATL::atlTraceUtil
PUBLIC	?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A ; ATL::atlTraceSecurity
PUBLIC	?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A ; ATL::atlTraceSync
PUBLIC	?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A ; ATL::atlTraceISAPI
PUBLIC	?m_bInitFailed@CAtlBaseModule@ATL@@2_NA		; ATL::CAtlBaseModule::m_bInitFailed
PUBLIC	?_AtlComModule@ATL@@3VCAtlComModule@1@A		; ATL::_AtlComModule
PUBLIC	?_AtlWinModule@ATL@@3VCAtlWinModule@1@A		; ATL::_AtlWinModule
PUBLIC	?SK_CurrentPerf@@3V<lambda>@@A			; SK_CurrentPerf
PUBLIC	?SK_DeltaPerf@@3V<lambda>@@A			; SK_DeltaPerf
PUBLIC	__GUID_b18b10ce_2649_405a_870f_95f777d4313a
PUBLIC	__GUID_310d36a0_d2e7_4c0a_aa04_6a9d23b8886a
PUBLIC	__real@00000000
PUBLIC	__real@358637bd
PUBLIC	__real@3f50624dd2f1a9fc
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41200000
PUBLIC	__real@7ff0000000000000
PUBLIC	__real@fff0000000000000
PUBLIC	__xmm@41f00000000000000000000000000000
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??3@YAXPAXI@Z:PROC				; operator delete
EXTRN	_atexit:PROC
EXTRN	___std_terminate:PROC
EXTRN	__imp__DecodePointer@4:PROC
EXTRN	__imp__RaiseException@16:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__QueryPerformanceFrequency@4:PROC
EXTRN	__imp__InitializeCriticalSectionEx@12:PROC
EXTRN	__imp__DeleteCriticalSection@4:PROC
EXTRN	__imp__SleepEx@8:PROC
EXTRN	__imp__GetCurrentThread@0:PROC
EXTRN	__imp__GetCurrentThreadId@0:PROC
EXTRN	__imp__SetThreadPriority@8:PROC
EXTRN	__imp__GetModuleHandleW@4:PROC
EXTRN	__imp__GetProcAddress@8:PROC
EXTRN	__imp__LoadLibraryW@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__DispatchMessageW@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PeekMessageW@20:PROC
EXTRN	__imp__UnregisterClassW@8:PROC
EXTRN	__imp__GetActiveWindow@0:PROC
EXTRN	__imp__MsgWaitForMultipleObjects@20:PROC
EXTRN	__imp__IsWindowUnicode@4:PROC
EXTRN	__imp__IsGUIThread@4:PROC
EXTRN	__imp__free:PROC
EXTRN	?SK_GetCurrentRenderBackend@@YGAAVSK_RenderBackend_V2@@XZ:PROC ; SK_GetCurrentRenderBackend
EXTRN	?Log@iSK_Logger@@UAAXQB_WZZ:PROC		; iSK_Logger::Log
EXTRN	?SK_GetCommandProcessor@@YGPAUSK_ICommandProcessor@@XZ:PROC ; SK_GetCommandProcessor
EXTRN	?SK_GetFramesDrawn@@YGKXZ:PROC			; SK_GetFramesDrawn
EXTRN	?SK_Win32_CreateDummyWindow@@YAPAUHWND__@@XZ:PROC ; SK_Win32_CreateDummyWindow
EXTRN	?SK_CreateDLLHook2@@YG?AW4MH_STATUS@@PB_WPBDPAXPAPAX3@Z:PROC ; SK_CreateDLLHook2
EXTRN	?SK_DisableHook@@YG?AW4MH_STATUS@@PAX@Z:PROC	; SK_DisableHook
EXTRN	?SK_GetCallingDLL@@YAPAUHINSTANCE__@@PAX@Z:PROC	; SK_GetCallingDLL
EXTRN	?AppID@SteamAPI@SK@@YAIXZ:PROC			; SK::SteamAPI::AppID
EXTRN	??0?$SK_IVarStub@_N@@QAE@PA_NPAUSK_IVariableListener@@@Z:PROC ; SK_IVarStub<bool>::SK_IVarStub<bool>
EXTRN	??0?$SK_IVarStub@H@@QAE@PAHPAUSK_IVariableListener@@@Z:PROC ; SK_IVarStub<int>::SK_IVarStub<int>
EXTRN	??0?$SK_IVarStub@M@@QAE@PAMPAUSK_IVariableListener@@@Z:PROC ; SK_IVarStub<float>::SK_IVarStub<float>
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__dtol3:PROC
EXTRN	__ftoui3:PROC
EXTRN	__ltod3:PROC
EXTRN	_memset:PROC
EXTRN	?dll_log@@3UiSK_Logger@@A:BYTE			; dll_log
EXTRN	?config@@3Usk_config_t@@A:BYTE			; config
EXTRN	?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A:BYTE	; ATL::_AtlBaseModule
EXTRN	___ImageBase:BYTE
EXTRN	?WaitForVBlank_Original@@3P6GJPAUIDXGIOutput@@@ZA:DWORD ; WaitForVBlank_Original
EXTRN	?Direct3DCreate9Ex_Import@@3P6GJIPAPAUIDirect3D9Ex@@@ZA:DWORD ; Direct3DCreate9Ex_Import
EXTRN	?game_window@@3Usk_window_s@@A:BYTE		; game_window
EXTRN	__fltused:DWORD
_BSS	SEGMENT
?events@Framerate@SK@@3VEventCounter_V1@12@A DB 060H DUP (?) ; SK::Framerate::events
_BSS	ENDS
;	COMDAT ?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A
_BSS	SEGMENT
?atlTraceGeneral@ATL@@3V?$CTraceCategoryEx@$00$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceGeneral
_BSS	ENDS
;	COMDAT ?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A
_BSS	SEGMENT
?atlTraceCOM@ATL@@3V?$CTraceCategoryEx@$01$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCOM
_BSS	ENDS
;	COMDAT ?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A
_BSS	SEGMENT
?atlTraceQI@ATL@@3V?$CTraceCategoryEx@$03$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceQI
_BSS	ENDS
;	COMDAT ?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A
_BSS	SEGMENT
?atlTraceRegistrar@ATL@@3V?$CTraceCategoryEx@$07$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRegistrar
_BSS	ENDS
;	COMDAT ?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A
_BSS	SEGMENT
?atlTraceRefcount@ATL@@3V?$CTraceCategoryEx@$0BA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceRefcount
_BSS	ENDS
;	COMDAT ?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A
_BSS	SEGMENT
?atlTraceWindowing@ATL@@3V?$CTraceCategoryEx@$0CA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceWindowing
_BSS	ENDS
;	COMDAT ?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A
_BSS	SEGMENT
?atlTraceControls@ATL@@3V?$CTraceCategoryEx@$0EA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceControls
_BSS	ENDS
;	COMDAT ?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A
_BSS	SEGMENT
?atlTraceHosting@ATL@@3V?$CTraceCategoryEx@$0IA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceHosting
_BSS	ENDS
;	COMDAT ?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBClient@ATL@@3V?$CTraceCategoryEx@$0BAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBClient
_BSS	ENDS
;	COMDAT ?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceDBProvider@ATL@@3V?$CTraceCategoryEx@$0CAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceDBProvider
_BSS	ENDS
;	COMDAT ?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSnapin@ATL@@3V?$CTraceCategoryEx@$0EAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSnapin
_BSS	ENDS
;	COMDAT ?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceNotImpl@ATL@@3V?$CTraceCategoryEx@$0IAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceNotImpl
_BSS	ENDS
;	COMDAT ?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceAllocation@ATL@@3V?$CTraceCategoryEx@$0BAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceAllocation
_BSS	ENDS
;	COMDAT ?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceException@ATL@@3V?$CTraceCategoryEx@$0CAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceException
_BSS	ENDS
;	COMDAT ?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceTime@ATL@@3V?$CTraceCategoryEx@$0EAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceTime
_BSS	ENDS
;	COMDAT ?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceCache@ATL@@3V?$CTraceCategoryEx@$0IAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceCache
_BSS	ENDS
;	COMDAT ?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceStencil@ATL@@3V?$CTraceCategoryEx@$0BAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceStencil
_BSS	ENDS
;	COMDAT ?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceString@ATL@@3V?$CTraceCategoryEx@$0CAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceString
_BSS	ENDS
;	COMDAT ?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceMap@ATL@@3V?$CTraceCategoryEx@$0EAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceMap
_BSS	ENDS
;	COMDAT ?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceUtil@ATL@@3V?$CTraceCategoryEx@$0IAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceUtil
_BSS	ENDS
;	COMDAT ?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSecurity@ATL@@3V?$CTraceCategoryEx@$0BAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSecurity
_BSS	ENDS
;	COMDAT ?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceSync@ATL@@3V?$CTraceCategoryEx@$0CAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceSync
_BSS	ENDS
;	COMDAT ?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A
_BSS	SEGMENT
?atlTraceISAPI@ATL@@3V?$CTraceCategoryEx@$0EAAAAA@$0A@@1@A DD 01H DUP (?) ; ATL::atlTraceISAPI
_BSS	ENDS
;	COMDAT ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA
_BSS	SEGMENT
?m_bInitFailed@CAtlBaseModule@ATL@@2_NA DB 01H DUP (?)	; ATL::CAtlBaseModule::m_bInitFailed
_BSS	ENDS
;	COMDAT ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A
_BSS	SEGMENT
?_AtlWinModule@ATL@@3VCAtlWinModule@1@A DB 02cH DUP (?)	; ATL::_AtlWinModule
_BSS	ENDS
_BSS	SEGMENT
?SK_CurrentPerf@@3V<lambda>@@A DB 01H DUP (?)		; SK_CurrentPerf
	ALIGN	4

?SK_DeltaPerf@@3V<lambda>@@A DB 01H DUP (?)		; SK_DeltaPerf
_BSS	ENDS
;	COMDAT ?reported@?BC@??Sleep_Detour@@YGXK@Z@4_NA
_BSS	SEGMENT
?reported@?BC@??Sleep_Detour@@YGXK@Z@4_NA DB 01H DUP (?) ; `Sleep_Detour'::`18'::reported
_BSS	ENDS
;	COMDAT ?reported@?BP@??Sleep_Detour@@YGXK@Z@4_NA
_BSS	SEGMENT
?reported@?BP@??Sleep_Detour@@YGXK@Z@4_NA DB 01H DUP (?) ; `Sleep_Detour'::`31'::reported
_BSS	ENDS
;	COMDAT ?restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA
_BSS	SEGMENT
?restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA DB 01H DUP (?) ; `SK::Framerate::Limiter::wait'::`2'::restart
_BSS	ENDS
;	COMDAT ?full_restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA
_BSS	SEGMENT
?full_restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA DB 01H DUP (?) ; `SK::Framerate::Limiter::wait'::`2'::full_restart
_BSS	ENDS
;	COMDAT ?limiter@?1??GetLimiter@Framerate@SK@@YAPAVLimiter@23@XZ@4PAV423@A
_BSS	SEGMENT
?limiter@?1??GetLimiter@Framerate@SK@@YAPAVLimiter@23@XZ@4PAV423@A DD 01H DUP (?) ; `SK::Framerate::GetLimiter'::`2'::limiter
_BSS	ENDS
;	COMDAT ?last_frame@?1??Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z@4T4@A
_BSS	SEGMENT
?last_frame@?1??Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z@4T4@A DQ 01H DUP (?) ; `SK::Framerate::Tick'::`2'::last_frame
_BSS	ENDS
;	COMDAT ?freq@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4T2@A
_BSS	SEGMENT
?freq@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4T2@A DQ 01H DUP (?) ; `SK_GetPerfFreq'::`2'::freq
_BSS	ENDS
;	COMDAT ?init@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4_NA
_BSS	SEGMENT
?init@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4_NA DB 01H DUP (?) ; `SK_GetPerfFreq'::`2'::init
_BSS	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlComModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlComModule@ATL@@YAXXZ ; ATL::_AtlComModule$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@fff0000000000000
CONST	SEGMENT
__real@fff0000000000000 DQ 0fff0000000000000r	; -inf
CONST	ENDS
;	COMDAT __real@7ff0000000000000
CONST	SEGMENT
__real@7ff0000000000000 DQ 07ff0000000000000r	; inf
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3f50624dd2f1a9fc
CONST	SEGMENT
__real@3f50624dd2f1a9fc DQ 03f50624dd2f1a9fcr	; 0.001
CONST	ENDS
;	COMDAT __real@358637bd
CONST	SEGMENT
__real@358637bd DD 0358637bdr			; 1e-06
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __GUID_310d36a0_d2e7_4c0a_aa04_6a9d23b8886a
CONST	SEGMENT
__GUID_310d36a0_d2e7_4c0a_aa04_6a9d23b8886a DD 0310d36a0H
	DW	0d2e7H
	DW	04c0aH
	DB	0aaH
	DB	04H
	DB	06aH
	DB	09dH
	DB	023H
	DB	0b8H
	DB	088H
	DB	06aH
CONST	ENDS
;	COMDAT ?first@?2??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA
_DATA	SEGMENT
?first@?2??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA DB 01H ; `SK::Framerate::Limiter::wait'::`3'::first
_DATA	ENDS
;	COMDAT __GUID_b18b10ce_2649_405a_870f_95f777d4313a
CONST	SEGMENT
__GUID_b18b10ce_2649_405a_870f_95f777d4313a DD 0b18b10ceH
	DW	02649H
	DW	0405aH
	DB	087H
	DB	0fH
	DB	095H
	DB	0f7H
	DB	077H
	DB	0d4H
	DB	031H
	DB	03aH
CONST	ENDS
;	COMDAT ?pTimingDevice@?1??SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ@4PAU2@A
_DATA	SEGMENT
?pTimingDevice@?1??SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ@4PAU2@A DD 0ffffffffH ; `SK_D3D9_GetTimingDevice'::`2'::pTimingDevice
_DATA	ENDS
;	COMDAT ?_AtlComModule@ATL@@3VCAtlComModule@1@A
_DATA	SEGMENT
?_AtlComModule@ATL@@3VCAtlComModule@1@A DB 04H DUP (?)
	DD	FLAT:___ImageBase			; ATL::_AtlComModule
	DD	FLAT:___pobjMapEntryFirst+4
	DD	FLAT:___pobjMapEntryLast
_DATA	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??__F_AtlComModule@ATL@@YAXXZ DD 0ffffffffH
	DD	FLAT:___std_terminate
__ehfuncinfo$??__F_AtlComModule@ATL@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??__F_AtlComModule@ATL@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CAtlComModule@ATL@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ$0
__unwindtable$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ$0
__unwindtable$?wait@Limiter@Framerate@SK@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?wait@Limiter@Framerate@SK@@QAEXXZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$?wait@Limiter@Framerate@SK@@QAEXXZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$?wait@Limiter@Framerate@SK@@QAEXXZ$2
__unwindtable$?init@Limiter@Framerate@SK@@QAEXN@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?init@Limiter@Framerate@SK@@QAEXN@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?init@Limiter@Framerate@SK@@QAEXN@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?init@Limiter@Framerate@SK@@QAEXN@Z$2
__unwindtable$?Init@Framerate@SK@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@Framerate@SK@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@Framerate@SK@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@Framerate@SK@@YAXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Init@Framerate@SK@@YAXXZ$3
__ehfuncinfo$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?wait@Limiter@Framerate@SK@@QAEXXZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?wait@Limiter@Framerate@SK@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?init@Limiter@Framerate@SK@@QAEXN@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?init@Limiter@Framerate@SK@@QAEXN@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__ehfuncinfo$?Init@Framerate@SK@@YAXXZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Init@Framerate@SK@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT CRT$XCU
CRT$XCU	SEGMENT
?_AtlWinModule$initializer$@ATL@@3P6AXXZA DD FLAT:??__E_AtlWinModule@ATL@@YAXXZ ; ATL::_AtlWinModule$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?events$initializer$@Framerate@SK@@3P6AXXZA DD FLAT:??__Eevents@Framerate@SK@@YAXXZ ; SK::Framerate::events$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
;	COMDAT ??$?RN_J@<lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>@@QBE?AT_LARGE_INTEGER@@N_J@Z
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
_delta$ = 12						; size = 8
_freq$ = 20						; size = 8
??$?RN_J@<lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>@@QBE?AT_LARGE_INTEGER@@N_J@Z PROC ; <lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>::operator()<double,__int64>, COMDAT
; _this$ = ecx

; 64   :    {

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 57   :      QueryPerformanceCounter_Original (&time);

	mov	esi, DWORD PTR ___$ReturnUdt$[ebp]
	push	esi
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 65   :      LARGE_INTEGER time = SK_CurrentPerf ();
; 66   :    
; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, DWORD PTR _freq$[ebp+4]
	mov	ecx, DWORD PTR _freq$[ebp]
	call	__ltod3
	mulsd	xmm0, QWORD PTR _delta$[ebp]
	call	__dtol3
	sub	DWORD PTR [esi], eax

; 68   :    
; 69   :      return time;

	mov	eax, esi
	sbb	DWORD PTR [esi+4], edx
	pop	esi

; 70   :    };

	pop	ebp
	ret	20					; 00000014H
??$?RN_J@<lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>@@QBE?AT_LARGE_INTEGER@@N_J@Z ENDP ; <lambda_9ce9ae93c12e4d996f9516ab09cf2bdc>::operator()<double,__int64>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
;	COMDAT ??0<lambda_853c8f7f2639028bcbddc115ece9255c>@@QAE@AAPAUHWND__@@AA_N@Z
_TEXT	SEGMENT
_<hWndThis>$ = 8					; size = 4
_<bUnicode>$ = 12					; size = 4
??0<lambda_853c8f7f2639028bcbddc115ece9255c>@@QAE@AAPAUHWND__@@AA_N@Z PROC ; <lambda_853c8f7f2639028bcbddc115ece9255c>::<lambda_853c8f7f2639028bcbddc115ece9255c>, COMDAT
; _this$ = ecx

; 642  :     };

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _<hWndThis>$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	eax, DWORD PTR _<bUnicode>$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, ecx
	pop	ebp
	ret	8
??0<lambda_853c8f7f2639028bcbddc115ece9255c>@@QAE@AAPAUHWND__@@AA_N@Z ENDP ; <lambda_853c8f7f2639028bcbddc115ece9255c>::<lambda_853c8f7f2639028bcbddc115ece9255c>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
;	COMDAT ??R<lambda_853c8f7f2639028bcbddc115ece9255c>@@QBEXXZ
_TEXT	SEGMENT
_msg$ = -28						; size = 28
??R<lambda_853c8f7f2639028bcbddc115ece9255c>@@QBEXXZ PROC ; <lambda_853c8f7f2639028bcbddc115ece9255c>::operator(), COMDAT
; _this$ = ecx

; 612  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	edx, ecx

; 613  :       if (! SK_Framerate_ReduceInputLatency)

	cmp	BYTE PTR ?SK_Framerate_ReduceInputLatency@@3_NA, 0 ; SK_Framerate_ReduceInputLatency
	je	SHORT $LN6@operator

; 614  :         return;
; 615  : 
; 616  :       MSG msg     = {      };
; 617  :       msg.hwnd    = hWndThis;

	mov	ecx, DWORD PTR [edx]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR _msg$[ebp], xmm0
	mov	DWORD PTR _msg$[ebp+24], 0
	movq	QWORD PTR _msg$[ebp+16], xmm0
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR _msg$[ebp], eax

; 618  :       msg.message = WM_NULL ;
; 619  : 
; 620  :       // Avoid having Windows marshall Unicode messages like a dumbass
; 621  :       if (bUnicode)

	mov	eax, DWORD PTR [edx+4]

; 622  :       {
; 623  :         if ( PeekMessageW ( &msg, hWndThis, 0, 0,
; 624  :                                               PM_REMOVE | PM_QS_INPUT )
; 625  :                  &&          msg.message != WM_NULL

	push	67567617				; 04070001H
	push	0
	push	0
	mov	DWORD PTR _msg$[ebp+4], 0
	push	DWORD PTR [ecx]
	cmp	BYTE PTR [eax], 0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	je	SHORT $LN3@operator
	call	DWORD PTR __imp__PeekMessageW@20
	test	eax, eax
	je	SHORT $LN6@operator
	cmp	DWORD PTR _msg$[ebp+4], 0
	je	SHORT $LN6@operator

; 626  :            )
; 627  :         {
; 628  :           DispatchMessageW (&msg);

	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__DispatchMessageW@4

; 640  :         }
; 641  :       }
; 642  :     };

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@operator:

; 629  :         }
; 630  :       }
; 631  : 
; 632  :       else
; 633  :       {
; 634  :         if ( PeekMessageA ( &msg, hWndThis, 0, 0,
; 635  :                                               PM_REMOVE | PM_QS_INPUT )
; 636  :                  &&          msg.message != WM_NULL

	call	DWORD PTR __imp__PeekMessageA@20
	test	eax, eax
	je	SHORT $LN6@operator
	cmp	DWORD PTR _msg$[ebp+4], 0
	je	SHORT $LN6@operator

; 637  :            )
; 638  :         {
; 639  :           DispatchMessageA (&msg);

	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__DispatchMessageA@4
$LN6@operator:

; 640  :         }
; 641  :       }
; 642  :     };

	mov	esp, ebp
	pop	ebp
	ret	0
??R<lambda_853c8f7f2639028bcbddc115ece9255c>@@QBEXXZ ENDP ; <lambda_853c8f7f2639028bcbddc115ece9255c>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h
;	COMDAT ??$QueryInterface@UIDirect3DDevice9Ex@@@IUnknown@@QAGJPAPAUIDirect3DDevice9Ex@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIDirect3DDevice9Ex@@@IUnknown@@QAGJPAPAUIDirect3DDevice9Ex@@@Z PROC ; IUnknown::QueryInterface<IDirect3DDevice9Ex>, COMDAT

; 130  :             {

	npad	2
	push	ebp
	mov	ebp, esp

; 131  :                 return QueryInterface(__uuidof(Q), (void **)pp);

	mov	eax, DWORD PTR _this$[ebp]
	push	DWORD PTR _pp$[ebp]
	push	OFFSET __GUID_b18b10ce_2649_405a_870f_95f777d4313a
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx]

; 132  :             }

	pop	ebp
	ret	8
??$QueryInterface@UIDirect3DDevice9Ex@@@IUnknown@@QAGJPAPAUIDirect3DDevice9Ex@@@Z ENDP ; IUnknown::QueryInterface<IDirect3DDevice9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\combaseapi.h
;	COMDAT ??$IID_PPV_ARGS_Helper@UIDirect3DDevice9Ex@@@@YAPAPAXPAPAUIDirect3DDevice9Ex@@@Z
_TEXT	SEGMENT
_pp$ = 8						; size = 4
??$IID_PPV_ARGS_Helper@UIDirect3DDevice9Ex@@@@YAPAPAXPAPAUIDirect3DDevice9Ex@@@Z PROC ; IID_PPV_ARGS_Helper<IDirect3DDevice9Ex>, COMDAT

; 227  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 228  : #pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
; 229  :         static_cast<IUnknown*>(*pp);    // make sure everyone derives from IUnknown
; 230  :         return reinterpret_cast<void**>(pp);

	mov	eax, DWORD PTR _pp$[ebp]

; 231  :     }    

	pop	ebp
	ret	0
??$IID_PPV_ARGS_Helper@UIDirect3DDevice9Ex@@@@YAPAPAXPAPAUIDirect3DDevice9Ex@@@Z ENDP ; IID_PPV_ARGS_Helper<IDirect3DDevice9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h
;	COMDAT ??$QueryInterface@UIDXGISwapChain@@@IUnknown@@QAGJPAPAUIDXGISwapChain@@@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIDXGISwapChain@@@IUnknown@@QAGJPAPAUIDXGISwapChain@@@Z PROC ; IUnknown::QueryInterface<IDXGISwapChain>, COMDAT

; 130  :             {

	npad	2
	push	ebp
	mov	ebp, esp

; 131  :                 return QueryInterface(__uuidof(Q), (void **)pp);

	mov	eax, DWORD PTR _this$[ebp]
	push	DWORD PTR _pp$[ebp]
	push	OFFSET __GUID_310d36a0_d2e7_4c0a_aa04_6a9d23b8886a
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx]

; 132  :             }

	pop	ebp
	ret	8
??$QueryInterface@UIDXGISwapChain@@@IUnknown@@QAGJPAPAUIDXGISwapChain@@@Z ENDP ; IUnknown::QueryInterface<IDXGISwapChain>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IDXGIOutput>::~CComPtr<IDXGIOutput>, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@CComPtr

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN4@CComPtr:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IDXGIOutput>::~CComPtr<IDXGIOutput>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIDXGIOutput@@@ATL@@QAE@PAUIDXGIOutput@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtr@UIDXGIOutput@@@ATL@@QAE@PAUIDXGIOutput@@@Z PROC ; ATL::CComPtr<IDXGIOutput>::CComPtr<IDXGIOutput>, COMDAT
; _this$ = ecx

; 312  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi

; 312  :     {

	mov	esi, ecx

; 162  :         p = lp;

	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN6@CComPtr

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN6@CComPtr:

; 313  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtr@UIDXGIOutput@@@ATL@@QAE@PAUIDXGIOutput@@@Z ENDP ; ATL::CComPtr<IDXGIOutput>::CComPtr<IDXGIOutput>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??8?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z
_TEXT	SEGMENT
_pT$ = 8						; size = 4
??8?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z PROC ; ATL::CComPtrBase<IDXGIOutput>::operator==, COMDAT
; _this$ = ecx

; 213  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _pT$[ebp]
	sete	al

; 214  :         return p == pT;
; 215  :     }

	pop	ebp
	ret	4
??8?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z ENDP ; ATL::CComPtrBase<IDXGIOutput>::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??9?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z
_TEXT	SEGMENT
_pT$ = 8						; size = 4
??9?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z PROC ; ATL::CComPtrBase<IDXGIOutput>::operator!=, COMDAT
; _this$ = ecx

; 209  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _pT$[ebp]
	setne	al

; 210  :         return !operator==(pT);
; 211  :     }

	pop	ebp
	ret	4
??9?$CComPtrBase@UIDXGIOutput@@@ATL@@QBE_NPAUIDXGIOutput@@@Z ENDP ; ATL::CComPtrBase<IDXGIOutput>::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??I?$CComPtrBase@UIDXGIOutput@@@ATL@@QAEPAPAUIDXGIOutput@@XZ
_TEXT	SEGMENT
??I?$CComPtrBase@UIDXGIOutput@@@ATL@@QAEPAPAUIDXGIOutput@@XZ PROC ; ATL::CComPtrBase<IDXGIOutput>::operator&, COMDAT
; _this$ = ecx

; 192  :         ATLASSERT(p==NULL);
; 193  :         return &p;

	mov	eax, ecx

; 194  :     }

	ret	0
??I?$CComPtrBase@UIDXGIOutput@@@ATL@@QAEPAPAUIDXGIOutput@@XZ ENDP ; ATL::CComPtrBase<IDXGIOutput>::operator&
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??B?$CComPtrBase@UIDXGIOutput@@@ATL@@QBEPAUIDXGIOutput@@XZ
_TEXT	SEGMENT
??B?$CComPtrBase@UIDXGIOutput@@@ATL@@QBEPAUIDXGIOutput@@XZ PROC ; ATL::CComPtrBase<IDXGIOutput>::operator IDXGIOutput *, COMDAT
; _this$ = ecx

; 181  :         return p;

	mov	eax, DWORD PTR [ecx]

; 182  :     }

	ret	0
??B?$CComPtrBase@UIDXGIOutput@@@ATL@@QBEPAUIDXGIOutput@@XZ ENDP ; ATL::CComPtrBase<IDXGIOutput>::operator IDXGIOutput *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIDXGIOutput@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CComPtrBase@UIDXGIOutput@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IDXGIOutput>::~CComPtrBase<IDXGIOutput>, COMDAT
; _this$ = ecx

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN2@CComPtrBas

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN2@CComPtrBas:

; 178  :     }

	ret	0
??1?$CComPtrBase@UIDXGIOutput@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IDXGIOutput>::~CComPtrBase<IDXGIOutput>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIDXGIOutput@@@ATL@@IAE@PAUIDXGIOutput@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtrBase@UIDXGIOutput@@@ATL@@IAE@PAUIDXGIOutput@@@Z PROC ; ATL::CComPtrBase<IDXGIOutput>::CComPtrBase<IDXGIOutput>, COMDAT
; _this$ = ecx

; 160  :     CComPtrBase(_Inout_opt_ T* lp) throw()

	npad	2
	push	ebp
	mov	ebp, esp

; 161  :     {
; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN4@CComPtrBas

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN4@CComPtrBas:

; 165  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtrBase@UIDXGIOutput@@@ATL@@IAE@PAUIDXGIOutput@@@Z ENDP ; ATL::CComPtrBase<IDXGIOutput>::CComPtrBase<IDXGIOutput>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IDXGISwapChain>::~CComPtr<IDXGISwapChain>, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@CComPtr

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN4@CComPtr:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IDXGISwapChain>::~CComPtr<IDXGISwapChain>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@PAUIDXGISwapChain@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@PAUIDXGISwapChain@@@Z PROC ; ATL::CComPtr<IDXGISwapChain>::CComPtr<IDXGISwapChain>, COMDAT
; _this$ = ecx

; 312  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi

; 312  :     {

	mov	esi, ecx

; 162  :         p = lp;

	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN6@CComPtr

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN6@CComPtr:

; 313  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@PAUIDXGISwapChain@@@Z ENDP ; ATL::CComPtr<IDXGISwapChain>::CComPtr<IDXGISwapChain>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??C?$CComPtrBase@UIDXGISwapChain@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDXGISwapChain@@@1@XZ
_TEXT	SEGMENT
??C?$CComPtrBase@UIDXGISwapChain@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDXGISwapChain@@@1@XZ PROC ; ATL::CComPtrBase<IDXGISwapChain>::operator->, COMDAT
; _this$ = ecx

; 197  :         ATLASSERT(p!=NULL);
; 198  :         return (_NoAddRefReleaseOnCComPtr<T>*)p;

	mov	eax, DWORD PTR [ecx]

; 199  :     }

	ret	0
??C?$CComPtrBase@UIDXGISwapChain@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDXGISwapChain@@@1@XZ ENDP ; ATL::CComPtrBase<IDXGISwapChain>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??I?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAEPAPAUIDXGISwapChain@@XZ
_TEXT	SEGMENT
??I?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAEPAPAUIDXGISwapChain@@XZ PROC ; ATL::CComPtrBase<IDXGISwapChain>::operator&, COMDAT
; _this$ = ecx

; 192  :         ATLASSERT(p==NULL);
; 193  :         return &p;

	mov	eax, ecx

; 194  :     }

	ret	0
??I?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAEPAPAUIDXGISwapChain@@XZ ENDP ; ATL::CComPtrBase<IDXGISwapChain>::operator&
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IDXGISwapChain>::~CComPtrBase<IDXGISwapChain>, COMDAT
; _this$ = ecx

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN2@CComPtrBas

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN2@CComPtrBas:

; 178  :     }

	ret	0
??1?$CComPtrBase@UIDXGISwapChain@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IDXGISwapChain>::~CComPtrBase<IDXGISwapChain>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIDXGISwapChain@@@ATL@@IAE@PAUIDXGISwapChain@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtrBase@UIDXGISwapChain@@@ATL@@IAE@PAUIDXGISwapChain@@@Z PROC ; ATL::CComPtrBase<IDXGISwapChain>::CComPtrBase<IDXGISwapChain>, COMDAT
; _this$ = ecx

; 160  :     CComPtrBase(_Inout_opt_ T* lp) throw()

	npad	2
	push	ebp
	mov	ebp, esp

; 161  :     {
; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN4@CComPtrBas

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN4@CComPtrBas:

; 165  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtrBase@UIDXGISwapChain@@@ATL@@IAE@PAUIDXGISwapChain@@@Z ENDP ; ATL::CComPtrBase<IDXGISwapChain>::CComPtrBase<IDXGISwapChain>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ PROC	; ATL::CComPtr<IDirect3DDevice9Ex>::~CComPtr<IDirect3DDevice9Ex>, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@CComPtr

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN4@CComPtr:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ ENDP	; ATL::CComPtr<IDirect3DDevice9Ex>::~CComPtr<IDirect3DDevice9Ex>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??4?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAEPAUIDirect3DDevice9Ex@@PAU2@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??4?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAEPAUIDirect3DDevice9Ex@@PAU2@@Z PROC ; ATL::CComPtr<IDirect3DDevice9Ex>::operator=, COMDAT
; _this$ = ecx

; 319  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, ecx
	push	edi

; 214  :         return p == pT;

	mov	edi, DWORD PTR _lp$[ebp]
	cmp	DWORD PTR [esi], edi

; 320  :         if(*this!=lp)

	je	SHORT $LN24@operator

; 163  :         if (p != NULL)

	test	edi, edi
	je	SHORT $LN11@operator

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edi]
	push	edi
	call	DWORD PTR [eax+4]
$LN11@operator:

; 169  :         p = other.p;

	mov	eax, DWORD PTR [esi]

; 170  :         other.p = pTemp;

	mov	DWORD PTR [esi], edi

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN23@operator

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN24@operator:

; 321  :         {
; 322  :             CComPtr(lp).Swap(*this);
; 323  :         }
; 324  :         return *this;

	mov	eax, DWORD PTR [esi]
	pop	edi
	pop	esi

; 325  :     }

	pop	ebp
	ret	4
$LN23@operator:

; 321  :         {
; 322  :             CComPtr(lp).Swap(*this);
; 323  :         }
; 324  :         return *this;

	mov	eax, edi
	pop	edi
	pop	esi

; 325  :     }

	pop	ebp
	ret	4
??4?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAEPAUIDirect3DDevice9Ex@@PAU2@@Z ENDP ; ATL::CComPtr<IDirect3DDevice9Ex>::operator=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@PAUIDirect3DDevice9Ex@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@PAUIDirect3DDevice9Ex@@@Z PROC ; ATL::CComPtr<IDirect3DDevice9Ex>::CComPtr<IDirect3DDevice9Ex>, COMDAT
; _this$ = ecx

; 312  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi

; 312  :     {

	mov	esi, ecx

; 162  :         p = lp;

	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN6@CComPtr

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN6@CComPtr:

; 313  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@PAUIDirect3DDevice9Ex@@@Z ENDP ; ATL::CComPtr<IDirect3DDevice9Ex>::CComPtr<IDirect3DDevice9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??8?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z
_TEXT	SEGMENT
_pT$ = 8						; size = 4
??8?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator==, COMDAT
; _this$ = ecx

; 213  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _pT$[ebp]
	sete	al

; 214  :         return p == pT;
; 215  :     }

	pop	ebp
	ret	4
??8?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator==
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??9?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z
_TEXT	SEGMENT
_pT$ = 8						; size = 4
??9?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator!=, COMDAT
; _this$ = ecx

; 209  :     {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR [ecx]
	cmp	eax, DWORD PTR _pT$[ebp]
	setne	al

; 210  :         return !operator==(pT);
; 211  :     }

	pop	ebp
	ret	4
??9?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBE_NPAUIDirect3DDevice9Ex@@@Z ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator!=
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??C?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3DDevice9Ex@@@1@XZ
_TEXT	SEGMENT
??C?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3DDevice9Ex@@@1@XZ PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator->, COMDAT
; _this$ = ecx

; 197  :         ATLASSERT(p!=NULL);
; 198  :         return (_NoAddRefReleaseOnCComPtr<T>*)p;

	mov	eax, DWORD PTR [ecx]

; 199  :     }

	ret	0
??C?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3DDevice9Ex@@@1@XZ ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??I?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAEPAPAUIDirect3DDevice9Ex@@XZ
_TEXT	SEGMENT
??I?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAEPAPAUIDirect3DDevice9Ex@@XZ PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator&, COMDAT
; _this$ = ecx

; 192  :         ATLASSERT(p==NULL);
; 193  :         return &p;

	mov	eax, ecx

; 194  :     }

	ret	0
??I?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAEPAPAUIDirect3DDevice9Ex@@XZ ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator&
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??B?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAUIDirect3DDevice9Ex@@XZ
_TEXT	SEGMENT
??B?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAUIDirect3DDevice9Ex@@XZ PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator IDirect3DDevice9Ex *, COMDAT
; _this$ = ecx

; 181  :         return p;

	mov	eax, DWORD PTR [ecx]

; 182  :     }

	ret	0
??B?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QBEPAUIDirect3DDevice9Ex@@XZ ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::operator IDirect3DDevice9Ex *
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IDirect3DDevice9Ex>::~CComPtrBase<IDirect3DDevice9Ex>, COMDAT
; _this$ = ecx

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN2@CComPtrBas

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN2@CComPtrBas:

; 178  :     }

	ret	0
??1?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IDirect3DDevice9Ex>::~CComPtrBase<IDirect3DDevice9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ?Swap@?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAEXAAV12@@Z
_TEXT	SEGMENT
_other$ = 8						; size = 4
?Swap@?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAEXAAV12@@Z PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::Swap, COMDAT
; _this$ = ecx

; 167  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 168  :         T* pTemp = p;
; 169  :         p = other.p;

	mov	edx, DWORD PTR _other$[ebp]
	push	esi
	mov	esi, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR [ecx], eax

; 170  :         other.p = pTemp;

	mov	DWORD PTR [edx], esi
	pop	esi

; 171  :     }

	pop	ebp
	ret	4
?Swap@?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAEXAAV12@@Z ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::Swap
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAE@PAUIDirect3DDevice9Ex@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAE@PAUIDirect3DDevice9Ex@@@Z PROC ; ATL::CComPtrBase<IDirect3DDevice9Ex>::CComPtrBase<IDirect3DDevice9Ex>, COMDAT
; _this$ = ecx

; 160  :     CComPtrBase(_Inout_opt_ T* lp) throw()

	npad	2
	push	ebp
	mov	ebp, esp

; 161  :     {
; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN4@CComPtrBas

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN4@CComPtrBas:

; 165  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtrBase@UIDirect3DDevice9Ex@@@ATL@@IAE@PAUIDirect3DDevice9Ex@@@Z ENDP ; ATL::CComPtrBase<IDirect3DDevice9Ex>::CComPtrBase<IDirect3DDevice9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ PROC		; ATL::CComPtr<IDirect3D9Ex>::~CComPtr<IDirect3D9Ex>, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN4@CComPtr

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN4@CComPtr:
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ ENDP		; ATL::CComPtr<IDirect3D9Ex>::~CComPtr<IDirect3D9Ex>
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@PAUIDirect3D9Ex@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@PAUIDirect3D9Ex@@@Z PROC ; ATL::CComPtr<IDirect3D9Ex>::CComPtr<IDirect3D9Ex>, COMDAT
; _this$ = ecx

; 312  :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi

; 312  :     {

	mov	esi, ecx

; 162  :         p = lp;

	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN6@CComPtr

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN6@CComPtr:

; 313  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@PAUIDirect3D9Ex@@@Z ENDP ; ATL::CComPtr<IDirect3D9Ex>::CComPtr<IDirect3D9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??C?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3D9Ex@@@1@XZ
_TEXT	SEGMENT
??C?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3D9Ex@@@1@XZ PROC ; ATL::CComPtrBase<IDirect3D9Ex>::operator->, COMDAT
; _this$ = ecx

; 197  :         ATLASSERT(p!=NULL);
; 198  :         return (_NoAddRefReleaseOnCComPtr<T>*)p;

	mov	eax, DWORD PTR [ecx]

; 199  :     }

	ret	0
??C?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QBEPAV?$_NoAddRefReleaseOnCComPtr@UIDirect3D9Ex@@@1@XZ ENDP ; ATL::CComPtrBase<IDirect3D9Ex>::operator->
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??I?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAEPAPAUIDirect3D9Ex@@XZ
_TEXT	SEGMENT
??I?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAEPAPAUIDirect3D9Ex@@XZ PROC ; ATL::CComPtrBase<IDirect3D9Ex>::operator&, COMDAT
; _this$ = ecx

; 192  :         ATLASSERT(p==NULL);
; 193  :         return &p;

	mov	eax, ecx

; 194  :     }

	ret	0
??I?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAEPAPAUIDirect3D9Ex@@XZ ENDP ; ATL::CComPtrBase<IDirect3D9Ex>::operator&
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??1?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAE@XZ PROC	; ATL::CComPtrBase<IDirect3D9Ex>::~CComPtrBase<IDirect3D9Ex>, COMDAT
; _this$ = ecx

; 176  :         if (p)

	mov	ecx, DWORD PTR [ecx]
	test	ecx, ecx
	je	SHORT $LN2@CComPtrBas

; 177  :             p->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]
$LN2@CComPtrBas:

; 178  :     }

	ret	0
??1?$CComPtrBase@UIDirect3D9Ex@@@ATL@@QAE@XZ ENDP	; ATL::CComPtrBase<IDirect3D9Ex>::~CComPtrBase<IDirect3D9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
;	COMDAT ??0?$CComPtrBase@UIDirect3D9Ex@@@ATL@@IAE@PAUIDirect3D9Ex@@@Z
_TEXT	SEGMENT
_lp$ = 8						; size = 4
??0?$CComPtrBase@UIDirect3D9Ex@@@ATL@@IAE@PAUIDirect3D9Ex@@@Z PROC ; ATL::CComPtrBase<IDirect3D9Ex>::CComPtrBase<IDirect3D9Ex>, COMDAT
; _this$ = ecx

; 160  :     CComPtrBase(_Inout_opt_ T* lp) throw()

	npad	2
	push	ebp
	mov	ebp, esp

; 161  :     {
; 162  :         p = lp;

	mov	edx, DWORD PTR _lp$[ebp]
	push	esi
	mov	esi, ecx
	mov	DWORD PTR [esi], edx

; 163  :         if (p != NULL)

	test	edx, edx
	je	SHORT $LN4@CComPtrBas

; 164  :             p->AddRef();

	mov	eax, DWORD PTR [edx]
	push	edx
	call	DWORD PTR [eax+4]
$LN4@CComPtrBas:

; 165  :     }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	4
??0?$CComPtrBase@UIDirect3D9Ex@@@ATL@@IAE@PAUIDirect3D9Ex@@@Z ENDP ; ATL::CComPtrBase<IDirect3D9Ex>::CComPtrBase<IDirect3D9Ex>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
_pparams$2 = -76					; size = 56
_pDev9Ex$3 = -20					; size = 4
_pD3D9Ex$4 = -16					; size = 4
__$EHRec$ = -12						; size = 12
?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ PROC ; SK_D3D9_GetTimingDevice

; 317  : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 64					; 00000040H

; 318  :   if (! config.render.framerate.wait_for_vblank)

	cmp	BYTE PTR ?config@@3Usk_config_t@@A+436, 0
	jne	SHORT $LN2@SK_D3D9_Ge

; 319  :     return nullptr;

	xor	eax, eax

; 378  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@SK_D3D9_Ge:

; 320  : 
; 321  :   static auto* pTimingDevice =
; 322  :     reinterpret_cast <IDirect3DDevice9Ex *> (-1);
; 323  : 
; 324  :   if (pTimingDevice == reinterpret_cast <IDirect3DDevice9Ex *> (-1))

	mov	ecx, DWORD PTR ?pTimingDevice@?1??SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ@4PAU2@A
	cmp	ecx, -1
	jne	$LN25@SK_D3D9_Ge
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 162  :         p = lp;

	xor	eax, eax
	mov	DWORD PTR _pD3D9Ex$4[ebp], eax
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 326  :     CComPtr <IDirect3D9Ex> pD3D9Ex = nullptr;

	mov	DWORD PTR __$EHRec$[ebp+8], eax

; 327  : 
; 328  :     using Direct3DCreate9ExPROC = HRESULT (STDMETHODCALLTYPE *)(UINT           SDKVersion,
; 329  :                                                                 IDirect3D9Ex** d3d9ex);
; 330  : 
; 331  :     extern Direct3DCreate9ExPROC Direct3DCreate9Ex_Import;
; 332  : 
; 333  :     HRESULT hr = (config.apis.d3d9ex.hook) ?

	cmp	BYTE PTR ?config@@3Usk_config_t@@A+792, al
	je	SHORT $LN9@SK_D3D9_Ge
	lea	eax, DWORD PTR _pD3D9Ex$4[ebp]
	push	eax
	push	32					; 00000020H
	call	DWORD PTR ?Direct3DCreate9Ex_Import@@3P6GJIPAPAUIDirect3D9Ex@@@ZA ; Direct3DCreate9Ex_Import
	mov	ecx, eax
	mov	eax, DWORD PTR _pD3D9Ex$4[ebp]
	jmp	SHORT $LN10@SK_D3D9_Ge
$LN9@SK_D3D9_Ge:
	mov	ecx, -2147467262			; 80004002H
$LN10@SK_D3D9_Ge:

; 334  :       Direct3DCreate9Ex_Import (D3D_SDK_VERSION, &pD3D9Ex)
; 335  :                                     :
; 336  :                                E_NOINTERFACE;
; 337  : 
; 338  :     HWND hwnd = nullptr;
; 339  : 
; 340  :     IDirect3DDevice9Ex* pDev9Ex = nullptr;

	mov	DWORD PTR _pDev9Ex$3[ebp], 0

; 341  : 
; 342  :     if (SUCCEEDED (hr))

	test	ecx, ecx
	js	SHORT $LN4@SK_D3D9_Ge

; 343  :     {
; 344  :       hwnd = 

	push	esi
	call	?SK_Win32_CreateDummyWindow@@YAPAUHWND__@@XZ ; SK_Win32_CreateDummyWindow

; 345  :         SK_Win32_CreateDummyWindow ();
; 346  : 
; 347  :       D3DPRESENT_PARAMETERS pparams = { };

	push	56					; 00000038H
	mov	esi, eax
	lea	eax, DWORD PTR _pparams$2[ebp]
	push	0
	push	eax
	call	_memset

; 348  :       
; 349  :       pparams.SwapEffect       = D3DSWAPEFFECT_FLIPEX;
; 350  :       pparams.BackBufferFormat = D3DFMT_UNKNOWN;
; 351  :       pparams.hDeviceWindow    = hwnd;
; 352  :       pparams.Windowed         = TRUE;
; 353  :       pparams.BackBufferCount  = 2;
; 354  :       
; 355  :       if ( FAILED ( pD3D9Ex->CreateDeviceEx (

	mov	eax, DWORD PTR _pD3D9Ex$4[ebp]
	lea	edx, DWORD PTR _pDev9Ex$3[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _pparams$2[ebp+24], 5
	mov	DWORD PTR _pparams$2[ebp+8], 0
	mov	DWORD PTR _pparams$2[ebp+28], esi
	mov	DWORD PTR _pparams$2[ebp+32], 1
	push	edx
	push	0
	lea	edx, DWORD PTR _pparams$2[ebp]
	mov	DWORD PTR _pparams$2[ebp+12], 2
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	64					; 00000040H
	push	esi
	push	1
	push	0
	push	eax
	call	DWORD PTR [ecx+80]
	pop	esi
	test	eax, eax
	jns	SHORT $LN6@SK_D3D9_Ge

; 356  :                       D3DADAPTER_DEFAULT,
; 357  :                         D3DDEVTYPE_HAL,
; 358  :                           hwnd,
; 359  :                             D3DCREATE_HARDWARE_VERTEXPROCESSING,
; 360  :                               &pparams,
; 361  :                                 nullptr,
; 362  :                                   &pDev9Ex )
; 363  :                   )
; 364  :           )
; 365  :       {
; 366  :         pTimingDevice = nullptr;
; 367  :       } else {

	mov	eax, DWORD PTR _pD3D9Ex$4[ebp]
$LN4@SK_D3D9_Ge:

; 373  :       pTimingDevice = nullptr;

	xor	ecx, ecx
$LN28@SK_D3D9_Ge:
	mov	DWORD PTR ?pTimingDevice@?1??SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ@4PAU2@A, ecx

; 374  :     }
; 375  :   }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN25@SK_D3D9_Ge

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR ?pTimingDevice@?1??SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ@4PAU2@A
$LN25@SK_D3D9_Ge:
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 377  :   return pTimingDevice;

	mov	eax, ecx

; 378  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@SK_D3D9_Ge:

; 368  :         pDev9Ex->AddRef ();

	mov	eax, DWORD PTR _pDev9Ex$3[ebp]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+4]

; 369  :         pTimingDevice = pDev9Ex;

	mov	ecx, DWORD PTR _pDev9Ex$3[ebp]

; 370  :       }
; 371  :     }
; 372  :     else {

	mov	eax, DWORD PTR _pD3D9Ex$4[ebp]
	jmp	SHORT $LN28@SK_D3D9_Ge
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ$0:
	lea	ecx, DWORD PTR _pD3D9Ex$4[ebp]
	jmp	??1?$CComPtr@UIDirect3D9Ex@@@ATL@@QAE@XZ
__ehhandler$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ:
	mov	eax, OFFSET __ehfuncinfo$?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ ENDP ; SK_D3D9_GetTimingDevice
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\utility.h
;	COMDAT ??$static_cast_p2p@XX@@YAPAPAXPAPAX@Z
_TEXT	SEGMENT
_p2p$ = 8						; size = 4
??$static_cast_p2p@XX@@YAPAPAXPAPAX@Z PROC		; static_cast_p2p<void,void>, COMDAT

; 50   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 51   :       return static_cast <T **> (

	mov	eax, DWORD PTR _p2p$[ebp]

; 52   :                static_cast <T*>   ( p2p )
; 53   :                                 );
; 54   :     };

	pop	ebp
	ret	0
??$static_cast_p2p@XX@@YAPAPAXPAPAX@Z ENDP		; static_cast_p2p<void,void>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\utility.h
;	COMDAT ??$static_cast_p2p@X$$A6GXK@Z@@YAPAPAXPAP6GXK@Z@Z
_TEXT	SEGMENT
_p2p$ = 8						; size = 4
??$static_cast_p2p@X$$A6GXK@Z@@YAPAPAXPAP6GXK@Z@Z PROC	; static_cast_p2p<void,void __stdcall(unsigned long)>, COMDAT

; 50   :     {

	npad	2
	push	ebp
	mov	ebp, esp

; 51   :       return static_cast <T **> (

	mov	eax, DWORD PTR _p2p$[ebp]

; 52   :                static_cast <T*>   ( p2p )
; 53   :                                 );
; 54   :     };

	pop	ebp
	ret	0
??$static_cast_p2p@X$$A6GXK@Z@@YAPAPAXPAP6GXK@Z@Z ENDP	; static_cast_p2p<void,void __stdcall(unsigned long)>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
_lpPerformanceCount$ = 8				; size = 4
?QueryPerformanceCounter_Detour@@YGHPAT_LARGE_INTEGER@@@Z PROC ; QueryPerformanceCounter_Detour

; 197  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 199  : }

	pop	ebp

; 198  :   return QueryPerformanceCounter_Original (lpPerformanceCount);

	jmp	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original
?QueryPerformanceCounter_Detour@@YGHPAT_LARGE_INTEGER@@@Z ENDP ; QueryPerformanceCounter_Detour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
__$ReturnAddr$ = 4					; size = 4
_dwMilliseconds$ = 8					; size = 4
?Sleep_Detour@@YGXK@Z PROC				; Sleep_Detour

; 89   : {

	npad	2
	push	ebp
	mov	ebp, esp

; 90   :   // SteamAPI has some unusual logic that will fail if a call to Sleep (...)
; 91   :   //   is skipped -- if the user wants to replace or eliminate sleep from the
; 92   :   //     render / window thread for better frame pacing, we have to wait for
; 93   :   //       Steam first!
; 94   :   if (SK_GetFramesDrawn () < 30)

	call	?SK_GetFramesDrawn@@YGKXZ		; SK_GetFramesDrawn
	cmp	eax, 30					; 0000001eH
	jae	SHORT $LN2@Sleep_Deto

; 187  : #ifdef DUAL_USE_MAX_DELTA
; 188  :   }
; 189  : #endif
; 190  : }

	pop	ebp

; 95   :     return Sleep_Original (dwMilliseconds);

	jmp	DWORD PTR ?Sleep_Original@@3P6GXK@ZA	; Sleep_Original
$LN2@Sleep_Deto:

; 96   : 
; 97   :   if (SK::SteamAPI::AppID () > 0)

	call	?AppID@SteamAPI@SK@@YAIXZ		; SK::SteamAPI::AppID
	test	eax, eax
	je	SHORT $LN5@Sleep_Deto

; 98   :   {
; 99   :     if (hModSteamAPI == nullptr)

	cmp	DWORD PTR ?hModSteamAPI@@3PAXA, 0	; hModSteamAPI
	jne	SHORT $LN4@Sleep_Deto

; 100  :     {
; 101  :       hModSteamAPI = 

	push	OFFSET $SG198338
	call	DWORD PTR __imp__GetModuleHandleW@4
	mov	DWORD PTR ?hModSteamAPI@@3PAXA, eax	; hModSteamAPI
$LN4@Sleep_Deto:

; 102  : #ifndef _WIN64
; 103  :         GetModuleHandle (L"steam_api.dll");
; 104  : #else
; 105  :         GetModuleHandle (L"steam_api64.dll");
; 106  : #endif
; 107  :     }
; 108  : 
; 109  :     if (SK_GetCallingDLL () == hModSteamAPI)

	mov	eax, DWORD PTR __$ReturnAddr$[ebp]
	push	eax
	call	?SK_GetCallingDLL@@YAPAUHINSTANCE__@@PAX@Z ; SK_GetCallingDLL
	add	esp, 4
	cmp	eax, DWORD PTR ?hModSteamAPI@@3PAXA	; hModSteamAPI
	jne	SHORT $LN5@Sleep_Deto

; 187  : #ifdef DUAL_USE_MAX_DELTA
; 188  :   }
; 189  : #endif
; 190  : }

	pop	ebp

; 110  :       return Sleep_Original (dwMilliseconds);

	jmp	DWORD PTR ?Sleep_Original@@3P6GXK@ZA	; Sleep_Original
$LN5@Sleep_Deto:
	push	ebx
	push	esi
	push	edi

; 111  :   }
; 112  : 
; 113  : 
; 114  :   BOOL bGUIThread    = IsGUIThread (FALSE);

	push	0
	call	DWORD PTR __imp__IsGUIThread@4
	mov	edi, eax

; 115  :   BOOL bRenderThread = (SK_GetCurrentRenderBackend ().thread == GetCurrentThreadId ());

	call	?SK_GetCurrentRenderBackend@@YGAAVSK_RenderBackend_V2@@XZ ; SK_GetCurrentRenderBackend
	lea	esi, DWORD PTR [eax+84]
	call	DWORD PTR __imp__GetCurrentThreadId@0
	xor	ebx, ebx
	cmp	DWORD PTR [esi], eax

; 116  : 
; 117  :   if (bRenderThread)

	mov	esi, DWORD PTR _dwMilliseconds$[ebp]
	sete	bl
	test	ebx, ebx
	je	SHORT $LN6@Sleep_Deto

; 118  :   {
; 119  :     if (config.render.framerate.sleepless_render && dwMilliseconds != INFINITE)

	cmp	BYTE PTR ?config@@3Usk_config_t@@A+437, 0
	je	SHORT $LN7@Sleep_Deto
	cmp	esi, -1
	je	SHORT $LN7@Sleep_Deto

; 120  :     {
; 121  :       static bool reported = false;
; 122  :             if (! reported)

	cmp	BYTE PTR ?reported@?BC@??Sleep_Detour@@YGXK@Z@4_NA, 0
	jne	SHORT $LN8@Sleep_Deto

; 123  :             {
; 124  :               dll_log.Log (L"[FrameLimit] Sleep called from render thread: %lu ms!", dwMilliseconds);

	push	esi
	push	OFFSET $SG198343
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log
	add	esp, 12					; 0000000cH

; 125  :               reported = true;

	mov	BYTE PTR ?reported@?BC@??Sleep_Detour@@YGXK@Z@4_NA, 1
$LN8@Sleep_Deto:

; 126  :             }
; 127  : 
; 128  :       SK::Framerate::events.getRenderThreadStats ().wake (dwMilliseconds);

	push	esi
	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A+24
	call	?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::wake

; 129  : 
; 130  :       if (bGUIThread)

	test	edi, edi
	je	SHORT $LN9@Sleep_Deto

; 131  :         SK::Framerate::events.getMessagePumpStats ().wake (dwMilliseconds);

	push	esi
	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A ; SK::Framerate::events
	call	?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::wake
$LN9@Sleep_Deto:

; 132  : 
; 133  :       if (dwMilliseconds <= 1)

	cmp	esi, 1
	ja	$LN30@Sleep_Deto

; 134  :         SleepEx (0, TRUE);

	push	1
	push	0
	call	DWORD PTR __imp__SleepEx@8
	pop	edi
	pop	esi
	pop	ebx

; 187  : #ifdef DUAL_USE_MAX_DELTA
; 188  :   }
; 189  : #endif
; 190  : }

	pop	ebp
	ret	4
$LN7@Sleep_Deto:

; 135  : 
; 136  :       return;
; 137  :     }
; 138  : 
; 139  :     SK::Framerate::events.getRenderThreadStats ().sleep  (dwMilliseconds);

	push	esi
	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A+24
	call	?sleep@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::sleep
$LN6@Sleep_Deto:

; 140  :   }
; 141  : 
; 142  :   if (bGUIThread)

	test	edi, edi
	je	SHORT $LN11@Sleep_Deto

; 143  :   {
; 144  :     if (config.render.framerate.sleepless_window && dwMilliseconds != INFINITE)

	cmp	BYTE PTR ?config@@3Usk_config_t@@A+438, 0
	je	SHORT $LN12@Sleep_Deto
	cmp	esi, -1
	je	SHORT $LN12@Sleep_Deto

; 145  :     {
; 146  :       static bool reported = false;
; 147  :             if (! reported)

	cmp	BYTE PTR ?reported@?BP@??Sleep_Detour@@YGXK@Z@4_NA, 0
	jne	SHORT $LN13@Sleep_Deto

; 148  :             {
; 149  :               dll_log.Log (L"[FrameLimit] Sleep called from GUI thread: %lu ms!", dwMilliseconds);

	push	esi
	push	OFFSET $SG198349
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log
	add	esp, 12					; 0000000cH

; 150  :               reported = true;

	mov	BYTE PTR ?reported@?BP@??Sleep_Detour@@YGXK@Z@4_NA, 1
$LN13@Sleep_Deto:

; 151  :             }
; 152  : 
; 153  :       SK::Framerate::events.getMessagePumpStats ().wake   (dwMilliseconds);

	push	esi
	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A ; SK::Framerate::events
	call	?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::wake
	test	ebx, ebx

; 154  : 
; 155  :       if (bRenderThread)

	je	SHORT $LN14@Sleep_Deto

; 156  :         SK::Framerate::events.getMessagePumpStats ().wake (dwMilliseconds);

	push	esi
	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A ; SK::Framerate::events
	call	?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::wake
$LN14@Sleep_Deto:

; 157  : 
; 158  :       MsgWaitForMultipleObjects (0, nullptr, FALSE, dwMilliseconds, QS_ALLEVENTS);

	push	1215					; 000004bfH
	push	esi
	push	0
	push	0
	push	0
	call	DWORD PTR __imp__MsgWaitForMultipleObjects@20
	pop	edi
	pop	esi
	pop	ebx

; 187  : #ifdef DUAL_USE_MAX_DELTA
; 188  :   }
; 189  : #endif
; 190  : }

	pop	ebp
	ret	4
$LN12@Sleep_Deto:

; 159  : 
; 160  :       return;
; 161  :     }
; 162  : 
; 163  :     SK::Framerate::events.getMessagePumpStats ().sleep (dwMilliseconds);

	push	esi
	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A ; SK::Framerate::events
	call	?sleep@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ; SK::Framerate::EventCounter_V1::SleepStats::sleep
$LN11@Sleep_Deto:

; 164  :   }
; 165  : 
; 166  :   //if (config.framerate.yield_processor && dwMilliseconds == 0)
; 167  :   if (dwMilliseconds == 0)

	test	esi, esi
	jne	SHORT $LN15@Sleep_Deto

; 168  :   {
; 169  :     YieldProcessor ();

	pause
	pop	edi
	pop	esi
	pop	ebx

; 187  : #ifdef DUAL_USE_MAX_DELTA
; 188  :   }
; 189  : #endif
; 190  : }

	pop	ebp
	ret	4
$LN15@Sleep_Deto:

; 170  :   //SleepEx (0, TRUE);
; 171  :     return;
; 172  :   }
; 173  : 
; 174  : #define DUAL_USE_MAX_DELTA
; 175  : #ifdef DUAL_USE_MAX_DELTA
; 176  :   // TODO: Stop this nonsense and make an actual parameter for this...
; 177  :   //         (min sleep?)
; 178  :   if ( static_cast <DWORD> (config.render.framerate.max_delta_time) <=

	cmp	DWORD PTR ?config@@3Usk_config_t@@A+416, esi
	ja	SHORT $LN30@Sleep_Deto

; 179  :                             dwMilliseconds
; 180  :      )
; 181  :   {
; 182  :     //if (dwMilliseconds == 0)
; 183  :       //return YieldProcessor ();
; 184  : #endif
; 185  : 
; 186  :     Sleep_Original (dwMilliseconds);

	push	esi
	call	DWORD PTR ?Sleep_Original@@3P6GXK@ZA	; Sleep_Original
$LN30@Sleep_Deto:
	pop	edi
	pop	esi
	pop	ebx

; 187  : #ifdef DUAL_USE_MAX_DELTA
; 188  :   }
; 189  : #endif
; 190  : }

	pop	ebp
	ret	4
?Sleep_Detour@@YGXK@Z ENDP				; Sleep_Detour
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
?SK_QueryPerf@@YA?AT_LARGE_INTEGER@@XZ PROC		; SK_QueryPerf

; 74   : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 75   :   return SK_CurrentPerf ();

	mov	eax, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]

; 76   : }

	mov	esp, ebp
	pop	ebp
	ret	0
?SK_QueryPerf@@YA?AT_LARGE_INTEGER@@XZ ENDP		; SK_QueryPerf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
;	COMDAT ??R<lambda_b2243a37586aaac2b3364c16e80bbb5a>@@QBE?AT_LARGE_INTEGER@@XZ
_TEXT	SEGMENT
___$ReturnUdt$ = 8					; size = 4
??R<lambda_b2243a37586aaac2b3364c16e80bbb5a>@@QBE?AT_LARGE_INTEGER@@XZ PROC ; <lambda_b2243a37586aaac2b3364c16e80bbb5a>::operator(), COMDAT
; _this$ = ecx

; 55   :  []{

	npad	2
	push	ebp
	mov	ebp, esp

; 56   :      LARGE_INTEGER                     time;
; 57   :      QueryPerformanceCounter_Original (&time);

	push	DWORD PTR ___$ReturnUdt$[ebp]
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 58   :      return                            time;

	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]

; 59   :    };

	pop	ebp
	ret	4
??R<lambda_b2243a37586aaac2b3364c16e80bbb5a>@@QBE?AT_LARGE_INTEGER@@XZ ENDP ; <lambda_b2243a37586aaac2b3364c16e80bbb5a>::operator()
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
;	COMDAT ??__Eevents@Framerate@SK@@YAXXZ
text$di	SEGMENT
??__Eevents@Framerate@SK@@YAXXZ PROC			; SK::Framerate::`dynamic initializer for 'events'', COMDAT

; 46   : SK::Framerate::EventCounter SK::Framerate::events;

	mov	ecx, OFFSET ?events@Framerate@SK@@3VEventCounter_V1@12@A ; SK::Framerate::events
	jmp	??0EventCounter_V1@Framerate@SK@@QAE@XZ
??__Eevents@Framerate@SK@@YAXXZ ENDP			; SK::Framerate::`dynamic initializer for 'events''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??__F_AtlWinModule@ATL@@YAXXZ
text$yd	SEGMENT
??__F_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlWinModule'', COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
	push	OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+32
	test	eax, eax
	je	SHORT $LN29@dynamic

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+32, 0
$LN29@dynamic:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+40, 0
	mov	DWORD PTR ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A+36, 0
	ret	0
??__F_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlWinModule''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlWinModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlWinModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlWinModule'', COMDAT

; 2979 : __declspec(selectany) CAtlWinModule _AtlWinModule;

	mov	ecx, OFFSET ?_AtlWinModule@ATL@@3VCAtlWinModule@1@A ; ATL::_AtlWinModule
	call	??0CAtlWinModule@ATL@@QAE@XZ		; ATL::CAtlWinModule::CAtlWinModule
	push	OFFSET ??__F_AtlWinModule@ATL@@YAXXZ	; ATL::`dynamic atexit destructor for '_AtlWinModule''
	call	_atexit
	pop	ecx
	ret	0
??__E_AtlWinModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlWinModule''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlWinModule@ATL@@QAEXXZ
_TEXT	SEGMENT
?Term@CAtlWinModule@ATL@@QAEXXZ PROC			; ATL::CAtlWinModule::Term, COMDAT
; _this$ = ecx

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4
	push	ecx
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm

; 2965 : 	}

	ret	0
?Term@CAtlWinModule@ATL@@QAEXXZ ENDP			; ATL::CAtlWinModule::Term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??1CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::~CAtlWinModule, COMDAT
; _this$ = ecx

; 2958 : 	{

	npad	2
	push	esi

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	DWORD PTR ?_AtlBaseModule@ATL@@3VCAtlBaseModule@1@A+4

; 2958 : 	{

	mov	esi, ecx

; 2964 : 		AtlWinModuleTerm(this, _AtlBaseModule.GetModuleInstance());

	push	esi
	call	?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ; ATL::AtlWinModuleTerm
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN26@CAtlWinMod

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi+32], 0
$LN26@CAtlWinMod:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+36], 0
	pop	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2960 : 	}

	ret	0
??1CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::~CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlWinModule@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CAtlWinModule@ATL@@QAE@XZ PROC			; ATL::CAtlWinModule::CAtlWinModule, COMDAT
; _this$ = ecx

; 2944 : 	CAtlWinModule()

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	esi, ecx
	xorps	xmm0, xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [esi+4], xmm0
	lea	eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2944 : 	CAtlWinModule()

	mov	DWORD PTR _this$[ebp], esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movq	QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

	mov	DWORD PTR [esi+32], 0
	mov	DWORD PTR [esi+36], 0
	mov	DWORD PTR [esi+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2946 : 		cbSize = sizeof(_ATL_WIN_MODULE);

	mov	DWORD PTR [esi], 44			; 0000002cH

; 8412 : 	pWinModule->m_pCreateWndList = NULL;

	mov	DWORD PTR [esi+28], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN26@CAtlWinMod

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN27@CAtlWinMod
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2948 : 		if (FAILED(hr))

	test	eax, eax
$LN27@CAtlWinMod:

; 2953 : 			return;
; 2954 : 		}
; 2955 : 	}

	mov	eax, esi

; 2948 : 		if (FAILED(hr))

	jns	SHORT $LN2@CAtlWinMod

; 2949 : 		{
; 2950 : 			ATLASSERT(0);
; 2951 : 			CAtlBaseModule::m_bInitFailed = true;

	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2952 : 			cbSize = 0;

	mov	DWORD PTR [esi], 0
	pop	esi

; 2953 : 			return;
; 2954 : 		}
; 2955 : 	}

	mov	esp, ebp
	pop	ebp
	ret	0
$LN26@CAtlWinMod:
	mov	eax, esi
$LN2@CAtlWinMod:
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
??0CAtlWinModule@ATL@@QAE@XZ ENDP			; ATL::CAtlWinModule::CAtlWinModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??__F_AtlComModule@ATL@@YAXXZ
text$yd	SEGMENT
__$EHRec$ = -12						; size = 12
??__F_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic atexit destructor for '_AtlComModule'', COMDAT
	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??__F_AtlComModule@ATL@@YAXXZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 2615 : 		Term();

	mov	ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	call	?Term@CAtlComModule@ATL@@QAEXXZ		; ATL::CAtlComModule::Term

; 2616 : 	}

	mov	ecx, OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A ; ATL::_AtlComModule
	call	??1_ATL_COM_MODULE70@ATL@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
text$yd	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??__F_AtlComModule@ATL@@YAXXZ:
	mov	eax, OFFSET __ehfuncinfo$??__F_AtlComModule@ATL@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??__F_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic atexit destructor for '_AtlComModule''
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??__E_AtlComModule@ATL@@YAXXZ
text$di	SEGMENT
??__E_AtlComModule@ATL@@YAXXZ PROC			; ATL::`dynamic initializer for '_AtlComModule'', COMDAT
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	0
	push	OFFSET ?_AtlComModule@ATL@@3VCAtlComModule@1@A+16
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN4@dynamic

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN20@dynamic
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2602 : 		if (FAILED(m_csObjMap.Init()))

	test	eax, eax
$LN20@dynamic:
	jns	SHORT $LN4@dynamic

; 2723 : __declspec(selectany) CAtlComModule _AtlComModule;

	push	OFFSET ??__F_AtlComModule@ATL@@YAXXZ	; ATL::`dynamic atexit destructor for '_AtlComModule''

; 2606 : 			CAtlBaseModule::m_bInitFailed = true;

	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed

; 2723 : __declspec(selectany) CAtlComModule _AtlComModule;

	call	_atexit
	pop	ecx
	ret	0
$LN4@dynamic:
	push	OFFSET ??__F_AtlComModule@ATL@@YAXXZ	; ATL::`dynamic atexit destructor for '_AtlComModule''

; 2610 : 		cbSize = sizeof(_ATL_COM_MODULE);

	mov	DWORD PTR ?_AtlComModule@ATL@@3VCAtlComModule@1@A, 40 ; 00000028H

; 2723 : __declspec(selectany) CAtlComModule _AtlComModule;

	call	_atexit
	pop	ecx
	ret	0
??__E_AtlComModule@ATL@@YAXXZ ENDP			; ATL::`dynamic initializer for '_AtlComModule''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?Term@CAtlComModule@ATL@@QAEXXZ
_TEXT	SEGMENT
?Term@CAtlComModule@ATL@@QAEXXZ PROC			; ATL::CAtlComModule::Term, COMDAT
; _this$ = ecx

; 2620 : 	{

	npad	2
	push	edi
	mov	edi, ecx

; 2621 : 		if (cbSize == 0)

	cmp	DWORD PTR [edi], 0
	je	SHORT $LN1@Term

; 2622 : 			return;
; 2623 : 
; 2624 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

	push	esi
	mov	esi, DWORD PTR [edi+8]
	cmp	esi, DWORD PTR [edi+12]
	jae	SHORT $LN3@Term
	push	ebx
$LL4@Term:

; 2625 : 		{
; 2626 : 			if (*ppEntry != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN2@Term

; 2627 : 			{
; 2628 : 				_ATL_OBJMAP_CACHE* pCache = (**ppEntry).pCache;

	mov	ebx, DWORD PTR [eax+16]

; 2629 : 
; 2630 : 				if (pCache->pCF != NULL)

	mov	eax, DWORD PTR [ebx]
	test	eax, eax
	je	SHORT $LN2@Term

; 2631 : 				{
; 2632 : 					// Decode factory pointer if it's not null
; 2633 : 					IUnknown *factory = reinterpret_cast<IUnknown*>(::DecodePointer(pCache->pCF));

	push	eax
	call	DWORD PTR __imp__DecodePointer@4

; 2634 : 					_Analysis_assume_(factory != nullptr);
; 2635 : 					factory->Release();

	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+8]

; 2636 : 					pCache->pCF = NULL;

	mov	DWORD PTR [ebx], 0
$LN2@Term:

; 2622 : 			return;
; 2623 : 
; 2624 : 		for (_ATL_OBJMAP_ENTRY_EX** ppEntry = m_ppAutoObjMapFirst; ppEntry < m_ppAutoObjMapLast; ppEntry++)

	add	esi, 4
	cmp	esi, DWORD PTR [edi+12]
	jb	SHORT $LL4@Term
	pop	ebx
$LN3@Term:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	lea	eax, DWORD PTR [edi+16]
	push	eax
	call	DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2644 : 		cbSize = 0;

	mov	DWORD PTR [edi], 0
	pop	esi
$LN1@Term:
	pop	edi

; 2645 : 	}

	ret	0
?Term@CAtlComModule@ATL@@QAEXXZ ENDP			; ATL::CAtlComModule::Term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??1CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
??1CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::~CAtlComModule, COMDAT
; _this$ = ecx

; 2614 : 	{

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$??1CAtlComModule@ATL@@QAE@XZ
	push	eax
	mov	DWORD PTR fs:0, esp

; 2615 : 		Term();

	call	?Term@CAtlComModule@ATL@@QAEXXZ		; ATL::CAtlComModule::Term

; 2616 : 	}

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1CAtlComModule@ATL@@QAE@XZ:
	mov	eax, OFFSET __ehfuncinfo$??1CAtlComModule@ATL@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::~CAtlComModule
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ??0CAtlComModule@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CAtlComModule@ATL@@QAE@XZ PROC			; ATL::CAtlComModule::CAtlComModule, COMDAT
; _this$ = ecx

; 2593 : 	CAtlComModule() throw()

	npad	2
	push	esi
	mov	esi, ecx
	xorps	xmm0, xmm0
	lea	eax, DWORD PTR [esi+16]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [eax], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movq	QWORD PTR [eax+16], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2595 : 		cbSize = 0;

	mov	DWORD PTR [esi], 0

; 2596 : 
; 2597 : 		m_hInstTypeLib = reinterpret_cast<HINSTANCE>(&__ImageBase);

	mov	DWORD PTR [esi+4], OFFSET ___ImageBase

; 2598 : 
; 2599 : 		m_ppAutoObjMapFirst = &__pobjMapEntryFirst + 1;

	mov	DWORD PTR [esi+8], OFFSET ___pobjMapEntryFirst+4

; 2600 : 		m_ppAutoObjMapLast = &__pobjMapEntryLast;

	mov	DWORD PTR [esi+12], OFFSET ___pobjMapEntryLast
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN2@CAtlComMod

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN18@CAtlComMod
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 2602 : 		if (FAILED(m_csObjMap.Init()))

	test	eax, eax
$LN18@CAtlComMod:
	jns	SHORT $LN2@CAtlComMod

; 2611 : 	}

	mov	eax, esi
	mov	BYTE PTR ?m_bInitFailed@CAtlBaseModule@ATL@@2_NA, 1 ; ATL::CAtlBaseModule::m_bInitFailed
	pop	esi
	ret	0
$LN2@CAtlComMod:

; 2603 : 		{
; 2604 : 			ATLTRACE(atlTraceCOM, 0, _T("ERROR : Unable to initialize critical section in CAtlComModule\n"));
; 2605 : 			ATLASSERT(0);
; 2606 : 			CAtlBaseModule::m_bInitFailed = true;
; 2607 : 			return;
; 2608 : 		}
; 2609 : 		// Set cbSize on success.
; 2610 : 		cbSize = sizeof(_ATL_COM_MODULE);

	mov	DWORD PTR [esi], 40			; 00000028H

; 2611 : 	}

	mov	eax, esi
	pop	esi
	ret	0
??0CAtlComModule@ATL@@QAE@XZ ENDP			; ATL::CAtlComModule::CAtlComModule
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z
_TEXT	SEGMENT
_pWinModule$ = 8					; size = 4
_hInst$ = 12						; size = 4
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z PROC ; ATL::AtlWinModuleTerm, COMDAT

; 7660 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	esi

; 7661 : 	if (pWinModule == NULL)

	mov	esi, DWORD PTR _pWinModule$[ebp]
	test	esi, esi
	jne	SHORT $LN5@AtlWinModu
$LN35@AtlWinModu:

; 7662 : 		return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H
	pop	esi

; 7674 : }

	pop	ebp
	ret	8
$LN5@AtlWinModu:

; 7663 : 	if (pWinModule->cbSize == 0)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN34@AtlWinModu

; 7664 : 		return S_OK;
; 7665 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN35@AtlWinModu

; 7666 : 		return E_INVALIDARG;
; 7667 : 
; 7668 : 	for (int i = 0; i < pWinModule->m_rgWindowClassAtoms.GetSize(); i++)

	push	edi
	xor	edi, edi
	cmp	DWORD PTR [esi+36], edi
	jle	SHORT $LN3@AtlWinModu

; 7669 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

	push	ebx
	mov	ebx, DWORD PTR _hInst$[ebp]
	npad	2
$LL4@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

	test	edi, edi
	js	SHORT $LN36@AtlWinModu
	cmp	edi, DWORD PTR [esi+36]
	jge	SHORT $LN36@AtlWinModu
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 7669 : 		UnregisterClass((LPCTSTR)pWinModule->m_rgWindowClassAtoms[i], hInst);

	mov	eax, DWORD PTR [esi+32]
	push	ebx
	movzx	eax, WORD PTR [eax+edi*2]
	push	eax
	call	DWORD PTR __imp__UnregisterClassW@8
	inc	edi
	cmp	edi, DWORD PTR [esi+36]
	jl	SHORT $LL4@AtlWinModu
	pop	ebx
$LN3@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi+32]
	pop	edi
	test	eax, eax
	je	SHORT $LN20@AtlWinModu

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi+32], 0
$LN20@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	lea	eax, DWORD PTR [esi+4]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 223  : 		m_nSize = 0;

	mov	DWORD PTR [esi+36], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	push	eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+40], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 181  : 		DeleteCriticalSection(&m_sec);

	call	DWORD PTR __imp__DeleteCriticalSection@4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 7672 : 	pWinModule->cbSize = 0;

	mov	DWORD PTR [esi], 0
$LN34@AtlWinModu:

; 7673 : 	return S_OK;

	xor	eax, eax
	pop	esi

; 7674 : }

	pop	ebp
	ret	8
$LN36@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

	push	1
	push	-1073741684				; c000008cH
	call	?_AtlRaiseException@ATL@@YAXKK@Z	; ATL::_AtlRaiseException
$LN37@AtlWinModu:
$LN33@AtlWinModu:
	int	3
?AtlWinModuleTerm@ATL@@YGJPAU_ATL_WIN_MODULE70@1@PAUHINSTANCE__@@@Z ENDP ; ATL::AtlWinModuleTerm
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h
;	COMDAT ?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z
_TEXT	SEGMENT
_pWinModule$ = 8					; size = 4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z PROC ; ATL::AtlWinModuleInit, COMDAT

; 8404 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 8405 : 	if (pWinModule == NULL)

	mov	eax, DWORD PTR _pWinModule$[ebp]
	test	eax, eax
	jne	SHORT $LN2@AtlWinModu
$LN15@AtlWinModu:

; 8406 : 		return E_INVALIDARG;

	mov	eax, -2147024809			; 80070057H

; 8421 : }

	pop	ebp
	ret	4
$LN2@AtlWinModu:

; 8407 : 
; 8408 : 	// check only in the DLL
; 8409 : 	if (pWinModule->cbSize != sizeof(_ATL_WIN_MODULE))

	cmp	DWORD PTR [eax], 44			; 0000002cH
	jne	SHORT $LN15@AtlWinModu
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 170  : 		HRESULT hRes = S_OK;

	xor	esi, esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 8412 : 	pWinModule->m_pCreateWndList = NULL;

	mov	DWORD PTR [eax+28], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	esi
	push	esi
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	add	eax, 4
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	eax
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN14@AtlWinModu

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
	mov	esi, eax
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	esi, esi
	jle	SHORT $LN14@AtlWinModu
	movzx	esi, si
	or	esi, -2147024896			; 80070000H
$LN14@AtlWinModu:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlbase.h

; 8420 : 	return hr;

	mov	eax, esi
	pop	esi

; 8421 : }

	pop	ebp
	ret	4
?AtlWinModuleInit@ATL@@YGJPAU_ATL_WIN_MODULE70@1@@Z ENDP ; ATL::AtlWinModuleInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??1_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	npad	2
	push	esi
	mov	esi, ecx

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi+32]
	test	eax, eax
	je	SHORT $LN19@ATL_WIN_MO

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi+32], 0
$LN19@ATL_WIN_MO:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+40], 0
	mov	DWORD PTR [esi+36], 0
	pop	esi
	ret	0
??1_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::~_ATL_WIN_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??0_ATL_WIN_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70, COMDAT
; _this$ = ecx
	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	xorps	xmm0, xmm0
	mov	DWORD PTR _this$[ebp], ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [ecx+4], xmm0
	mov	eax, ecx
	movq	QWORD PTR [ecx+20], xmm0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	esp, ebp
	pop	ebp
	ret	0
??0_ATL_WIN_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_WIN_MODULE70::_ATL_WIN_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z
_TEXT	SEGMENT
_nIndex$ = 8						; size = 4
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[], COMDAT
; _this$ = ecx

; 236  : 	{

	npad	2
	push	ebp
	mov	ebp, esp

; 237  : 		ATLASSERT(nIndex >= 0 && nIndex < m_nSize);
; 238  : 		if(nIndex < 0 || nIndex >= m_nSize)

	mov	edx, DWORD PTR _nIndex$[ebp]
	test	edx, edx
	js	SHORT $LN6@operator
	cmp	edx, DWORD PTR [ecx+4]
	jge	SHORT $LN6@operator

; 241  : 		}
; 242  : 		return m_aT[nIndex];

	mov	eax, DWORD PTR [ecx]
	lea	eax, DWORD PTR [eax+edx*2]

; 243  : 	}

	pop	ebp
	ret	4
$LN6@operator:

; 239  : 		{
; 240  : 			_AtlRaiseException((DWORD)EXCEPTION_ARRAY_BOUNDS_EXCEEDED);

	push	1
	push	-1073741684				; c000008cH
	call	?_AtlRaiseException@ATL@@YAXKK@Z	; ATL::_AtlRaiseException
$LN7@operator:
$LN5@operator:
	int	3
??A?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEAAGH@Z ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ
_TEXT	SEGMENT
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll, COMDAT
; _this$ = ecx

; 215  : 	{

	npad	2
	push	esi
	mov	esi, ecx

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN11@RemoveAll

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi], 0
$LN11@RemoveAll:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 225  :     }

	ret	0
?RemoveAll@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAEXXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::RemoveAll
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ
_TEXT	SEGMENT
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize, COMDAT
; _this$ = ecx

; 161  : 		return m_nSize;

	mov	eax, DWORD PTR [ecx+4]

; 162  : 	}

	ret	0
?GetSize@?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QBEHXZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::GetSize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 310  : {

	npad	2
	push	esi
	mov	esi, ecx

; 216  : 		if(m_aT != NULL)

	mov	eax, DWORD PTR [esi]
	test	eax, eax
	je	SHORT $LN13@CSimpleArr

; 217  : 		{
; 218  : 			for(int i = 0; i < m_nSize; i++)
; 219  : 				m_aT[i].~T();
; 220  : 			free(m_aT);

	push	eax
	call	DWORD PTR __imp__free
	add	esp, 4

; 221  : 			m_aT = NULL;

	mov	DWORD PTR [esi], 0
$LN13@CSimpleArr:

; 222  : 		}
; 223  : 		m_nSize = 0;
; 224  : 		m_nAllocSize = 0;

	mov	DWORD PTR [esi+8], 0
	mov	DWORD PTR [esi+4], 0
	pop	esi

; 311  : 	RemoveAll();
; 312  : }

	ret	0
??1?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::~CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlsimpcoll.h
;	COMDAT ??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ
_TEXT	SEGMENT
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ PROC ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >, COMDAT
; _this$ = ecx

; 119  : 		m_aT(NULL), m_nSize(0), m_nAllocSize(0)

	mov	DWORD PTR [ecx], 0

; 121  : 	}

	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	ret	0
??0?$CSimpleArray@GV?$CSimpleArrayEqualHelper@G@ATL@@@ATL@@QAE@XZ ENDP ; ATL::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >::CSimpleArray<unsigned short,ATL::CSimpleArrayEqualHelper<unsigned short> >
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??1_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
??1_ATL_COM_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70, COMDAT
; _this$ = ecx
	ret	0
??1_ATL_COM_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_COM_MODULE70::~_ATL_COM_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ??0_ATL_COM_MODULE70@ATL@@QAE@XZ
_TEXT	SEGMENT
??0_ATL_COM_MODULE70@ATL@@QAE@XZ PROC			; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70, COMDAT
; _this$ = ecx
	xorps	xmm0, xmm0
	mov	eax, ecx

; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));

	movups	XMMWORD PTR [ecx+16], xmm0
	movq	QWORD PTR [ecx+32], xmm0
	ret	0
??0_ATL_COM_MODULE70@ATL@@QAE@XZ ENDP			; ATL::_ATL_COM_MODULE70::_ATL_COM_MODULE70
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ
_TEXT	SEGMENT
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ PROC ; ATL::CAtlBaseModule::GetModuleInstance, COMDAT
; _this$ = ecx

; 316  : 		return m_hInst;

	mov	eax, DWORD PTR [ecx+4]

; 317  : 	}

	ret	0
?GetModuleInstance@CAtlBaseModule@ATL@@QAEPAUHINSTANCE__@@XZ ENDP ; ATL::CAtlBaseModule::GetModuleInstance
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ?Term@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
?Term@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Term, COMDAT
; _this$ = ecx

; 180  : 	{

	npad	2

; 181  : 		DeleteCriticalSection(&m_sec);

	push	ecx
	call	DWORD PTR __imp__DeleteCriticalSection@4

; 182  : 		return S_OK;

	xor	eax, eax

; 183  : 	}

	ret	0
?Term@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Term
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ?Init@CComCriticalSection@ATL@@QAEJXZ
_TEXT	SEGMENT
?Init@CComCriticalSection@ATL@@QAEJXZ PROC		; ATL::CComCriticalSection::Init, COMDAT
; _this$ = ecx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h

; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	0
	push	0
	push	ecx
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 171  : 		if (!_AtlInitializeCriticalSectionEx(&m_sec, 0, 0))

	test	eax, eax
	jne	SHORT $LN10@Init

; 172  : 		{
; 173  : 			hRes = HRESULT_FROM_WIN32(GetLastError());

	call	DWORD PTR __imp__GetLastError@0
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	test	eax, eax
	jle	SHORT $LN9@Init
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h

; 177  : 	}

	ret	0
$LN10@Init:

; 174  : 		}
; 175  : 
; 176  : 		return hRes;

	xor	eax, eax
$LN9@Init:

; 177  : 	}

	ret	0
?Init@CComCriticalSection@ATL@@QAEJXZ ENDP		; ATL::CComCriticalSection::Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ??1CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
??1CComCriticalSection@ATL@@QAE@XZ PROC			; ATL::CComCriticalSection::~CComCriticalSection, COMDAT
; _this$ = ecx

; 156  : 	}

	ret	0
??1CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::~CComCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcore.h
;	COMDAT ??0CComCriticalSection@ATL@@QAE@XZ
_TEXT	SEGMENT
??0CComCriticalSection@ATL@@QAE@XZ PROC			; ATL::CComCriticalSection::CComCriticalSection, COMDAT
; _this$ = ecx

; 149  : 	CComCriticalSection() throw()

	xorps	xmm0, xmm0

; 150  : 	{
; 151  : 		memset(&m_sec, 0, sizeof(CRITICAL_SECTION));
; 152  : 	}

	mov	eax, ecx
	movups	XMMWORD PTR [ecx], xmm0
	movq	QWORD PTR [ecx+16], xmm0
	ret	0
??0CComCriticalSection@ATL@@QAE@XZ ENDP			; ATL::CComCriticalSection::CComCriticalSection
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlwinverapi.h
;	COMDAT ?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z
_TEXT	SEGMENT
_lpCriticalSection$ = 8					; size = 4
_dwSpinCount$ = 12					; size = 4
_Flags$ = 16						; size = 4
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z PROC ; ATL::_AtlInitializeCriticalSectionEx, COMDAT

; 727  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 728  : #if (NTDDI_VERSION >= NTDDI_VISTA) && !defined(_USING_V110_SDK71_) && !defined(_ATL_XP_TARGETING)
; 729  : 	// InitializeCriticalSectionEx is available in Vista or later, desktop or store apps
; 730  : 	return ::InitializeCriticalSectionEx(lpCriticalSection, dwSpinCount, Flags);

	push	DWORD PTR _Flags$[ebp]
	push	DWORD PTR _dwSpinCount$[ebp]
	push	DWORD PTR _lpCriticalSection$[ebp]
	call	DWORD PTR __imp__InitializeCriticalSectionEx@12

; 731  : #else
; 732  : 	UNREFERENCED_PARAMETER(Flags);
; 733  : 
; 734  : 	// ...otherwise fall back to using InitializeCriticalSectionAndSpinCount.
; 735  : 	return ::InitializeCriticalSectionAndSpinCount(lpCriticalSection, dwSpinCount);
; 736  : #endif
; 737  : }

	pop	ebp
	ret	0
?_AtlInitializeCriticalSectionEx@ATL@@YAHPAU_RTL_CRITICAL_SECTION@@KK@Z ENDP ; ATL::_AtlInitializeCriticalSectionEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlexcept.h
;	COMDAT ?_AtlRaiseException@ATL@@YAXKK@Z
_TEXT	SEGMENT
_dwExceptionCode$ = 8					; size = 4
_dwExceptionFlags$ = 12					; size = 4
?_AtlRaiseException@ATL@@YAXKK@Z PROC			; ATL::_AtlRaiseException, COMDAT

; 30   : {

	npad	2
	push	ebp
	mov	ebp, esp

; 31   : 	RaiseException( dwExceptionCode, dwExceptionFlags, 0, NULL );

	push	0
	push	0
	push	DWORD PTR _dwExceptionFlags$[ebp]
	push	DWORD PTR _dwExceptionCode$[ebp]
	call	DWORD PTR __imp__RaiseException@16

; 32   : }

	pop	ebp
	ret	0
?_AtlRaiseException@ATL@@YAXKK@Z ENDP			; ATL::_AtlRaiseException
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<4194304,0>::CTraceCategoryEx<4194304,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<2097152,0>::CTraceCategoryEx<2097152,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z PROC ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP ; ATL::CTraceCategoryEx<1048576,0>::CTraceCategoryEx<1048576,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<262144,0>::CTraceCategoryEx<262144,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<131072,0>::CTraceCategoryEx<131072,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<65536,0>::CTraceCategoryEx<65536,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<32768,0>::CTraceCategoryEx<32768,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<16384,0>::CTraceCategoryEx<16384,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8192,0>::CTraceCategoryEx<8192,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<4096,0>::CTraceCategoryEx<4096,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<2048,0>::CTraceCategoryEx<2048,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<1024,0>::CTraceCategoryEx<1024,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<512,0>::CTraceCategoryEx<512,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<256,0>::CTraceCategoryEx<256,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<128,0>::CTraceCategoryEx<128,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0EA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<64,0>::CTraceCategoryEx<64,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0CA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<32,0>::CTraceCategoryEx<32,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0BA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<16,0>::CTraceCategoryEx<16,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$07$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<8,0>::CTraceCategoryEx<8,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$03$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<4,0>::CTraceCategoryEx<4,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$01$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<2,0>::CTraceCategoryEx<2,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$00$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<1,0>::CTraceCategoryEx<1,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atltrace.h
;	COMDAT ??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z
_TEXT	SEGMENT
_pszCategoryName$ = 8					; size = 4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z PROC	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>, COMDAT
; _this$ = ecx

; 496  : 	(void)pszCategoryName;
; 497  : }

	mov	eax, ecx
	ret	4
??0?$CTraceCategoryEx@$0IAAAA@$0A@@ATL@@QAE@PB_W@Z ENDP	; ATL::CTraceCategoryEx<524288,0>::CTraceCategoryEx<524288,0>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
?SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ PROC		; SK_GetPerfFreq

; 789  :   static LARGE_INTEGER freq = { 0UL };
; 790  :   static bool          init = false;
; 791  :   
; 792  :   if (!init)

	cmp	BYTE PTR ?init@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4_NA, 0
	jne	SHORT $LN4@SK_GetPerf

; 793  :   {
; 794  :     QueryPerformanceFrequency (&freq);

	push	OFFSET ?freq@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4T2@A
	call	DWORD PTR __imp__QueryPerformanceFrequency@4

; 795  :     init = true;

	mov	BYTE PTR ?init@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4_NA, 1
$LN4@SK_GetPerf:

; 796  :   }
; 797  : 
; 798  :   return freq;

	mov	eax, OFFSET ?freq@?1??SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ@4T2@A

; 799  : }

	ret	0
?SK_GetPerfFreq@@YAAAT_LARGE_INTEGER@@XZ ENDP		; SK_GetPerfFreq
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?calcNumSamples@Stats@Framerate@SK@@QAEHT_LARGE_INTEGER@@@Z
_TEXT	SEGMENT
_start$ = 8						; size = 8
?calcNumSamples@Stats@Framerate@SK@@QAEHT_LARGE_INTEGER@@@Z PROC ; SK::Framerate::Stats::calcNumSamples, COMDAT
; _this$ = ecx

; 247  :       {

	npad	2
	push	ebp
	mov	ebp, esp

; 248  :         int samples_used = 0;
; 249  : 
; 250  :         for (auto& i : data)

	lea	edx, DWORD PTR [ecx+1920]
	xor	eax, eax
	cmp	ecx, edx
	je	SHORT $LN3@calcNumSam
	push	esi
	mov	esi, DWORD PTR _start$[ebp+4]
	push	edi
	mov	edi, DWORD PTR _start$[ebp]
	npad	7
$LL4@calcNumSam:

; 251  :         {
; 252  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ecx+12], esi
	jl	SHORT $LN2@calcNumSam
	jg	SHORT $LN11@calcNumSam
	cmp	DWORD PTR [ecx+8], edi
	jb	SHORT $LN2@calcNumSam
$LN11@calcNumSam:

; 253  :           {
; 254  :             samples_used++;

	inc	eax
$LN2@calcNumSam:

; 248  :         int samples_used = 0;
; 249  : 
; 250  :         for (auto& i : data)

	add	ecx, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL4@calcNumSam
	pop	edi
	pop	esi
$LN3@calcNumSam:

; 255  :           }
; 256  :         }
; 257  : 
; 258  :         return samples_used;
; 259  :       }

	pop	ebp
	ret	8
?calcNumSamples@Stats@Framerate@SK@@QAEHT_LARGE_INTEGER@@@Z ENDP ; SK::Framerate::Stats::calcNumSamples
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_seconds$ = 8						; size = 8
?calcNumSamples@Stats@Framerate@SK@@QAEHN@Z PROC	; SK::Framerate::Stats::calcNumSamples
; _this$ = ecx

; 781  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 782  :   return calcNumSamples (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	esi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	edi

; 782  :   return calcNumSamples (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	edi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	mov	ebx, ecx

; 57   :      QueryPerformanceCounter_Original (&time);

	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, esi
	mov	ecx, edi
	call	__ltod3
	mulsd	xmm0, QWORD PTR _seconds$[ebp]
	call	__dtol3
	mov	ecx, DWORD PTR $T1[ebp]
	mov	esi, DWORD PTR $T1[ebp+4]
	sub	ecx, eax
	sbb	esi, edx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 250  :         for (auto& i : data)

	lea	edx, DWORD PTR [ebx+1920]
	xor	eax, eax
	cmp	ebx, edx
	je	SHORT $LN9@calcNumSam
	npad	4
$LL10@calcNumSam:

; 251  :         {
; 252  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ebx+12], esi
	jl	SHORT $LN8@calcNumSam
	jg	SHORT $LN17@calcNumSam
	cmp	DWORD PTR [ebx+8], ecx
	jb	SHORT $LN8@calcNumSam
$LN17@calcNumSam:

; 253  :           {
; 254  :             samples_used++;

	inc	eax
$LN8@calcNumSam:

; 250  :         for (auto& i : data)

	add	ebx, 16					; 00000010H
	cmp	ebx, edx
	jne	SHORT $LL10@calcNumSam
$LN9@calcNumSam:
	pop	edi
	pop	esi
	pop	ebx
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 783  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?calcNumSamples@Stats@Framerate@SK@@QAEHN@Z ENDP	; SK::Framerate::Stats::calcNumSamples
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?calcHitches@Stats@Framerate@SK@@QAEHNNT_LARGE_INTEGER@@@Z
_TEXT	SEGMENT
_tolerance$ = 8						; size = 8
_mean$ = 16						; size = 8
_start$ = 24						; size = 8
?calcHitches@Stats@Framerate@SK@@QAEHNNT_LARGE_INTEGER@@@Z PROC ; SK::Framerate::Stats::calcHitches, COMDAT
; _this$ = ecx

; 199  :       {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi

; 200  :         int hitches = 0;
; 201  : 
; 202  :     #if 0
; 203  :         for (int i = 1; i < MAX_SAMPLES; i++) {
; 204  :           if (data [i    ].when.QuadPart >= start.QuadPart &&
; 205  :               data [i - 1].when.QuadPart >= start.QuadPart) {
; 206  :             if ((data [i].val + data [i - 1].val) / 2.0 > (tolerance * data [i - 1].val) ||
; 207  :                 (data [i].val + data [i - 1].val) / 2.0 > (tolerance * data [i].val))
; 208  :               hitches++;
; 209  :           }
; 210  :         }
; 211  : 
; 212  :         // Handle wrap-around on the final sample
; 213  :         if (data [0              ].when.QuadPart >= start.QuadPart &&
; 214  :             data [MAX_SAMPLES - 1].when.QuadPart >= start.QuadPart &&
; 215  :             data [0].when.QuadPart > data [MAX_SAMPLES -1].when.QuadPart) {
; 216  :           if ((data [MAX_SAMPLES - 1].val - data [0].val) > (tolerance * data [MAX_SAMPLES - 1].val))
; 217  :             hitches++;
; 218  :         }
; 219  :     #else
; 220  :         bool last_late = false;
; 221  : 
; 222  :         for (auto& i : data)

	lea	esi, DWORD PTR [ecx+1920]
	xor	edx, edx
	xor	bl, bl
	cmp	ecx, esi
	je	SHORT $LN15@calcHitche
	movsd	xmm2, QWORD PTR _mean$[ebp]
	movsd	xmm3, QWORD PTR _tolerance$[ebp]
	push	edi
	mov	edi, DWORD PTR _start$[ebp+4]
$LL4@calcHitche:

; 223  :         {
; 224  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ecx+12], edi
	jl	SHORT $LN2@calcHitche
	jg	SHORT $LN14@calcHitche
	mov	eax, DWORD PTR _start$[ebp]
	cmp	DWORD PTR [ecx+8], eax
	jb	SHORT $LN2@calcHitche
$LN14@calcHitche:

; 225  :           {
; 226  :             if (i.val > tolerance * mean)

	movsd	xmm0, QWORD PTR [ecx]
	movaps	xmm1, xmm3
	mulsd	xmm1, xmm2
	comisd	xmm0, xmm1
	jbe	SHORT $LN6@calcHitche

; 227  :             {
; 228  :               if (! last_late)
; 229  :                 hitches++;
; 230  :               last_late = true;

	test	bl, bl
	lea	eax, DWORD PTR [edx+1]
	mov	bl, 1
	cmovne	eax, edx
	mov	edx, eax

; 231  :             }
; 232  : 
; 233  :             else

	jmp	SHORT $LN2@calcHitche
$LN6@calcHitche:

; 234  :             {
; 235  :               last_late = false;

	xor	bl, bl
$LN2@calcHitche:

; 200  :         int hitches = 0;
; 201  : 
; 202  :     #if 0
; 203  :         for (int i = 1; i < MAX_SAMPLES; i++) {
; 204  :           if (data [i    ].when.QuadPart >= start.QuadPart &&
; 205  :               data [i - 1].when.QuadPart >= start.QuadPart) {
; 206  :             if ((data [i].val + data [i - 1].val) / 2.0 > (tolerance * data [i - 1].val) ||
; 207  :                 (data [i].val + data [i - 1].val) / 2.0 > (tolerance * data [i].val))
; 208  :               hitches++;
; 209  :           }
; 210  :         }
; 211  : 
; 212  :         // Handle wrap-around on the final sample
; 213  :         if (data [0              ].when.QuadPart >= start.QuadPart &&
; 214  :             data [MAX_SAMPLES - 1].when.QuadPart >= start.QuadPart &&
; 215  :             data [0].when.QuadPart > data [MAX_SAMPLES -1].when.QuadPart) {
; 216  :           if ((data [MAX_SAMPLES - 1].val - data [0].val) > (tolerance * data [MAX_SAMPLES - 1].val))
; 217  :             hitches++;
; 218  :         }
; 219  :     #else
; 220  :         bool last_late = false;
; 221  : 
; 222  :         for (auto& i : data)

	add	ecx, 16					; 00000010H
	cmp	ecx, esi
	jne	SHORT $LL4@calcHitche
	pop	edi
$LN15@calcHitche:
	pop	esi

; 236  :             }
; 237  :           }
; 238  :         }
; 239  :     #endif
; 240  : 
; 241  :         return hitches;

	mov	eax, edx
	pop	ebx

; 242  :       }

	pop	ebp
	ret	24					; 00000018H
?calcHitches@Stats@Framerate@SK@@QAEHNNT_LARGE_INTEGER@@@Z ENDP ; SK::Framerate::Stats::calcHitches
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_tolerance$ = 8						; size = 8
_mean$ = 16						; size = 8
_seconds$ = 24						; size = 8
?calcHitches@Stats@Framerate@SK@@QAEHNNN@Z PROC		; SK::Framerate::Stats::calcHitches
; _this$ = ecx

; 775  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 776  :   return calcHitches (tolerance, mean, SK_DeltaPerf (seconds, freq.QuadPart));

	mov	esi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	edi

; 776  :   return calcHitches (tolerance, mean, SK_DeltaPerf (seconds, freq.QuadPart));

	mov	edi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	mov	ebx, ecx

; 57   :      QueryPerformanceCounter_Original (&time);

	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, esi
	mov	ecx, edi
	call	__ltod3
	mulsd	xmm0, QWORD PTR _seconds$[ebp]
	call	__dtol3
	mov	ecx, DWORD PTR $T1[ebp]

; 776  :   return calcHitches (tolerance, mean, SK_DeltaPerf (seconds, freq.QuadPart));

	movsd	xmm0, QWORD PTR _mean$[ebp]

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	sub	ecx, eax
	mov	eax, DWORD PTR $T1[ebp+4]
	sbb	eax, edx
	mov	DWORD PTR $T1[ebp], ecx

; 776  :   return calcHitches (tolerance, mean, SK_DeltaPerf (seconds, freq.QuadPart));

	push	eax
	push	ecx
	sub	esp, 16					; 00000010H

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	DWORD PTR $T1[ebp+4], eax

; 776  :   return calcHitches (tolerance, mean, SK_DeltaPerf (seconds, freq.QuadPart));

	mov	ecx, ebx
	movsd	QWORD PTR [esp+8], xmm0
	movsd	xmm0, QWORD PTR _tolerance$[ebp]
	movsd	QWORD PTR [esp], xmm0
	call	?calcHitches@Stats@Framerate@SK@@QAEHNNT_LARGE_INTEGER@@@Z ; SK::Framerate::Stats::calcHitches
	pop	edi
	pop	esi
	pop	ebx

; 777  : }

	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?calcHitches@Stats@Framerate@SK@@QAEHNNN@Z ENDP		; SK::Framerate::Stats::calcHitches
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?calcMax@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z
_TEXT	SEGMENT
_max$ = -8						; size = 8
_start$ = 8						; size = 8
?calcMax@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z PROC ; SK::Framerate::Stats::calcMax, COMDAT
; _this$ = ecx

; 181  :       {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 182  :         double max = -INFINITY;

	movsd	xmm1, QWORD PTR __real@fff0000000000000

; 183  : 
; 184  :         for (auto& i : data)

	lea	eax, DWORD PTR [ecx+1920]
	movsd	QWORD PTR _max$[ebp], xmm1
	cmp	ecx, eax
	je	SHORT $LN13@calcMax
	mov	edx, DWORD PTR _start$[ebp+4]
	push	esi
	mov	esi, DWORD PTR _start$[ebp]
$LL4@calcMax:

; 185  :         {
; 186  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ecx+12], edx
	jl	SHORT $LN2@calcMax
	jg	SHORT $LN12@calcMax
	cmp	DWORD PTR [ecx+8], esi
	jb	SHORT $LN2@calcMax
$LN12@calcMax:
	movsd	xmm0, QWORD PTR [ecx]
	maxsd	xmm0, xmm1

; 187  :           {
; 188  :             if (i.val > max)
; 189  :               max = i.val;

	movaps	xmm1, xmm0
$LN2@calcMax:

; 183  : 
; 184  :         for (auto& i : data)

	add	ecx, 16					; 00000010H
	cmp	ecx, eax
	jne	SHORT $LL4@calcMax

; 187  :           {
; 188  :             if (i.val > max)
; 189  :               max = i.val;

	movsd	QWORD PTR _max$[ebp], xmm1
	pop	esi
$LN13@calcMax:

; 190  :           }
; 191  :         }
; 192  : 
; 193  :         return max;

	fld	QWORD PTR _max$[ebp]

; 194  :       }

	mov	esp, ebp
	pop	ebp
	ret	8
?calcMax@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z ENDP ; SK::Framerate::Stats::calcMax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_max$2 = 8						; size = 8
_seconds$ = 8						; size = 8
?calcMax@Stats@Framerate@SK@@QAENN@Z PROC		; SK::Framerate::Stats::calcMax
; _this$ = ecx

; 769  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 770  :   return calcMax (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	esi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	edi

; 770  :   return calcMax (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	edi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	mov	ebx, ecx

; 57   :      QueryPerformanceCounter_Original (&time);

	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, esi
	mov	ecx, edi
	call	__ltod3
	mulsd	xmm0, QWORD PTR _seconds$[ebp]
	call	__dtol3
	mov	ecx, DWORD PTR $T1[ebp]
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 182  :         double max = -INFINITY;

	movsd	xmm1, QWORD PTR __real@fff0000000000000
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	sub	ecx, eax
	mov	eax, DWORD PTR $T1[ebp+4]
	sbb	eax, edx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 182  :         double max = -INFINITY;

	movsd	QWORD PTR _max$2[ebp], xmm1

; 183  : 
; 184  :         for (auto& i : data)

	lea	edx, DWORD PTR [ebx+1920]
	cmp	ebx, edx
	je	SHORT $LN19@calcMax
$LL10@calcMax:

; 185  :         {
; 186  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ebx+12], eax
	jl	SHORT $LN8@calcMax
	jg	SHORT $LN18@calcMax
	cmp	DWORD PTR [ebx+8], ecx
	jb	SHORT $LN8@calcMax
$LN18@calcMax:
	movsd	xmm0, QWORD PTR [ebx]
	maxsd	xmm0, xmm1

; 187  :           {
; 188  :             if (i.val > max)
; 189  :               max = i.val;

	movaps	xmm1, xmm0
$LN8@calcMax:

; 183  : 
; 184  :         for (auto& i : data)

	add	ebx, 16					; 00000010H
	cmp	ebx, edx
	jne	SHORT $LL10@calcMax

; 187  :           {
; 188  :             if (i.val > max)
; 189  :               max = i.val;

	movsd	QWORD PTR _max$2[ebp], xmm1
$LN19@calcMax:
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 770  :   return calcMax (SK_DeltaPerf (seconds, freq.QuadPart));

	fld	QWORD PTR _max$2[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 771  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?calcMax@Stats@Framerate@SK@@QAENN@Z ENDP		; SK::Framerate::Stats::calcMax
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?calcMin@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z
_TEXT	SEGMENT
_min$ = -8						; size = 8
_start$ = 8						; size = 8
?calcMin@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z PROC ; SK::Framerate::Stats::calcMin, COMDAT
; _this$ = ecx

; 163  :       {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8

; 164  :         double min = INFINITY;

	movsd	xmm1, QWORD PTR __real@7ff0000000000000

; 165  : 
; 166  :         for (auto& i : data)

	lea	eax, DWORD PTR [ecx+1920]
	movsd	QWORD PTR _min$[ebp], xmm1
	cmp	ecx, eax
	je	SHORT $LN13@calcMin
	mov	edx, DWORD PTR _start$[ebp+4]
	push	esi
	mov	esi, DWORD PTR _start$[ebp]
$LL4@calcMin:

; 167  :         {
; 168  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ecx+12], edx
	jl	SHORT $LN2@calcMin
	jg	SHORT $LN12@calcMin
	cmp	DWORD PTR [ecx+8], esi
	jb	SHORT $LN2@calcMin
$LN12@calcMin:
	movsd	xmm0, QWORD PTR [ecx]
	minsd	xmm0, xmm1

; 169  :           {
; 170  :             if (i.val < min)
; 171  :               min = i.val;

	movaps	xmm1, xmm0
$LN2@calcMin:

; 165  : 
; 166  :         for (auto& i : data)

	add	ecx, 16					; 00000010H
	cmp	ecx, eax
	jne	SHORT $LL4@calcMin

; 169  :           {
; 170  :             if (i.val < min)
; 171  :               min = i.val;

	movsd	QWORD PTR _min$[ebp], xmm1
	pop	esi
$LN13@calcMin:

; 172  :           }
; 173  :         }
; 174  : 
; 175  :         return min;

	fld	QWORD PTR _min$[ebp]

; 176  :       }

	mov	esp, ebp
	pop	ebp
	ret	8
?calcMin@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z ENDP ; SK::Framerate::Stats::calcMin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_min$2 = 8						; size = 8
_seconds$ = 8						; size = 8
?calcMin@Stats@Framerate@SK@@QAENN@Z PROC		; SK::Framerate::Stats::calcMin
; _this$ = ecx

; 763  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 764  :   return calcMin (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	esi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	edi

; 764  :   return calcMin (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	edi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	mov	ebx, ecx

; 57   :      QueryPerformanceCounter_Original (&time);

	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, esi
	mov	ecx, edi
	call	__ltod3
	mulsd	xmm0, QWORD PTR _seconds$[ebp]
	call	__dtol3
	mov	ecx, DWORD PTR $T1[ebp]
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 164  :         double min = INFINITY;

	movsd	xmm1, QWORD PTR __real@7ff0000000000000
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	sub	ecx, eax
	mov	eax, DWORD PTR $T1[ebp+4]
	sbb	eax, edx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 164  :         double min = INFINITY;

	movsd	QWORD PTR _min$2[ebp], xmm1

; 165  : 
; 166  :         for (auto& i : data)

	lea	edx, DWORD PTR [ebx+1920]
	cmp	ebx, edx
	je	SHORT $LN19@calcMin
$LL10@calcMin:

; 167  :         {
; 168  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ebx+12], eax
	jl	SHORT $LN8@calcMin
	jg	SHORT $LN18@calcMin
	cmp	DWORD PTR [ebx+8], ecx
	jb	SHORT $LN8@calcMin
$LN18@calcMin:
	movsd	xmm0, QWORD PTR [ebx]
	minsd	xmm0, xmm1

; 169  :           {
; 170  :             if (i.val < min)
; 171  :               min = i.val;

	movaps	xmm1, xmm0
$LN8@calcMin:

; 165  : 
; 166  :         for (auto& i : data)

	add	ebx, 16					; 00000010H
	cmp	ebx, edx
	jne	SHORT $LL10@calcMin

; 169  :           {
; 170  :             if (i.val < min)
; 171  :               min = i.val;

	movsd	QWORD PTR _min$2[ebp], xmm1
$LN19@calcMin:
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 764  :   return calcMin (SK_DeltaPerf (seconds, freq.QuadPart));

	fld	QWORD PTR _min$2[ebp]
	pop	edi
	pop	esi
	pop	ebx

; 765  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?calcMin@Stats@Framerate@SK@@QAENN@Z ENDP		; SK::Framerate::Stats::calcMin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?calcSqStdDev@Stats@Framerate@SK@@QAENNT_LARGE_INTEGER@@@Z
_TEXT	SEGMENT
_mean$ = 8						; size = 8
tv183 = 16						; size = 8
_start$ = 16						; size = 8
?calcSqStdDev@Stats@Framerate@SK@@QAENNT_LARGE_INTEGER@@@Z PROC ; SK::Framerate::Stats::calcSqStdDev, COMDAT
; _this$ = ecx

; 142  :       {

	npad	2
	push	ebp
	mov	ebp, esp

; 143  :         double sd = 0.0;
; 144  : 
; 145  :         int samples_used = 0;
; 146  : 
; 147  :         for (auto& i : data)

	lea	edx, DWORD PTR [ecx+1920]
	xor	eax, eax
	xorps	xmm1, xmm1
	cmp	ecx, edx
	je	SHORT $LN3@calcSqStdD
	movsd	xmm2, QWORD PTR _mean$[ebp]
	push	esi
	mov	esi, DWORD PTR _start$[ebp+4]
	push	edi
	mov	edi, DWORD PTR _start$[ebp]
$LL4@calcSqStdD:

; 148  :         {
; 149  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ecx+12], esi
	jl	SHORT $LN2@calcSqStdD
	jg	SHORT $LN11@calcSqStdD
	cmp	DWORD PTR [ecx+8], edi
	jb	SHORT $LN2@calcSqStdD
$LN11@calcSqStdD:

; 150  :           {
; 151  :             sd += (i.val - mean) *

	movsd	xmm0, QWORD PTR [ecx]

; 152  :                   (i.val - mean);
; 153  :             samples_used++;

	inc	eax
	subsd	xmm0, xmm2
	mulsd	xmm0, xmm0
	addsd	xmm1, xmm0
$LN2@calcSqStdD:

; 143  :         double sd = 0.0;
; 144  : 
; 145  :         int samples_used = 0;
; 146  : 
; 147  :         for (auto& i : data)

	add	ecx, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL4@calcSqStdD
	pop	edi
	pop	esi
$LN3@calcSqStdD:
	movd	xmm0, eax

; 154  :           }
; 155  :         }
; 156  : 
; 157  :         return sd / (double)samples_used;

	cvtdq2pd xmm0, xmm0
	divsd	xmm1, xmm0
	movsd	QWORD PTR tv183[ebp], xmm1
	fld	QWORD PTR tv183[ebp]

; 158  :       }

	pop	ebp
	ret	16					; 00000010H
?calcSqStdDev@Stats@Framerate@SK@@QAENNT_LARGE_INTEGER@@@Z ENDP ; SK::Framerate::Stats::calcSqStdDev
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
_mean$ = 8						; size = 8
tv200 = 16						; size = 8
_seconds$ = 16						; size = 8
?calcSqStdDev@Stats@Framerate@SK@@QAENNN@Z PROC		; SK::Framerate::Stats::calcSqStdDev
; _this$ = ecx

; 757  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 758  :   return calcSqStdDev (mean, SK_DeltaPerf (seconds, freq.QuadPart));

	mov	esi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	edi

; 758  :   return calcSqStdDev (mean, SK_DeltaPerf (seconds, freq.QuadPart));

	mov	edi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	mov	ebx, ecx

; 57   :      QueryPerformanceCounter_Original (&time);

	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, esi
	mov	ecx, edi
	call	__ltod3
	mulsd	xmm0, QWORD PTR _seconds$[ebp]
	call	__dtol3
	mov	ecx, DWORD PTR $T1[ebp]
	xorps	xmm1, xmm1
	mov	esi, DWORD PTR $T1[ebp+4]
	sub	ecx, eax
	sbb	esi, edx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 147  :         for (auto& i : data)

	lea	edx, DWORD PTR [ebx+1920]
	xor	eax, eax
	cmp	ebx, edx
	je	SHORT $LN9@calcSqStdD
	movsd	xmm2, QWORD PTR _mean$[ebp]
$LL10@calcSqStdD:

; 148  :         {
; 149  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ebx+12], esi
	jl	SHORT $LN8@calcSqStdD
	jg	SHORT $LN17@calcSqStdD
	cmp	DWORD PTR [ebx+8], ecx
	jb	SHORT $LN8@calcSqStdD
$LN17@calcSqStdD:

; 150  :           {
; 151  :             sd += (i.val - mean) *

	movsd	xmm0, QWORD PTR [ebx]

; 152  :                   (i.val - mean);
; 153  :             samples_used++;

	inc	eax
	subsd	xmm0, xmm2
	mulsd	xmm0, xmm0
	addsd	xmm1, xmm0
$LN8@calcSqStdD:

; 147  :         for (auto& i : data)

	add	ebx, 16					; 00000010H
	cmp	ebx, edx
	jne	SHORT $LL10@calcSqStdD
$LN9@calcSqStdD:
	movd	xmm0, eax

; 154  :           }
; 155  :         }
; 156  : 
; 157  :         return sd / (double)samples_used;

	cvtdq2pd xmm0, xmm0
	pop	edi
	pop	esi
	pop	ebx
	divsd	xmm1, xmm0
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 758  :   return calcSqStdDev (mean, SK_DeltaPerf (seconds, freq.QuadPart));

	movsd	QWORD PTR tv200[ebp], xmm1
	fld	QWORD PTR tv200[ebp]

; 759  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?calcSqStdDev@Stats@Framerate@SK@@QAENNN@Z ENDP		; SK::Framerate::Stats::calcSqStdDev
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?calcMean@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z
_TEXT	SEGMENT
tv181 = 8						; size = 8
_start$ = 8						; size = 8
?calcMean@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z PROC ; SK::Framerate::Stats::calcMean, COMDAT
; _this$ = ecx

; 122  :       {

	npad	2
	push	ebp
	mov	ebp, esp

; 123  :         double mean = 0.0;
; 124  : 
; 125  :         int samples_used = 0;
; 126  : 
; 127  :         for (auto& i : data)

	lea	edx, DWORD PTR [ecx+1920]
	xor	eax, eax
	xorps	xmm1, xmm1
	cmp	ecx, edx
	je	SHORT $LN3@calcMean
	push	esi
	mov	esi, DWORD PTR _start$[ebp+4]
	push	edi
	mov	edi, DWORD PTR _start$[ebp]
	npad	4
$LL4@calcMean:

; 128  :         {
; 129  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ecx+12], esi
	jl	SHORT $LN2@calcMean
	jg	SHORT $LN11@calcMean
	cmp	DWORD PTR [ecx+8], edi
	jb	SHORT $LN2@calcMean
$LN11@calcMean:

; 130  :           {
; 131  :             ++samples_used;
; 132  :             mean += i.val;

	addsd	xmm1, QWORD PTR [ecx]
	inc	eax
$LN2@calcMean:

; 123  :         double mean = 0.0;
; 124  : 
; 125  :         int samples_used = 0;
; 126  : 
; 127  :         for (auto& i : data)

	add	ecx, 16					; 00000010H
	cmp	ecx, edx
	jne	SHORT $LL4@calcMean
	pop	edi
	pop	esi
$LN3@calcMean:
	movd	xmm0, eax

; 133  :           }
; 134  :         }
; 135  : 
; 136  :         return mean / (double)samples_used;

	cvtdq2pd xmm0, xmm0
	divsd	xmm1, xmm0
	movsd	QWORD PTR tv181[ebp], xmm1
	fld	QWORD PTR tv181[ebp]

; 137  :       }

	pop	ebp
	ret	8
?calcMean@Stats@Framerate@SK@@QAENT_LARGE_INTEGER@@@Z ENDP ; SK::Framerate::Stats::calcMean
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T1 = -8						; size = 8
tv169 = 8						; size = 8
_seconds$ = 8						; size = 8
?calcMean@Stats@Framerate@SK@@QAENN@Z PROC		; SK::Framerate::Stats::calcMean
; _this$ = ecx

; 751  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	ebx
	push	esi

; 752  :   return calcMean (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	esi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	edi

; 752  :   return calcMean (SK_DeltaPerf (seconds, freq.QuadPart));

	mov	edi, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	mov	ebx, ecx

; 57   :      QueryPerformanceCounter_Original (&time);

	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 67   :      time.QuadPart -= static_cast <LONGLONG> (delta * freq);

	mov	edx, esi
	mov	ecx, edi
	call	__ltod3
	mulsd	xmm0, QWORD PTR _seconds$[ebp]
	call	__dtol3
	mov	ecx, DWORD PTR $T1[ebp]
	xorps	xmm1, xmm1
	mov	esi, DWORD PTR $T1[ebp+4]
	sub	ecx, eax
	sbb	esi, edx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 127  :         for (auto& i : data)

	lea	edx, DWORD PTR [ebx+1920]
	xor	eax, eax
	cmp	ebx, edx
	je	SHORT $LN9@calcMean
	npad	1
$LL10@calcMean:

; 128  :         {
; 129  :           if (i.when.QuadPart >= start.QuadPart)

	cmp	DWORD PTR [ebx+12], esi
	jl	SHORT $LN8@calcMean
	jg	SHORT $LN17@calcMean
	cmp	DWORD PTR [ebx+8], ecx
	jb	SHORT $LN8@calcMean
$LN17@calcMean:

; 130  :           {
; 131  :             ++samples_used;
; 132  :             mean += i.val;

	addsd	xmm1, QWORD PTR [ebx]
	inc	eax
$LN8@calcMean:

; 127  :         for (auto& i : data)

	add	ebx, 16					; 00000010H
	cmp	ebx, edx
	jne	SHORT $LL10@calcMean
$LN9@calcMean:
	movd	xmm0, eax

; 133  :           }
; 134  :         }
; 135  : 
; 136  :         return mean / (double)samples_used;

	cvtdq2pd xmm0, xmm0
	pop	edi
	pop	esi
	pop	ebx
	divsd	xmm1, xmm0
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 752  :   return calcMean (SK_DeltaPerf (seconds, freq.QuadPart));

	movsd	QWORD PTR tv169[ebp], xmm1
	fld	QWORD PTR tv169[ebp]

; 753  : }

	mov	esp, ebp
	pop	ebp
	ret	8
?calcMean@Stats@Framerate@SK@@QAENN@Z ENDP		; SK::Framerate::Stats::calcMean
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
$T2 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ PROC	; SK::Framerate::GetLimiter

; 723  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	push	ecx

; 724  :   static Limiter* limiter = nullptr;
; 725  : 
; 726  :   if (limiter == nullptr)

	mov	eax, DWORD PTR ?limiter@?1??GetLimiter@Framerate@SK@@YAPAVLimiter@23@XZ@4PAV423@A
	test	eax, eax
	jne	SHORT $LN2@GetLimiter

; 727  :   {
; 728  :     limiter =

	push	72					; 00000048H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T2[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN4@GetLimiter
	movss	xmm0, DWORD PTR ?config@@3Usk_config_t@@A+396
	sub	esp, 8
	cvtps2pd xmm0, xmm0
	mov	ecx, eax
	movsd	QWORD PTR [esp], xmm0
	call	??0Limiter@Framerate@SK@@QAE@N@Z	; SK::Framerate::Limiter::Limiter
	mov	DWORD PTR ?limiter@?1??GetLimiter@Framerate@SK@@YAPAVLimiter@23@XZ@4PAV423@A, eax

; 729  :       new Limiter (config.render.framerate.target_fps);
; 730  :   }
; 731  : 
; 732  :   return limiter;
; 733  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@GetLimiter:

; 727  :   {
; 728  :     limiter =

	xor	eax, eax
	mov	DWORD PTR ?limiter@?1??GetLimiter@Framerate@SK@@YAPAVLimiter@23@XZ@4PAV423@A, eax
$LN2@GetLimiter:

; 729  :       new Limiter (config.render.framerate.target_fps);
; 730  :   }
; 731  : 
; 732  :   return limiter;
; 733  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ$0:
	push	72					; 00000048H
	mov	eax, DWORD PTR $T2[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ:
	mov	eax, OFFSET __ehfuncinfo$?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetLimiter@Framerate@SK@@YAPAVLimiter@12@XZ ENDP	; SK::Framerate::GetLimiter
; Function compile flags: /Ogtp
;	COMDAT ??0EventCounter_V1@Framerate@SK@@QAE@XZ
_TEXT	SEGMENT
??0EventCounter_V1@Framerate@SK@@QAE@XZ PROC		; SK::Framerate::EventCounter_V1::EventCounter_V1, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	DWORD PTR [ecx+24], 0
	mov	DWORD PTR [ecx+28], 0
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
	mov	DWORD PTR [ecx+40], 0
	mov	DWORD PTR [ecx+44], 0
	mov	DWORD PTR [ecx+48], 0
	mov	DWORD PTR [ecx+52], 0
	mov	DWORD PTR [ecx+56], 0
	mov	DWORD PTR [ecx+60], 0
	mov	DWORD PTR [ecx+64], 0
	mov	DWORD PTR [ecx+68], 0
	mov	DWORD PTR [ecx+72], 0
	mov	DWORD PTR [ecx+76], 0
	mov	DWORD PTR [ecx+80], 0
	mov	DWORD PTR [ecx+84], 0
	mov	DWORD PTR [ecx+88], 0
	mov	DWORD PTR [ecx+92], 0
	ret	0
??0EventCounter_V1@Framerate@SK@@QAE@XZ ENDP		; SK::Framerate::EventCounter_V1::EventCounter_V1
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?getRenderThreadStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ
_TEXT	SEGMENT
?getRenderThreadStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ PROC ; SK::Framerate::EventCounter_V1::getRenderThreadStats, COMDAT
; _this$ = ecx

; 84   :       SleepStats& getRenderThreadStats (void) { return render_thread; }

	lea	eax, DWORD PTR [ecx+24]
	ret	0
?getRenderThreadStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ ENDP ; SK::Framerate::EventCounter_V1::getRenderThreadStats
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?getMessagePumpStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ
_TEXT	SEGMENT
?getMessagePumpStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ PROC ; SK::Framerate::EventCounter_V1::getMessagePumpStats, COMDAT
; _this$ = ecx

; 83   :       SleepStats& getMessagePumpStats  (void) { return message_pump;  }

	mov	eax, ecx
	ret	0
?getMessagePumpStats@EventCounter_V1@Framerate@SK@@QAEAAVSleepStats@123@XZ ENDP ; SK::Framerate::EventCounter_V1::getMessagePumpStats
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ
_TEXT	SEGMENT
??0SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ PROC	; SK::Framerate::EventCounter_V1::SleepStats::SleepStats, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	ret	0
??0SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ ENDP	; SK::Framerate::EventCounter_V1::SleepStats::SleepStats
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z
_TEXT	SEGMENT
_Old$2$ = -8						; size = 4
_Addend$1$ = -4						; size = 4
_dwMilliseconds$ = 8					; size = 4
?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z PROC ; SK::Framerate::EventCounter_V1::SleepStats::wake, COMDAT
; _this$ = ecx

; 80   :         void wake  (DWORD dwMilliseconds) { InterlockedIncrement (&attempts); InterlockedIncrement (&rejections); InterlockedAdd64 (&time.deprived, (ULONGLONG)dwMilliseconds); }

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 8837 :     return (unsigned long) _InterlockedIncrement((volatile long*) Addend);

	lock	 inc	 DWORD PTR [ecx]
	lock	 inc	 DWORD PTR [ecx+4]
	push	ebx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 80   :         void wake  (DWORD dwMilliseconds) { InterlockedIncrement (&attempts); InterlockedIncrement (&rejections); InterlockedAdd64 (&time.deprived, (ULONGLONG)dwMilliseconds); }

	lea	eax, DWORD PTR [ecx+8]
	push	esi
	mov	DWORD PTR _Addend$1$[ebp], eax
	push	edi
$LL10@wake:
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h

; 5450 :         Old = *Addend;

	mov	edi, DWORD PTR [eax]

; 5451 :     } while (InterlockedCompareExchange64(Addend,
; 5452 :                                           Old + Value,
; 5453 :                                           Old) != Old);

	mov	ebx, edi
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, esi
	add	ebx, DWORD PTR _dwMilliseconds$[ebp]
	mov	eax, edi
	mov	DWORD PTR _Old$2$[ebp], esi
	mov	edx, esi
	adc	ecx, 0
	mov	esi, DWORD PTR _Addend$1$[ebp]
	lock	 cmpxchg8b QWORD PTR [esi]
	mov	esi, DWORD PTR _Old$2$[ebp]
	cmp	eax, edi
	mov	eax, DWORD PTR _Addend$1$[ebp]
	jne	SHORT $LL10@wake
	cmp	edx, esi
	jne	SHORT $LL10@wake
	pop	edi
	pop	esi
	pop	ebx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 80   :         void wake  (DWORD dwMilliseconds) { InterlockedIncrement (&attempts); InterlockedIncrement (&rejections); InterlockedAdd64 (&time.deprived, (ULONGLONG)dwMilliseconds); }

	mov	esp, ebp
	pop	ebp
	ret	4
?wake@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ENDP ; SK::Framerate::EventCounter_V1::SleepStats::wake
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h
;	COMDAT ?sleep@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z
_TEXT	SEGMENT
_Old$2$ = -8						; size = 4
_Addend$1$ = -4						; size = 4
_dwMilliseconds$ = 8					; size = 4
?sleep@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z PROC ; SK::Framerate::EventCounter_V1::SleepStats::sleep, COMDAT
; _this$ = ecx

; 79   :         void sleep (DWORD dwMilliseconds) { InterlockedIncrement (&attempts);                                     InterlockedAdd64 (&time.allowed,  (ULONGLONG)dwMilliseconds); }

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h

; 8837 :     return (unsigned long) _InterlockedIncrement((volatile long*) Addend);

	lock	 inc	 DWORD PTR [ecx]
	push	ebx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 79   :         void sleep (DWORD dwMilliseconds) { InterlockedIncrement (&attempts);                                     InterlockedAdd64 (&time.allowed,  (ULONGLONG)dwMilliseconds); }

	lea	eax, DWORD PTR [ecx+16]
	push	esi
	mov	DWORD PTR _Addend$1$[ebp], eax
	push	edi
$LL8@sleep:
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h

; 5450 :         Old = *Addend;

	mov	edi, DWORD PTR [eax]

; 5451 :     } while (InterlockedCompareExchange64(Addend,
; 5452 :                                           Old + Value,
; 5453 :                                           Old) != Old);

	mov	ebx, edi
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, esi
	add	ebx, DWORD PTR _dwMilliseconds$[ebp]
	mov	eax, edi
	mov	DWORD PTR _Old$2$[ebp], esi
	mov	edx, esi
	adc	ecx, 0
	mov	esi, DWORD PTR _Addend$1$[ebp]
	lock	 cmpxchg8b QWORD PTR [esi]
	mov	esi, DWORD PTR _Old$2$[ebp]
	cmp	eax, edi
	mov	eax, DWORD PTR _Addend$1$[ebp]
	jne	SHORT $LL8@sleep
	cmp	edx, esi
	jne	SHORT $LL8@sleep
	pop	edi
	pop	esi
	pop	ebx
; File c:\users\andon\source\repos\specialk\include\specialk\framerate.h

; 79   :         void sleep (DWORD dwMilliseconds) { InterlockedIncrement (&attempts);                                     InterlockedAdd64 (&time.allowed,  (ULONGLONG)dwMilliseconds); }

	mov	esp, ebp
	pop	ebp
	ret	4
?sleep@SleepStats@EventCounter_V1@Framerate@SK@@QAEXK@Z ENDP ; SK::Framerate::EventCounter_V1::SleepStats::sleep
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??0<unnamed-type-time>@SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ
_TEXT	SEGMENT
??0<unnamed-type-time>@SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ PROC ; SK::Framerate::EventCounter_V1::SleepStats::<unnamed-type-time>::<unnamed-type-time>, COMDAT
; _this$ = ecx
	mov	DWORD PTR [ecx], 0
	mov	eax, ecx
	mov	DWORD PTR [ecx+4], 0
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
	ret	0
??0<unnamed-type-time>@SleepStats@EventCounter_V1@Framerate@SK@@QAE@XZ ENDP ; SK::Framerate::EventCounter_V1::SleepStats::<unnamed-type-time>::<unnamed-type-time>
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
?effective_frametime@Limiter@Framerate@SK@@QAENXZ PROC	; SK::Framerate::Limiter::effective_frametime
; _this$ = ecx

; 717  :   return effective_ms;

	fld	QWORD PTR [ecx+16]

; 718  : }

	ret	0
?effective_frametime@Limiter@Framerate@SK@@QAENXZ ENDP	; SK::Framerate::Limiter::effective_frametime
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
_target$ = 8						; size = 8
?set_limit@Limiter@Framerate@SK@@QAEXN@Z PROC		; SK::Framerate::Limiter::set_limit
; _this$ = ecx

; 710  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 711  :   init (target);

	movsd	xmm0, QWORD PTR _target$[ebp]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	call	?init@Limiter@Framerate@SK@@QAEXN@Z	; SK::Framerate::Limiter::init

; 712  : }

	pop	ebp
	ret	8
?set_limit@Limiter@Framerate@SK@@QAEXN@Z ENDP		; SK::Framerate::Limiter::set_limit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
tv163 = -8						; size = 8
?try_wait@Limiter@Framerate@SK@@QAE_NXZ PROC		; SK::Framerate::Limiter::try_wait
; _this$ = ecx

; 451  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 452  :   if (target_fps == 0)

	movss	xmm0, DWORD PTR ?target_fps@@3MA
	sub	esp, 8
	ucomiss	xmm0, DWORD PTR __real@00000000
	push	edi
	mov	edi, ecx
	lahf
	test	ah, 68					; 00000044H
	jp	SHORT $LN2@try_wait

; 453  :     return false;

	xor	al, al
	pop	edi

; 471  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@try_wait:

; 454  : 
; 455  :   LARGE_INTEGER next_;
; 456  : 
; 457  :   next_.QuadPart =

	mov	eax, DWORD PTR [edi+64]
	inc	eax
	mov	edx, DWORD PTR [edi+60]
	mov	ecx, DWORD PTR [edi+56]
	push	ebx
	push	esi
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR [edi]
	mulsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	movsd	QWORD PTR tv163[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv163[ebp]
	mov	edx, DWORD PTR [edi+28]
	mov	ecx, DWORD PTR [edi+24]
	mulsd	xmm1, xmm0
	movsd	QWORD PTR tv163[ebp], xmm1
	call	__ltod3
	addsd	xmm0, QWORD PTR tv163[ebp]
	call	__dtol3

; 458  :     static_cast <LONGLONG> (
; 459  :       start.QuadPart                               +
; 460  :         static_cast <long double> (  frames + 1  ) *
; 461  :                                   ( ms  / 1000.0 ) *
; 462  :         static_cast <long double> ( freq.QuadPart)
; 463  :     );
; 464  : 
; 465  :   QueryPerformanceCounter_Original (&time);

	add	edi, 48					; 00000030H
	mov	ebx, eax
	push	edi
	mov	esi, edx
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 466  : 
; 467  :   if (time.QuadPart < next_.QuadPart)

	cmp	DWORD PTR [edi+4], esi
	jg	SHORT $LN3@try_wait
	jl	SHORT $LN5@try_wait
	cmp	DWORD PTR [edi], ebx
	jae	SHORT $LN3@try_wait
$LN5@try_wait:
	pop	esi
	pop	ebx

; 468  :     return true;

	mov	al, 1
	pop	edi

; 471  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@try_wait:
	pop	esi
	pop	ebx

; 469  : 
; 470  :   return false;

	xor	al, al
	pop	edi

; 471  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?try_wait@Limiter@Framerate@SK@@QAE_NXZ ENDP		; SK::Framerate::Limiter::try_wait
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
tv658 = -60						; size = 8
tv659 = -52						; size = 8
tv647 = -52						; size = 8
tv532 = -52						; size = 8
tv660 = -44						; size = 8
_PeekAndDispatch$2 = -44				; size = 8
tv548 = -36						; size = 8
_hWndThis$3 = -32					; size = 4
_dxgi_swap$4 = -28					; size = 4
_dxgi_output$5 = -24					; size = 4
_d3d9ex$6 = -20						; size = 4
_bUnicode$7 = -13					; size = 1
__$EHRec$ = -12						; size = 12
?wait@Limiter@Framerate@SK@@QAEXXZ PROC			; SK::Framerate::Limiter::wait
; _this$ = ecx

; 481  : {

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR fs:0
	push	-1
	push	__ehhandler$?wait@Limiter@Framerate@SK@@QAEXXZ
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 48					; 00000030H

; 482  :   SK_RunOnce ( SetThreadPriority ( GetCurrentThread (),

	cmp	BYTE PTR ?first@?2??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA, 0
	push	esi
	mov	esi, ecx
	je	SHORT $LN4@wait
	push	1
	call	DWORD PTR __imp__GetCurrentThread@0
	push	eax
	call	DWORD PTR __imp__SetThreadPriority@8
	mov	BYTE PTR ?first@?2??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA, 0
$LN4@wait:

; 483  :                                      THREAD_PRIORITY_ABOVE_NORMAL ) );
; 484  : 
; 485  :   static bool restart      = false;
; 486  :   static bool full_restart = false;
; 487  : 
; 488  :   if (fps != target_fps)

	movss	xmm2, DWORD PTR ?target_fps@@3MA
	movsd	xmm0, QWORD PTR [esi+8]
	cvtps2pd xmm1, xmm2
	ucomisd	xmm0, xmm1
	lahf
	test	ah, 68					; 00000044H
	jnp	SHORT $LN5@wait

; 489  :     init (target_fps);

	cvtps2pd xmm0, xmm2
	sub	esp, 8
	mov	ecx, esi
	movsd	QWORD PTR [esp], xmm0
	call	?init@Limiter@Framerate@SK@@QAEXN@Z	; SK::Framerate::Limiter::init
	movss	xmm2, DWORD PTR ?target_fps@@3MA
$LN5@wait:

; 490  : 
; 491  :   if (target_fps == 0)

	ucomiss	xmm2, DWORD PTR __real@00000000
	lahf
	test	ah, 68					; 00000044H
	jnp	$LN1@wait

; 492  :     return;
; 493  : 
; 494  :   frames++;

	inc	DWORD PTR [esi+64]
	push	ebx
	push	edi

; 495  : 
; 496  :   QueryPerformanceCounter_Original (&time);

	lea	edi, DWORD PTR [esi+48]
	push	edi
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 497  : 
; 498  :   // Actual frametime before we forced a delay
; 499  :   effective_ms =

	mov	edx, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [esi+56]
	mov	ebx, DWORD PTR [edi]
	call	__ltod3
	movaps	xmm1, xmm0
	mov	edx, DWORD PTR [edi+4]
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	mov	ecx, ebx
	divsd	xmm0, xmm1
	sub	ecx, DWORD PTR [esi+32]
	sbb	edx, DWORD PTR [esi+36]
	movsd	QWORD PTR tv659[ebp], xmm1
	movsd	QWORD PTR tv660[ebp], xmm0
	call	__ltod3
	mulsd	xmm0, QWORD PTR tv660[ebp]

; 500  :     1000.0 * ( static_cast <double> (time.QuadPart - last.QuadPart) /
; 501  :                static_cast <double> (freq.QuadPart)                 );
; 502  : 
; 503  :   if ( static_cast <double> (time.QuadPart - next.QuadPart) /
; 504  :        static_cast <double> (freq.QuadPart)                 /
; 505  :                             ( ms / 1000.0 )                 >

	mov	ecx, ebx
	sub	ecx, DWORD PTR [esi+40]
	mov	edx, DWORD PTR [edi+4]
	sbb	edx, DWORD PTR [esi+44]
	mulsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR [esi+16], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR __real@408f400000000000
	movsd	xmm2, QWORD PTR [esi]
	divsd	xmm1, xmm2
	mov	bl, BYTE PTR ?full_restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA
	mulsd	xmm0, QWORD PTR tv660[ebp]
	mulsd	xmm0, xmm1
	movss	xmm1, DWORD PTR ?config@@3Usk_config_t@@A+400
	cvtps2pd xmm1, xmm1
	mulsd	xmm1, QWORD PTR [esi+8]
	comisd	xmm0, xmm1
	ja	SHORT $LN9@wait

; 506  :       ( config.render.framerate.limiter_tolerance * fps )
; 507  :      )
; 508  :   {
; 509  :     //dll_log.Log ( L" * Frame ran long (%3.01fx expected) - restarting"
; 510  :                   //L" limiter...",
; 511  :             //(double)(time.QuadPart - next.QuadPart) /
; 512  :             //(double)freq.QuadPart / (ms / 1000.0) / fps );
; 513  :     restart = true;
; 514  : 
; 515  : #if 0
; 516  :     extern SK::Framerate::Stats frame_history;
; 517  :     extern SK::Framerate::Stats frame_history2;
; 518  : 
; 519  :     double mean    = frame_history.calcMean     ();
; 520  :     double sd      = frame_history.calcSqStdDev (mean);
; 521  : 
; 522  :     if (sd > 5.0f)
; 523  :       full_restart = true;
; 524  : #endif
; 525  :   }
; 526  : 
; 527  :   if (restart || full_restart)

	cmp	BYTE PTR ?restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA, 0
	jne	SHORT $LN9@wait
	test	bl, bl
	je	SHORT $LN10@wait
$LN9@wait:

; 528  :   {
; 529  :     frames         = 0;
; 530  :     start.QuadPart = static_cast <LONGLONG> (

	mulsd	xmm2, QWORD PTR tv659[ebp]
	mov	edx, DWORD PTR [edi+4]
	mov	ecx, DWORD PTR [edi]
	mov	DWORD PTR [esi+64], 0
	mulsd	xmm2, QWORD PTR __real@3f50624dd2f1a9fc
	movsd	QWORD PTR tv532[ebp], xmm2
	call	__ltod3
	addsd	xmm0, QWORD PTR tv532[ebp]
	call	__dtol3
	mov	DWORD PTR [esi+24], eax
	mov	DWORD PTR [esi+28], edx

; 531  :                        static_cast <double> (time.QuadPart) +
; 532  :                                             ( ms / 1000.0 ) *
; 533  :                        static_cast <double> (freq.QuadPart)
; 534  :                      );
; 535  :     restart        = false;

	mov	BYTE PTR ?restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA, 0

; 536  : 
; 537  :     if (full_restart)

	test	bl, bl
	je	SHORT $LN10@wait

; 538  :     {
; 539  :       init (target_fps);

	movss	xmm0, DWORD PTR ?target_fps@@3MA
	sub	esp, 8
	cvtps2pd xmm0, xmm0
	mov	ecx, esi
	movsd	QWORD PTR [esp], xmm0
	call	?init@Limiter@Framerate@SK@@QAEXN@Z	; SK::Framerate::Limiter::init

; 540  :       full_restart = false;

	mov	BYTE PTR ?full_restart@?1??wait@Limiter@Framerate@SK@@QAEXXZ@4_NA, 0
$LN10@wait:

; 541  :     }
; 542  :     //return;
; 543  :   }
; 544  : 
; 545  :   next.QuadPart =

	mov	eax, DWORD PTR [esi+64]
	mov	edx, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [esi+56]
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	mulsd	xmm0, QWORD PTR [esi]
	mulsd	xmm0, QWORD PTR __real@3f50624dd2f1a9fc
	movsd	QWORD PTR tv548[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv548[ebp]
	mov	edx, DWORD PTR [esi+28]
	mov	ecx, DWORD PTR [esi+24]
	mulsd	xmm1, xmm0
	movsd	QWORD PTR tv548[ebp], xmm1
	call	__ltod3
	addsd	xmm0, QWORD PTR tv548[ebp]
	call	__dtol3
	mov	DWORD PTR [esi+40], eax
	mov	DWORD PTR [esi+44], edx

; 546  :     static_cast <LONGLONG> (
; 547  :       static_cast <long double> (start.QuadPart) +
; 548  :       static_cast <long double> (    frames    ) *
; 549  :                                 (  ms / 1000.0 ) *
; 550  :       static_cast <long double> ( freq.QuadPart)
; 551  :     );
; 552  : 
; 553  :   if (next.QuadPart > 0ULL)

	test	edx, edx
	ja	SHORT $LN106@wait
	test	eax, eax
	ja	SHORT $LN106@wait

; 698  : 
; 699  :   else
; 700  :   {
; 701  :     dll_log.Log (L"[FrameLimit] Framerate limiter lost time?! (non-monotonic clock)");

	push	OFFSET $SG200429
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log

; 702  :     start.QuadPart += -next.QuadPart;

	mov	eax, DWORD PTR [esi+40]
	add	esp, 8
	sub	DWORD PTR [esi+24], eax
	mov	eax, DWORD PTR [esi+44]
	sbb	DWORD PTR [esi+28], eax
	jmp	$LN12@wait
$LN106@wait:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 162  :         p = lp;

	mov	DWORD PTR _d3d9ex$6[ebp], 0
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 556  :     CComPtr <IDirect3DDevice9Ex> d3d9ex = nullptr;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 162  :         p = lp;

	mov	DWORD PTR _dxgi_swap$4[ebp], 0
	mov	DWORD PTR _dxgi_output$5[ebp], 0
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 560  :     CComPtr <IDXGIOutput>    dxgi_output = nullptr;

	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 561  : 
; 562  :     SK_RenderBackend& rb =

	call	?SK_GetCurrentRenderBackend@@YGAAVSK_RenderBackend_V2@@XZ ; SK_GetCurrentRenderBackend

; 563  :       SK_GetCurrentRenderBackend ();
; 564  : 
; 565  :     if (config.render.framerate.wait_for_vblank)

	cmp	BYTE PTR ?config@@3Usk_config_t@@A+436, 0
	je	SHORT $LN18@wait

; 566  :     {
; 567  :       SK_RenderAPI api = rb.api;

	mov	ecx, DWORD PTR [eax]

; 568  : 
; 569  :       if (                    api ==                    SK_RenderAPI::D3D10  ||
; 570  :            static_cast <int> (api) & static_cast <int> (SK_RenderAPI::D3D11) ||

	cmp	ecx, 32					; 00000020H
	je	SHORT $LN16@wait
	test	cl, 192					; 000000c0H
	jne	SHORT $LN16@wait

; 581  :           }
; 582  :         }
; 583  :       }
; 584  : 
; 585  :       else if ( static_cast <int> (api)       &

	test	cl, 8
	je	SHORT $LN18@wait

; 586  :                 static_cast <int> (SK_RenderAPI::D3D9) )
; 587  :       {
; 588  :         if (rb.device != nullptr)

	mov	ecx, DWORD PTR [eax+36]
	test	ecx, ecx
	je	SHORT $LN18@wait
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h

; 131  :                 return QueryInterface(__uuidof(Q), (void **)pp);

	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _d3d9ex$6[ebp]
	push	edx
	push	OFFSET __GUID_b18b10ce_2649_405a_870f_95f777d4313a
	push	ecx
	call	DWORD PTR [eax]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 590  :           if (FAILED (rb.device->QueryInterface <IDirect3DDevice9Ex> (&d3d9ex)))

	test	eax, eax
	jns	SHORT $LN18@wait

; 591  :           {
; 592  :             d3d9ex =

	call	?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ ; SK_D3D9_GetTimingDevice
	push	eax
	lea	ecx, DWORD PTR _d3d9ex$6[ebp]
	call	??4?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAEPAUIDirect3DDevice9Ex@@PAU2@@Z ; ATL::CComPtr<IDirect3DDevice9Ex>::operator=
	jmp	SHORT $LN18@wait
$LN16@wait:

; 571  :            static_cast <int> (api) & static_cast <int> (SK_RenderAPI::D3D12) )
; 572  :       {
; 573  :         if (rb.swapchain != nullptr)

	mov	ecx, DWORD PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN18@wait
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h

; 131  :                 return QueryInterface(__uuidof(Q), (void **)pp);

	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _dxgi_swap$4[ebp]
	push	edx
	push	OFFSET __GUID_310d36a0_d2e7_4c0a_aa04_6a9d23b8886a
	push	ecx
	call	DWORD PTR [eax]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 578  :           if (SUCCEEDED (hr))

	test	eax, eax
	js	SHORT $LN18@wait

; 579  :           {
; 580  :             dxgi_swap->GetContainingOutput (&dxgi_output);

	mov	eax, DWORD PTR _dxgi_swap$4[ebp]
	lea	edx, DWORD PTR _dxgi_output$5[ebp]
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+60]
$LN18@wait:

; 593  :               SK_D3D9_GetTimingDevice ();
; 594  :           }
; 595  :         }
; 596  :       }
; 597  :     }
; 598  : 
; 599  :     bool bGUI =
; 600  :       IsGUIThread (FALSE) && GetActiveWindow () == game_window.hWnd;

	push	0
	call	DWORD PTR __imp__IsGUIThread@4
	test	eax, eax
	je	SHORT $LN111@wait
	call	DWORD PTR __imp__GetActiveWindow@0
	mov	ecx, DWORD PTR ?game_window@@3Usk_window_s@@A+4
	cmp	eax, ecx
	jne	SHORT $LN35@wait
	mov	bl, 1
	jmp	SHORT $LN36@wait
$LN111@wait:
	mov	ecx, DWORD PTR ?game_window@@3Usk_window_s@@A+4
$LN35@wait:
	xor	bl, bl
$LN36@wait:

; 601  : 
; 602  :     HWND hWndThis =
; 603  :       bGUI ? game_window.hWnd :

	xor	eax, eax
	test	bl, bl
	cmovne	eax, ecx
	mov	DWORD PTR _hWndThis$3[ebp], eax

; 604  :              HWND_DESKTOP;
; 605  : 
; 606  :     bool bUnicode =
; 607  :       bGUI ? IsWindowUnicode (hWndThis) :

	je	SHORT $LN37@wait
	push	eax
	call	DWORD PTR __imp__IsWindowUnicode@4
	jmp	SHORT $LN38@wait
$LN37@wait:
	xor	eax, eax
$LN38@wait:
	test	eax, eax

; 642  :     };

	lea	eax, DWORD PTR _hWndThis$3[ebp]
	mov	DWORD PTR _PeekAndDispatch$2[ebp], eax
	lea	eax, DWORD PTR _bUnicode$7[ebp]

; 604  :              HWND_DESKTOP;
; 605  : 
; 606  :     bool bUnicode =
; 607  :       bGUI ? IsWindowUnicode (hWndThis) :

	setne	BYTE PTR _bUnicode$7[ebp]

; 642  :     };

	mov	DWORD PTR _PeekAndDispatch$2[ebp+4], eax

; 643  : 
; 644  :     bool bYielded = false;
; 645  : 
; 646  :     while (time.QuadPart < next.QuadPart)

	mov	eax, DWORD PTR [edi+4]
	xor	bh, bh
	cmp	eax, DWORD PTR [esi+44]
	jg	$LN112@wait
	jl	SHORT $LL2@wait
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [esi+40]
	jae	$LN112@wait
	npad	3
$LL2@wait:

; 647  :     {
; 648  :       // Attempt to use a deeper sleep when possible instead of hammering the
; 649  :       //   CPU into submission ;)
; 650  :       if ( ( static_cast <double> (next.QuadPart  - time.QuadPart) >
; 651  :              static_cast <double> (freq.QuadPart) * 0.001 *
; 652  :                                    SK_Framerate_SleepToBusy) &&

	mov	ecx, DWORD PTR [esi+40]
	sub	ecx, DWORD PTR [edi]
	mov	edx, DWORD PTR [esi+44]
	sbb	edx, DWORD PTR [edi+4]
	call	__ltod3
	mov	edx, DWORD PTR [esi+60]
	mov	ecx, DWORD PTR [esi+56]
	movsd	QWORD PTR tv647[ebp], xmm0
	call	__ltod3
	movss	xmm1, DWORD PTR ?SK_Framerate_SleepToBusy@@3MA
	movaps	xmm2, xmm0
	mulsd	xmm2, QWORD PTR __real@3f50624dd2f1a9fc
	cvtps2pd xmm1, xmm1
	movsd	QWORD PTR tv658[ebp], xmm0
	movsd	xmm0, QWORD PTR tv647[ebp]
	mulsd	xmm2, xmm1
	comisd	xmm0, xmm2
	jbe	$LN22@wait
	cmp	BYTE PTR ?SK_Framerate_YieldOnce@@3_NA, 0 ; SK_Framerate_YieldOnce
	je	SHORT $LN23@wait
	test	bh, bh
	jne	$LN22@wait
$LN23@wait:

; 653  :                                   (! (SK_Framerate_YieldOnce && bYielded))
; 654  :          )
; 655  :       {
; 656  :         if ( config.render.framerate.wait_for_vblank )

	cmp	BYTE PTR ?config@@3Usk_config_t@@A+436, 0
	je	SHORT $LN24@wait
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 214  :         return p == pT;

	mov	eax, DWORD PTR _d3d9ex$6[ebp]
	test	eax, eax
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 658  :           if (d3d9ex != nullptr)

	je	SHORT $LN26@wait

; 659  :             d3d9ex->WaitForVBlank (0);

	mov	ecx, DWORD PTR [eax]
	push	0
	push	eax
	call	DWORD PTR [ecx+496]

; 661  :           else if (dxgi_output != nullptr)

	jmp	$LN33@wait
$LN26@wait:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 214  :         return p == pT;

	mov	eax, DWORD PTR _dxgi_output$5[ebp]
	test	eax, eax
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 661  :           else if (dxgi_output != nullptr)

	je	$LN33@wait

; 662  :             WaitForVBlank_Original (dxgi_output);

	push	eax
	call	DWORD PTR ?WaitForVBlank_Original@@3P6GJPAUIDXGIOutput@@@ZA ; WaitForVBlank_Original

; 663  :         }

	jmp	$LN33@wait
$LN24@wait:

; 664  : 
; 665  :         else if (! SK_Framerate_Busy)

	cmp	BYTE PTR ?SK_Framerate_Busy@@3_NA, 0	; SK_Framerate_Busy
	jne	$LN33@wait

; 666  :         {                
; 667  :           auto dwWaitMS =
; 668  :             static_cast <DWORD>
; 669  :               ( (SK_Framerate_WaitScalar * 10.0f) / target_fps ); // 10% of full frame

	movss	xmm0, DWORD PTR ?SK_Framerate_WaitScalar@@3MA
	mulss	xmm0, DWORD PTR __real@41200000
	divss	xmm0, DWORD PTR ?target_fps@@3MA
	call	__ftoui3

; 670  : 
; 671  :           if ( ( static_cast <double> (next.QuadPart - time.QuadPart) /
; 672  :                  static_cast <double> (freq.QuadPart                ) ) * 1000.0 >

	movsd	xmm1, QWORD PTR tv647[ebp]
	mov	ecx, eax
	divsd	xmm1, QWORD PTR tv658[ebp]
	shr	ecx, 31					; 0000001fH
	movd	xmm0, eax
	mulsd	xmm1, QWORD PTR __real@408f400000000000
	cvtdq2pd xmm0, xmm0
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
	comisd	xmm1, xmm0
	jbe	SHORT $LN33@wait

; 673  :                    dwWaitMS )
; 674  :           {
; 675  :             if (bGUI && SK_Framerate_ReduceInputLatency)

	test	bl, bl
	je	SHORT $LN31@wait
	cmp	BYTE PTR ?SK_Framerate_ReduceInputLatency@@3_NA, 0 ; SK_Framerate_ReduceInputLatency
	je	SHORT $LN31@wait

; 676  :             {
; 677  :               MsgWaitForMultipleObjects (0, nullptr, TRUE, dwWaitMS, QS_INPUT);

	push	1031					; 00000407H
	push	eax
	push	1
	push	0
	push	0
	call	DWORD PTR __imp__MsgWaitForMultipleObjects@20

; 678  :               PeekAndDispatch           (                                    );

	lea	ecx, DWORD PTR _PeekAndDispatch$2[ebp]
	call	??R<lambda_853c8f7f2639028bcbddc115ece9255c>@@QBEXXZ ; <lambda_853c8f7f2639028bcbddc115ece9255c>::operator()

; 683  : 
; 684  :             bYielded = true;

	mov	bh, 1

; 685  :           }
; 686  :         }
; 687  : 
; 688  :         QueryPerformanceCounter_Original (&time);
; 689  :         continue;

	jmp	SHORT $LN33@wait
$LN31@wait:

; 679  :             }
; 680  : 
; 681  :             else
; 682  :              SleepEx                   (dwWaitMS,   TRUE);

	push	1
	push	eax
	call	DWORD PTR __imp__SleepEx@8

; 683  : 
; 684  :             bYielded = true;

	mov	bh, 1

; 685  :           }
; 686  :         }
; 687  : 
; 688  :         QueryPerformanceCounter_Original (&time);
; 689  :         continue;

	jmp	SHORT $LN33@wait
$LN22@wait:

; 690  :       }
; 691  : 
; 692  :       if (bGUI)

	test	bl, bl
	je	SHORT $LN33@wait

; 693  :         PeekAndDispatch ();

	lea	ecx, DWORD PTR _PeekAndDispatch$2[ebp]
	call	??R<lambda_853c8f7f2639028bcbddc115ece9255c>@@QBEXXZ ; <lambda_853c8f7f2639028bcbddc115ece9255c>::operator()
$LN33@wait:

; 694  : 
; 695  :       QueryPerformanceCounter_Original (&time);

	push	edi
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original
	mov	eax, DWORD PTR [edi+4]
	cmp	eax, DWORD PTR [esi+44]
	jl	$LL2@wait

; 643  : 
; 644  :     bool bYielded = false;
; 645  : 
; 646  :     while (time.QuadPart < next.QuadPart)

	jg	SHORT $LN112@wait
	mov	eax, DWORD PTR [edi]
	cmp	eax, DWORD PTR [esi+40]
	jb	$LL2@wait
$LN112@wait:
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	mov	eax, DWORD PTR _dxgi_output$5[ebp]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 697  :   }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN87@wait

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN87@wait:

; 176  :         if (p)

	mov	eax, DWORD PTR _dxgi_swap$4[ebp]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 697  :   }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN93@wait

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN93@wait:

; 176  :         if (p)

	mov	eax, DWORD PTR _d3d9ex$6[ebp]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 697  :   }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN12@wait

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN12@wait:
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 705  :   last.QuadPart = time.QuadPart;

	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR [esi+32], eax
	mov	eax, DWORD PTR [edi+4]
	pop	edi
	mov	DWORD PTR [esi+36], eax
	pop	ebx
$LN1@wait:

; 706  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?wait@Limiter@Framerate@SK@@QAEXXZ$0:
	lea	ecx, DWORD PTR _d3d9ex$6[ebp]
	jmp	??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ
__unwindfunclet$?wait@Limiter@Framerate@SK@@QAEXXZ$1:
	lea	ecx, DWORD PTR _dxgi_swap$4[ebp]
	jmp	??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ
__unwindfunclet$?wait@Limiter@Framerate@SK@@QAEXXZ$2:
	lea	ecx, DWORD PTR _dxgi_output$5[ebp]
	jmp	??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ
__ehhandler$?wait@Limiter@Framerate@SK@@QAEXXZ:
	mov	eax, OFFSET __ehfuncinfo$?wait@Limiter@Framerate@SK@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?wait@Limiter@Framerate@SK@@QAEXXZ ENDP			; SK::Framerate::Limiter::wait
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
tv534 = -32						; size = 8
_dxgi_swap$ = -24					; size = 4
_dxgi_output$ = -20					; size = 4
_d3d9ex$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
tv544 = 8						; size = 8
_target$ = 8						; size = 8
?init@Limiter@Framerate@SK@@QAEXN@Z PROC		; SK::Framerate::Limiter::init
; _this$ = ecx

; 382  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?init@Limiter@Framerate@SK@@QAEXN@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	edi, ecx

; 383  :   QueryPerformanceFrequency (&freq);

	lea	eax, DWORD PTR [edi+56]
	push	eax
	call	DWORD PTR __imp__QueryPerformanceFrequency@4

; 384  : 
; 385  :   ms  = 1000.0 / target;

	movsd	xmm1, QWORD PTR _target$[ebp]
	movsd	xmm0, QWORD PTR __real@408f400000000000
	divsd	xmm0, xmm1

; 387  : 
; 388  :   frames = 0;

	mov	DWORD PTR [edi+64], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 162  :         p = lp;

	mov	DWORD PTR _d3d9ex$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 386  :   fps = target;

	movsd	QWORD PTR [edi+8], xmm1
	movsd	QWORD PTR [edi], xmm0

; 389  : 
; 390  :   CComPtr <IDirect3DDevice9Ex> d3d9ex      = nullptr;

	mov	DWORD PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 162  :         p = lp;

	mov	DWORD PTR _dxgi_swap$[ebp], 0
	mov	DWORD PTR _dxgi_output$[ebp], 0
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 392  :   CComPtr <IDXGIOutput>        dxgi_output = nullptr;

	mov	BYTE PTR __$EHRec$[ebp+8], 2

; 393  : 
; 394  :   SK_RenderBackend& rb =

	call	?SK_GetCurrentRenderBackend@@YGAAVSK_RenderBackend_V2@@XZ ; SK_GetCurrentRenderBackend

; 395  :    SK_GetCurrentRenderBackend ();
; 396  : 
; 397  :   SK_RenderAPI api = rb.api;

	mov	ecx, DWORD PTR [eax]

; 398  : 
; 399  :   if (                    api ==                    SK_RenderAPI::D3D10  ||
; 400  :        static_cast <int> (api) & static_cast <int> (SK_RenderAPI::D3D11) ||

	cmp	ecx, 32					; 00000020H
	je	$LN4@init
	test	cl, 192					; 000000c0H
	jne	$LN4@init

; 413  :           //dxgi_output->WaitForVBlank ();
; 414  :         }
; 415  :       }
; 416  :     }
; 417  :   }
; 418  : 
; 419  :   else if (static_cast <int> (api) & static_cast <int> (SK_RenderAPI::D3D9))

	test	cl, 8
	je	$LN7@init

; 420  :   {
; 421  :     if (rb.device != nullptr)

	mov	ebx, DWORD PTR [eax+36]
	test	ebx, ebx
	je	$LN7@init

; 422  :     {
; 423  :       rb.device->QueryInterface ( IID_PPV_ARGS (&d3d9ex) );

	mov	esi, DWORD PTR [ebx]
	lea	eax, DWORD PTR _d3d9ex$[ebp]
	push	eax
	call	??$IID_PPV_ARGS_Helper@UIDirect3DDevice9Ex@@@@YAPAPAXPAPAUIDirect3DDevice9Ex@@@Z ; IID_PPV_ARGS_Helper<IDirect3DDevice9Ex>
	add	esp, 4
	push	eax
	push	OFFSET __GUID_b18b10ce_2649_405a_870f_95f777d4313a
	push	ebx
	call	DWORD PTR [esi]
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 214  :         return p == pT;

	mov	eax, DWORD PTR _d3d9ex$[ebp]
	test	eax, eax
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 426  :       if (d3d9ex != nullptr || (d3d9ex = SK_D3D9_GetTimingDevice ()))

	jne	SHORT $LN11@init
	call	?SK_D3D9_GetTimingDevice@@YAPAUIDirect3DDevice9Ex@@XZ ; SK_D3D9_GetTimingDevice
	push	eax
	lea	ecx, DWORD PTR _d3d9ex$[ebp]
	call	??4?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAEPAUIDirect3DDevice9Ex@@PAU2@@Z ; ATL::CComPtr<IDirect3DDevice9Ex>::operator=
	test	eax, eax
	je	SHORT $LN7@init
	mov	eax, DWORD PTR _d3d9ex$[ebp]
$LN11@init:

; 427  :       {
; 428  :         d3d9ex->SetMaximumFrameLatency (1);

	mov	ecx, DWORD PTR [eax]
	push	1
	push	eax
	call	DWORD PTR [ecx+504]

; 429  :         d3d9ex->WaitForVBlank          (0);

	mov	eax, DWORD PTR _d3d9ex$[ebp]
	push	0
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+496]

; 430  :         d3d9ex->SetMaximumFrameLatency (

	mov	eax, DWORD PTR _d3d9ex$[ebp]
	mov	esi, 2
	mov	ecx, DWORD PTR ?config@@3Usk_config_t@@A+404
	cmp	ecx, -1
	cmove	ecx, esi
	mov	edx, DWORD PTR [eax]
	push	ecx
	push	eax
	call	DWORD PTR [edx+504]
	jmp	SHORT $LN7@init
$LN4@init:

; 401  :        static_cast <int> (api) & static_cast <int> (SK_RenderAPI::D3D12) )
; 402  :   {
; 403  :     if (rb.swapchain != nullptr)

	mov	ecx, DWORD PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN7@init
; File c:\program files (x86)\windows kits\8.1\include\um\unknwnbase.h

; 131  :                 return QueryInterface(__uuidof(Q), (void **)pp);

	mov	eax, DWORD PTR [ecx]
	lea	edx, DWORD PTR _dxgi_swap$[ebp]
	push	edx
	push	OFFSET __GUID_310d36a0_d2e7_4c0a_aa04_6a9d23b8886a
	push	ecx
	call	DWORD PTR [eax]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 408  :       if (SUCCEEDED (hr))

	test	eax, eax
	js	SHORT $LN7@init

; 409  :       {
; 410  :         if (SUCCEEDED (dxgi_swap->GetContainingOutput (&dxgi_output)))

	mov	eax, DWORD PTR _dxgi_swap$[ebp]
	lea	edx, DWORD PTR _dxgi_output$[ebp]
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+60]
	test	eax, eax
	js	SHORT $LN7@init

; 411  :         {
; 412  :           WaitForVBlank_Original (dxgi_output);

	push	DWORD PTR _dxgi_output$[ebp]
	call	DWORD PTR ?WaitForVBlank_Original@@3P6GJPAUIDXGIOutput@@@ZA ; WaitForVBlank_Original
$LN7@init:

; 431  :           config.render.framerate.pre_render_limit == -1 ?
; 432  :                2 : config.render.framerate.pre_render_limit );
; 433  :       }
; 434  :     }
; 435  :   }
; 436  : 
; 437  :   QueryPerformanceCounter_Original (&start);

	lea	esi, DWORD PTR [edi+24]
	push	esi
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 438  : 
; 439  :   next.QuadPart = 0ULL;
; 440  :   time.QuadPart = 0ULL;
; 441  :   last.QuadPart = 0ULL;
; 442  : 
; 443  :   last.QuadPart = static_cast <LONGLONG> (start.QuadPart - (ms / 1000.0) * freq.QuadPart);

	mov	edx, DWORD PTR [esi+4]
	mov	ecx, DWORD PTR [esi]
	mov	DWORD PTR [edi+48], 0
	mov	DWORD PTR [edi+52], 0
	call	__ltod3
	mov	edx, DWORD PTR [edi+60]
	mov	ecx, DWORD PTR [edi+56]
	movsd	QWORD PTR tv544[ebp], xmm0
	call	__ltod3
	movaps	xmm1, xmm0
	movsd	xmm0, QWORD PTR tv544[ebp]
	mulsd	xmm1, QWORD PTR [edi]
	mulsd	xmm1, QWORD PTR __real@3f50624dd2f1a9fc
	subsd	xmm0, xmm1
	movsd	QWORD PTR tv534[ebp], xmm1
	call	__dtol3

; 444  :   next.QuadPart = static_cast <LONGLONG> (start.QuadPart + (ms / 1000.0) * freq.QuadPart);

	movsd	xmm0, QWORD PTR tv534[ebp]
	addsd	xmm0, QWORD PTR tv544[ebp]
	mov	DWORD PTR [edi+32], eax
	mov	DWORD PTR [edi+36], edx
	call	__dtol3
	mov	DWORD PTR [edi+40], eax
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	mov	eax, DWORD PTR _dxgi_output$[ebp]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 444  :   next.QuadPart = static_cast <LONGLONG> (start.QuadPart + (ms / 1000.0) * freq.QuadPart);

	mov	DWORD PTR [edi+44], edx

; 445  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 1
	pop	edi
	pop	esi
	pop	ebx
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN57@init

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN57@init:

; 176  :         if (p)

	mov	eax, DWORD PTR _dxgi_swap$[ebp]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 445  : }

	mov	BYTE PTR __$EHRec$[ebp+8], 0
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN63@init

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN63@init:

; 176  :         if (p)

	mov	eax, DWORD PTR _d3d9ex$[ebp]
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 445  : }

	mov	DWORD PTR __$EHRec$[ebp+8], -1
; File c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.10.25017\atlmfc\include\atlcomcli.h

; 176  :         if (p)

	test	eax, eax
	je	SHORT $LN69@init

; 177  :             p->Release();

	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+8]
$LN69@init:
; File c:\users\andon\source\repos\specialk\src\framerate.cpp

; 445  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?init@Limiter@Framerate@SK@@QAEXN@Z$0:
	lea	ecx, DWORD PTR _d3d9ex$[ebp]
	jmp	??1?$CComPtr@UIDirect3DDevice9Ex@@@ATL@@QAE@XZ
__unwindfunclet$?init@Limiter@Framerate@SK@@QAEXN@Z$1:
	lea	ecx, DWORD PTR _dxgi_swap$[ebp]
	jmp	??1?$CComPtr@UIDXGISwapChain@@@ATL@@QAE@XZ
__unwindfunclet$?init@Limiter@Framerate@SK@@QAEXN@Z$2:
	lea	ecx, DWORD PTR _dxgi_output$[ebp]
	jmp	??1?$CComPtr@UIDXGIOutput@@@ATL@@QAE@XZ
__ehhandler$?init@Limiter@Framerate@SK@@QAEXN@Z:
	mov	eax, OFFSET __ehfuncinfo$?init@Limiter@Framerate@SK@@QAEXN@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?init@Limiter@Framerate@SK@@QAEXN@Z ENDP		; SK::Framerate::Limiter::init
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
_target$ = 8						; size = 8
??0Limiter@Framerate@SK@@QAE@N@Z PROC			; SK::Framerate::Limiter::Limiter
; _this$ = ecx

; 311  : {

	npad	2
	push	ebp
	mov	ebp, esp

; 312  :   init (target);

	movsd	xmm0, QWORD PTR _target$[ebp]
	push	esi
	sub	esp, 8
	mov	esi, ecx
	movsd	QWORD PTR [esp], xmm0
	call	?init@Limiter@Framerate@SK@@QAEXN@Z	; SK::Framerate::Limiter::init

; 313  : }

	mov	eax, esi
	pop	esi
	pop	ebp
	ret	8
??0Limiter@Framerate@SK@@QAE@N@Z ENDP			; SK::Framerate::Limiter::Limiter
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
tv128 = -8						; size = 8
$T1 = -8						; size = 8
_dt$ = 8						; size = 4
_now$ = 12						; size = 4
?Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z PROC	; SK::Framerate::Tick

; 737  : {

	npad	2
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 57   :      QueryPerformanceCounter_Original (&time);

	lea	eax, DWORD PTR $T1[ebp]
	push	eax
	call	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA ; QueryPerformanceCounter_Original

; 738  :   static LARGE_INTEGER last_frame = { };
; 739  : 
; 740  :   now = SK_CurrentPerf ();

	mov	esi, DWORD PTR _now$[ebp]
	mov	ecx, DWORD PTR $T1[ebp]
	mov	edx, DWORD PTR $T1[ebp+4]
	mov	DWORD PTR [esi], ecx

; 741  : 
; 742  :   dt = static_cast  <double> (now.QuadPart - last_frame.QuadPart) /

	sub	ecx, DWORD PTR ?last_frame@?1??Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z@4T4@A
	mov	DWORD PTR [esi+4], edx
	sbb	edx, DWORD PTR ?last_frame@?1??Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z@4T4@A+4
	call	__ltod3
	mov	edx, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A+4
	mov	ecx, DWORD PTR ?freq@Stats@Framerate@SK@@2T_LARGE_INTEGER@@A
	movsd	QWORD PTR tv128[ebp], xmm0
	call	__ltod3
	movsd	xmm1, QWORD PTR tv128[ebp]
	divsd	xmm1, xmm0
	mov	eax, DWORD PTR _dt$[ebp]
	movsd	QWORD PTR [eax], xmm1

; 743  :         static_cast <double> (SK::Framerate::Stats::freq.QuadPart);
; 744  : 
; 745  :   last_frame = now;

	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR ?last_frame@?1??Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z@4T4@A, eax
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR ?last_frame@?1??Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z@4T4@A+4, eax
	pop	esi

; 746  : };

	mov	esp, ebp
	pop	ebp
	ret	0
?Tick@Framerate@SK@@YAXAANAAT_LARGE_INTEGER@@@Z ENDP	; SK::Framerate::Tick
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
?Shutdown@Framerate@SK@@YAXXZ PROC			; SK::Framerate::Shutdown

; 306  :   SK_DisableHook (pfnSleep);

	push	DWORD PTR ?pfnSleep@@3PAXA		; pfnSleep
	call	?SK_DisableHook@@YG?AW4MH_STATUS@@PAX@Z	; SK_DisableHook

; 307  :   //SK_DisableHook (pfnQueryPerformanceCounter);
; 308  : }

	ret	0
?Shutdown@Framerate@SK@@YAXXZ ENDP			; SK::Framerate::Shutdown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\andon\source\repos\specialk\src\framerate.cpp
_TEXT	SEGMENT
_min$2 = -24						; size = 4
_max$3 = -20						; size = 4
$T4 = -20						; size = 4
$T5 = -20						; size = 4
$T6 = -20						; size = 4
$T7 = -20						; size = 4
_cur$8 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?Init@Framerate@SK@@YAXXZ PROC				; SK::Framerate::Init

; 227  : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Init@Framerate@SK@@YAXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	mov	DWORD PTR fs:0, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi

; 228  :   SK_ICommandProcessor* pCommandProc =
; 229  :     SK_GetCommandProcessor ();

	call	?SK_GetCommandProcessor@@YGPAUSK_ICommandProcessor@@XZ ; SK_GetCommandProcessor

; 230  : 
; 231  :   // TEMP HACK BECAUSE THIS ISN'T STORED in D3D9.INI
; 232  :   if (GetModuleHandle (L"AgDrag.dll"))

	mov	edi, DWORD PTR __imp__GetModuleHandleW@4
	mov	esi, eax
	push	OFFSET $SG198516
	call	edi
	mov	ecx, DWORD PTR ?config@@3Usk_config_t@@A+416
	test	eax, eax
	mov	edx, 5
	cmovne	ecx, edx

; 233  :     config.render.framerate.max_delta_time = 5;
; 234  : 
; 235  :   if (GetModuleHandle (L"tsfix.dll"))

	push	OFFSET $SG198518
	mov	DWORD PTR ?config@@3Usk_config_t@@A+416, ecx
	call	edi
	mov	ecx, DWORD PTR ?config@@3Usk_config_t@@A+416
	xor	edx, edx
	test	eax, eax

; 236  :     config.render.framerate.max_delta_time = 0;
; 237  : 
; 238  :   pCommandProc->AddVariable ( "WaitForVBLANK",

	push	20					; 00000014H
	cmovne	ecx, edx
	mov	DWORD PTR ?config@@3Usk_config_t@@A+416, ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T7[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	test	eax, eax
	je	SHORT $LN8@Init
	push	0
	push	OFFSET ?config@@3Usk_config_t@@A+436
	mov	ecx, eax
	call	??0?$SK_IVarStub@_N@@QAE@PA_NPAUSK_IVariableListener@@@Z ; SK_IVarStub<bool>::SK_IVarStub<bool>
	mov	ecx, eax
	jmp	SHORT $LN9@Init
$LN8@Init:
	xor	ecx, ecx
$LN9@Init:
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	OFFSET $SG198520
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR [eax+20]

; 239  :           new SK_IVarStub <bool> (&config.render.framerate.wait_for_vblank));
; 240  :   pCommandProc->AddVariable ( "MaxDeltaTime",

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T6[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	test	eax, eax
	je	SHORT $LN10@Init
	push	0
	push	OFFSET ?config@@3Usk_config_t@@A+416
	mov	ecx, eax
	call	??0?$SK_IVarStub@H@@QAE@PAHPAUSK_IVariableListener@@@Z ; SK_IVarStub<int>::SK_IVarStub<int>
	mov	ecx, eax
	jmp	SHORT $LN11@Init
$LN10@Init:
	xor	ecx, ecx
$LN11@Init:
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	OFFSET $SG198522
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR [eax+20]

; 241  :           new SK_IVarStub <int> (&config.render.framerate.max_delta_time));
; 242  : 
; 243  :   pCommandProc->AddVariable ( "LimiterTolerance",

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T5[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 2
	test	eax, eax
	je	SHORT $LN12@Init
	push	0
	push	OFFSET ?config@@3Usk_config_t@@A+400
	mov	ecx, eax
	call	??0?$SK_IVarStub@M@@QAE@PAMPAUSK_IVariableListener@@@Z ; SK_IVarStub<float>::SK_IVarStub<float>
	mov	ecx, eax
	jmp	SHORT $LN13@Init
$LN12@Init:
	xor	ecx, ecx
$LN13@Init:
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	OFFSET $SG198524
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR [eax+20]

; 244  :           new SK_IVarStub <float> (&config.render.framerate.limiter_tolerance));
; 245  :   pCommandProc->AddVariable ( "TargetFPS",

	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T4[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	test	eax, eax
	je	SHORT $LN14@Init
	push	0
	push	OFFSET ?target_fps@@3MA			; target_fps
	mov	ecx, eax
	call	??0?$SK_IVarStub@M@@QAE@PAMPAUSK_IVariableListener@@@Z ; SK_IVarStub<float>::SK_IVarStub<float>
	mov	ecx, eax
	jmp	SHORT $LN15@Init
$LN14@Init:
	xor	ecx, ecx
$LN15@Init:
	mov	eax, DWORD PTR [esi]
	push	ecx
	push	OFFSET $SG198526
	mov	ecx, esi
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	call	DWORD PTR [eax+20]

; 246  :           new SK_IVarStub <float> (&target_fps));
; 247  : 
; 248  : #define NO_HOOK_QPC
; 249  : #ifndef NO_HOOK_QPC
; 250  :   SK_CreateDLLHook2 (      L"kernel32.dll",
; 251  :                             "QueryPerformanceCounter",
; 252  :                              QueryPerformanceCounter_Detour,
; 253  :     static_cast_p2p <void> (&QueryPerformanceCounter_Original),
; 254  :     static_cast_p2p <void> (&pfnQueryPerformanceCounter) );
; 255  : #endif
; 256  : 
; 257  :   if (! GetModuleHandle (L"PrettyPrinny.dll"))

	push	OFFSET $SG198528
	call	edi
	test	eax, eax
	jne	SHORT $LN4@Init

; 258  :   {
; 259  :     SK_CreateDLLHook2 (      L"kernel32.dll",

	push	OFFSET ?pfnSleep@@3PAXA			; pfnSleep
	push	OFFSET ?Sleep_Original@@3P6GXK@ZA	; Sleep_Original
	push	OFFSET ?Sleep_Detour@@YGXK@Z		; Sleep_Detour
	push	OFFSET $SG198529
	push	OFFSET $SG198530
	call	?SK_CreateDLLHook2@@YG?AW4MH_STATUS@@PB_WPBDPAXPAPAX3@Z ; SK_CreateDLLHook2
$LN4@Init:

; 260  :                               "Sleep",
; 261  :                                Sleep_Detour,
; 262  :       static_cast_p2p <void> (&Sleep_Original),
; 263  :       static_cast_p2p <void> (&pfnSleep) );
; 264  :   }
; 265  : 
; 266  : #ifdef NO_HOOK_QPC
; 267  :     QueryPerformanceCounter_Original =

	push	OFFSET $SG198531
	push	OFFSET $SG198532
	call	edi
	mov	esi, DWORD PTR __imp__GetProcAddress@8
	push	eax
	call	esi

; 268  :       reinterpret_cast <QueryPerformanceCounter_pfn> (
; 269  :         GetProcAddress ( GetModuleHandle (L"kernel32.dll"),
; 270  :                            "QueryPerformanceCounter" )
; 271  :       );
; 272  : #endif
; 273  : 
; 274  :   if (NtDll == nullptr)

	cmp	DWORD PTR ?NtDll@@3PAUHINSTANCE__@@A, 0	; NtDll
	mov	DWORD PTR ?QueryPerformanceCounter_Original@@3P6GHPAT_LARGE_INTEGER@@@ZA, eax ; QueryPerformanceCounter_Original
	jne	$LN6@Init

; 275  :   {
; 276  :     NtDll = LoadLibrary (L"ntdll.dll");

	push	OFFSET $SG198534
	call	DWORD PTR __imp__LoadLibraryW@4

; 277  : 
; 278  :     NtQueryTimerResolution =

	push	OFFSET $SG198535
	push	eax
	mov	DWORD PTR ?NtDll@@3PAUHINSTANCE__@@A, eax ; NtDll
	call	esi

; 279  :       reinterpret_cast <NtQueryTimerResolution_pfn> (
; 280  :         GetProcAddress (NtDll, "NtQueryTimerResolution")
; 281  :       );
; 282  : 
; 283  :     NtSetTimerResolution =

	push	OFFSET $SG198536
	push	DWORD PTR ?NtDll@@3PAUHINSTANCE__@@A	; NtDll
	mov	DWORD PTR ?NtQueryTimerResolution@@3P6GJPAK00@ZA, eax ; NtQueryTimerResolution
	call	esi

; 284  :       reinterpret_cast <NtSetTimerResolution_pfn> (
; 285  :         GetProcAddress (NtDll, "NtSetTimerResolution")
; 286  :       );
; 287  : 
; 288  :     if (NtQueryTimerResolution != nullptr &&

	mov	ecx, DWORD PTR ?NtQueryTimerResolution@@3P6GJPAK00@ZA ; NtQueryTimerResolution
	mov	DWORD PTR ?NtSetTimerResolution@@3P6GJKEPAK@ZA, eax ; NtSetTimerResolution
	test	ecx, ecx
	je	$LN6@Init
	test	eax, eax
	je	$LN6@Init

; 289  :         NtSetTimerResolution   != nullptr)
; 290  :     {
; 291  :       ULONG min, max, cur;
; 292  :       NtQueryTimerResolution (&min, &max, &cur);

	lea	eax, DWORD PTR _cur$8[ebp]
	push	eax
	lea	eax, DWORD PTR _max$3[ebp]
	push	eax
	lea	eax, DWORD PTR _min$2[ebp]
	push	eax
	call	ecx

; 293  :       dll_log.Log ( L"[  Timing  ] Kernel resolution.: %f ms",

	imul	eax, DWORD PTR _cur$8[ebp], 100
	sub	esp, 8
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtpd2ps xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@358637bd
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG198538
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log
	add	esp, 16					; 00000010H

; 294  :                       static_cast <float> (cur * 100)/1000000.0f );
; 295  :       NtSetTimerResolution   (max, TRUE,  &cur);

	lea	eax, DWORD PTR _cur$8[ebp]
	push	eax
	push	1
	push	DWORD PTR _max$3[ebp]
	call	DWORD PTR ?NtSetTimerResolution@@3P6GJKEPAK@ZA ; NtSetTimerResolution

; 296  :       dll_log.Log ( L"[  Timing  ] New resolution....: %f ms",

	imul	eax, DWORD PTR _cur$8[ebp], 100
	sub	esp, 8
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtpd2ps xmm0, xmm0
	mulss	xmm0, DWORD PTR __real@358637bd
	cvtps2pd xmm0, xmm0
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG198539
	push	OFFSET ?dll_log@@3UiSK_Logger@@A	; dll_log
	call	?Log@iSK_Logger@@UAAXQB_WZZ		; iSK_Logger::Log
	add	esp, 16					; 00000010H
$LN6@Init:

; 297  :                       static_cast <float> (cur * 100)/1000000.0f );
; 298  : 
; 299  :     }
; 300  :   }
; 301  : }

	mov	ecx, DWORD PTR __$EHRec$[ebp]
	pop	edi
	pop	esi
	mov	DWORD PTR fs:0, ecx
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Init@Framerate@SK@@YAXXZ$0:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T7[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Init@Framerate@SK@@YAXXZ$1:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T6[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Init@Framerate@SK@@YAXXZ$2:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T5[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__unwindfunclet$?Init@Framerate@SK@@YAXXZ$3:
	push	20					; 00000014H
	mov	eax, DWORD PTR $T4[ebp]
	push	eax
	call	??3@YAXPAXI@Z				; operator delete
	add	esp, 8
	ret	0
__ehhandler$?Init@Framerate@SK@@YAXXZ:
	mov	eax, OFFSET __ehfuncinfo$?Init@Framerate@SK@@YAXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?Init@Framerate@SK@@YAXXZ ENDP				; SK::Framerate::Init
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\winbase.h
;	COMDAT ?_InterlockedIncrement@@YAKPCK@Z
_TEXT	SEGMENT
_Addend$ = 8						; size = 4
?_InterlockedIncrement@@YAKPCK@Z PROC			; _InterlockedIncrement, COMDAT

; 8836 : {

	npad	2
	push	ebp
	mov	ebp, esp

; 8837 :     return (unsigned long) _InterlockedIncrement((volatile long*) Addend);

	mov	ecx, DWORD PTR _Addend$[ebp]
	mov	eax, 1
	lock	 xadd	 DWORD PTR [ecx], eax
	inc	eax

; 8838 : }

	pop	ebp
	ret	0
?_InterlockedIncrement@@YAKPCK@Z ENDP			; _InterlockedIncrement
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\shared\winerror.h
;	COMDAT _HRESULT_FROM_WIN32
_TEXT	SEGMENT
_x$ = 8							; size = 4
_HRESULT_FROM_WIN32 PROC				; COMDAT

; 26297: FORCEINLINE HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (FACILITY_WIN32 << 16) | 0x80000000);}

	npad	2
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _x$[ebp]
	test	eax, eax
	jle	SHORT $LN4@HRESULT_FR
	movzx	eax, ax
	or	eax, -2147024896			; 80070000H
$LN4@HRESULT_FR:
	pop	ebp
	ret	0
_HRESULT_FROM_WIN32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\8.1\include\um\winnt.h
;	COMDAT __InterlockedAdd64
_TEXT	SEGMENT
_Old$2$ = -4						; size = 4
_Addend$ = 8						; size = 4
_Value$ = 12						; size = 8
__InterlockedAdd64 PROC					; COMDAT

; 5446 : {

	npad	2
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
	push	esi
	push	edi
	npad	7
$LL4@Interlocke:

; 5447 :     LONG64 Old;
; 5448 : 
; 5449 :     do {
; 5450 :         Old = *Addend;

	mov	eax, DWORD PTR _Addend$[ebp]
	mov	edi, DWORD PTR [eax]

; 5451 :     } while (InterlockedCompareExchange64(Addend,
; 5452 :                                           Old + Value,
; 5453 :                                           Old) != Old);

	mov	ebx, edi
	mov	esi, DWORD PTR [eax+4]
	mov	ecx, esi
	add	ebx, DWORD PTR _Value$[ebp]
	mov	eax, edi
	mov	DWORD PTR _Old$2$[ebp], esi
	mov	edx, esi
	adc	ecx, DWORD PTR _Value$[ebp+4]
	mov	esi, DWORD PTR _Addend$[ebp]
	lock	 cmpxchg8b QWORD PTR [esi]
	mov	esi, DWORD PTR _Old$2$[ebp]
	cmp	eax, edi
	jne	SHORT $LL4@Interlocke
	cmp	edx, esi
	jne	SHORT $LL4@Interlocke

; 5454 : 
; 5455 :     return Old + Value;

	add	edi, DWORD PTR _Value$[ebp]
	mov	eax, edi
	adc	esi, DWORD PTR _Value$[ebp+4]
	pop	edi
	mov	edx, esi
	pop	esi
	pop	ebx

; 5456 : }

	mov	esp, ebp
	pop	ebp
	ret	0
__InterlockedAdd64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??_H@YGXPAXIIP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIIP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	npad	2
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, DWORD PTR ___n$[ebp]
	test	esi, esi
	je	SHORT $LN6@vector
	push	ebx
	mov	ebx, DWORD PTR ___f$[ebp]
	push	edi
	mov	edi, DWORD PTR ___t$[ebp]
$LL2@vector:
	mov	ecx, edi
	call	ebx
	add	edi, DWORD PTR ___s$[ebp]
	sub	esi, 1
	jne	SHORT $LL2@vector
	pop	edi
	pop	ebx
$LN6@vector:
	pop	esi
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIIP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
END
